/*
 * CentralUserConfig.cc
 *
 *  Created on: May 5, 2025
 *      Author: root
 */

#include <omnetpp.h>
#include "inet/queueing/source/ActivePacketSource.h"
#include "Demand.h"

using namespace omnetpp;
namespace inet{

class CentralUserConfig : public cSimpleModule
{
public:
    int numOfDemands = 0;
protected:
    virtual void initialize() override;
    virtual void handleMessage(cMessage *msg) override;
};


Define_Module(CentralUserConfig);

void CentralUserConfig::initialize()
{
    EV << "Hello World!\n";
}

void CentralUserConfig::handleMessage(cMessage *msg)
{
    if(msg->getKind() == MSGKIND_SEND_TA){
        std::cout << "Here the "<< this->getFullName() << " received stream request"<< endl;

        std::cout << msg->par("sid")<< "\t" <<
        msg->par("talker")<< "\t" <<
        msg->par("listener") << "\t" <<
        msg->par("service_type") << "\t" <<
        msg->par("max_data") <<"\t" <<
        msg->par("max_latency")<< endl;



        packet->addPar("sid"); //todo of cuc
            packet->par("sid").setStringValue("-1");

            packet->addPar("talker");
            packet->par("talker").setStringValue( this->getParentModule()->getParentModule()->getFullName());

            packet->addPar("listener");
            cModule* ioModule = this->getParentModule()->getSubmodule("io");
            packet->par("listener").setStringValue(ioModule->par("destAddress"));

            packet->addPar("service_type");
            packet->par("service_type").setStringValue("-1"); //todo of cuc

            double max_pac_size = 1.0 *  par("packetLength").intValue()*8; //bit
            double period_s = par("productionInterval").doubleValue(); //sec
            double max_data = max_pac_size/period_s;
            packet->addPar("max_data");
            packet->par("max_data").setDoubleValue(max_data);

            packet->addPar("max_latency");
            packet->par("max_latency").setDoubleValue("100");

            int index;

               int talker;
               int listener;

               int service_type; // 0-7 service priority class

               float max_data; // maximum data rate to reserve links
               float max_latency; // maximum tolerable latency

               Demand() {index = -1; talker = 0; listener = 0; service_type = 0; max_data = 0.0; max_latency = 0.0;}


        delete msg;
    }
}


}


