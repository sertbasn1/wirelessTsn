/*
 * CentralUserConfig.cc
 *
 *  Created on: May 5, 2025
 *      Author: root
 */

#include <omnetpp.h>
#include "inet/queueing/source/ActivePacketSource.h"
#include "Demand.h"

class CentralUserConfig : public cSimpleModule {
    public:
        CentralUserConfig();
        ~CentralUserConfig();
        int numOfDemands = 0;
    protected:
        virtual void initialize() override;
        virtual void handleMessage(cMessage *msg) override;
};


using namespace omnetpp;
using namespace std;

namespace inet{

Define_Module(CentralUserConfig);

CentralUserConfig::CentralUserConfig() {

}

CentralUserConfig::~CentralUserConfig() {
}


void CentralUserConfig::initialize()
{
    EV << "Hello World!\n";
}

void CentralUserConfig::handleMessage(cMessage *msg)
{
    if(msg->getKind() == MSGKIND_SEND_TA){
        std::cout << "\tHere the "<< this->getFullName() << " received stream request"<< endl;


        // holding streamid- demand ids at controlelr
        //packet->addPar("sid"); //todo of cuc
        //packet->par("sid").setStringValue("-1");

        int index = numOfDemands;
        numOfDemands++;

        // topology mapping at controller side
        string talker = msg->par("talker").str();
        string  listener = msg->par("listener").str();

        int service_type = stoi(msg->par("service_type").stringValue()) ; // might be dcided by the controller

        float max_data = msg->par("max_data").doubleValue();
        float max_latency= msg->par("max_latency").doubleValue();

        Demand d = Demand(index,  1,  1, service_type, max_data, max_latency);
        cout<<"Demand ix:"<<d.index<<" from "<<d.talker<<" to "<<d.listener<<" in mdr "<<d.max_data<<endl;

        CentralNetworkConfig *cnc = check_and_cast<CentralNetworkConfig *>((this->getParentModule())->getSubmodule("cnc"));
        cnc->registerStream(d);

        delete msg;
    }
}
}



