//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

namespace inet;

cplusplus {{
struct Demand {
    int index;

    int talker;
    int listener;

    int service_type; // 0-7 service priority class

    float max_data; // maximum data rate to reserve links
    float max_latency; // maximum tolerable latency

    Demand() {index = -1; talker = 0; listener = 0; service_type = 0; max_data = 0.0; max_latency = 0.0;}

    Demand(int i, int t, int l, int s, float d, float lt) { index = i; talker = t; listener = l; service_type = s; max_data = d; max_latency = lt;}

    Demand& operator=(const Demand& d) { index = d.index; talker = d.talker; listener = d.listener; service_type = d.service_type; max_data = d.max_data; max_latency = d.max_data; return *this;}

    Demand(const Demand &d) { index = d.index; talker = d.talker; listener = d.listener; service_type = d.service_type; max_data = d.max_data; max_latency = d.max_data; }
};
}}

class noncobject MyHeader;

packet StreamRequest {
    Demand d;
}


 
