//
// Generated file, do not edit! Created by opp_msgtool 6.0 from osg.msg.
//

#ifndef __OMNETPP_OSG_M_H
#define __OMNETPP_OSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace omnetpp {


}  // namespace omnetpp


namespace osg {


}  // namespace osg

// cplusplus {{
namespace omnetpp {
Register_Enum(cOsgCanvas::ViewerStyle, (cOsgCanvas::STYLE_GENERIC, cOsgCanvas::STYLE_EARTH));
Register_Enum(cOsgCanvas::CameraManipulatorType, (cOsgCanvas::CAM_AUTO, cOsgCanvas::CAM_TRACKBALL, cOsgCanvas::CAM_EARTH));
} // namespace omnetpp

#include "omnetpp/osgutil.h"
#include <osg/Node>
#include <osg/Group>

namespace osg {
    inline std::ostream& operator<<(std::ostream& os, Node *node) {
        return os << "(" << node->className() << ")";
    }
} // namespace

inline int osgNode_getNumChildren(osg::Node *node)
{
    osg::Group *group = node->asGroup();
    return group ? group->getNumChildren() : 0;
}

inline osg::Node *osgNode_getChild(osg::Node *node, unsigned int i)
{
    return node->asGroup()->getChild(i);
}

inline int osgNode_getNumDescriptions(osg::Node *node)
{
    return node->getNumDescriptions();
}

inline std::string osgNode_getDescription(osg::Node *node, unsigned int i)
{
    return node->getDescription(i);
}
// }}


namespace omnetpp {


}  // namespace omnetpp


namespace osg {


}  // namespace osg


namespace omnetpp {

inline any_ptr toAnyPtr(const omnetpp::cOsgCanvas::Vec3d *p) {return any_ptr(p);}
template<> inline omnetpp::cOsgCanvas::Vec3d *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cOsgCanvas::Vec3d>(); }
inline any_ptr toAnyPtr(const omnetpp::cOsgCanvas::Viewpoint *p) {return any_ptr(p);}
template<> inline omnetpp::cOsgCanvas::Viewpoint *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cOsgCanvas::Viewpoint>(); }
inline any_ptr toAnyPtr(const omnetpp::cOsgCanvas::EarthViewpoint *p) {return any_ptr(p);}
template<> inline omnetpp::cOsgCanvas::EarthViewpoint *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetpp::cOsgCanvas::EarthViewpoint>(); }
template<> inline omnetpp::cOsgCanvas *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetpp::cOsgCanvas*>(ptr.get<cObject>()); }
template<> inline omnetpp::cObjectOsgNode *fromAnyPtr(any_ptr ptr) { return static_cast<omnetpp::cObjectOsgNode*>(ptr.get<osg::Node>()); }
inline any_ptr toAnyPtr(const osg::Node *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline osg::Node *fromAnyPtr(any_ptr ptr) { return ptr.get<osg::Node>(); }
template<> inline osg::Group *fromAnyPtr(any_ptr ptr) { return static_cast<osg::Group*>(ptr.get<osg::Node>()); }

}  // namespace omnetpp

#endif // ifndef __OMNETPP_OSG_M_H

