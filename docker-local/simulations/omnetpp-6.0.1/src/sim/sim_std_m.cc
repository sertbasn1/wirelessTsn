//
// Generated file, do not edit! Created by opp_msgtool 6.0 from sim_std.msg.
//

// Disable warnings about unused variables, empty switch stmts, etc:
#ifdef _MSC_VER
#  pragma warning(disable:4101)
#  pragma warning(disable:4065)
#endif

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wshadow"
#  pragma clang diagnostic ignored "-Wconversion"
#  pragma clang diagnostic ignored "-Wunused-parameter"
#  pragma clang diagnostic ignored "-Wc++98-compat"
#  pragma clang diagnostic ignored "-Wunreachable-code-break"
#  pragma clang diagnostic ignored "-Wold-style-cast"
#elif defined(__GNUC__)
#  pragma GCC diagnostic ignored "-Wshadow"
#  pragma GCC diagnostic ignored "-Wconversion"
#  pragma GCC diagnostic ignored "-Wunused-parameter"
#  pragma GCC diagnostic ignored "-Wold-style-cast"
#  pragma GCC diagnostic ignored "-Wsuggest-attribute=noreturn"
#  pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

#include <iostream>
#include <sstream>
#include <memory>
#include <type_traits>
#include "sim_std_m.h"

namespace omnetpp {

// Template pack/unpack rules. They are declared *after* a1l type-specific pack functions for multiple reasons.
// They are in the omnetpp namespace, to allow them to be found by argument-dependent lookup via the cCommBuffer argument

// Packing/unpacking an std::vector
template<typename T, typename A>
void doParsimPacking(omnetpp::cCommBuffer *buffer, const std::vector<T,A>& v)
{
    int n = v.size();
    doParsimPacking(buffer, n);
    for (int i = 0; i < n; i++)
        doParsimPacking(buffer, v[i]);
}

template<typename T, typename A>
void doParsimUnpacking(omnetpp::cCommBuffer *buffer, std::vector<T,A>& v)
{
    int n;
    doParsimUnpacking(buffer, n);
    v.resize(n);
    for (int i = 0; i < n; i++)
        doParsimUnpacking(buffer, v[i]);
}

// Packing/unpacking an std::list
template<typename T, typename A>
void doParsimPacking(omnetpp::cCommBuffer *buffer, const std::list<T,A>& l)
{
    doParsimPacking(buffer, (int)l.size());
    for (typename std::list<T,A>::const_iterator it = l.begin(); it != l.end(); ++it)
        doParsimPacking(buffer, (T&)*it);
}

template<typename T, typename A>
void doParsimUnpacking(omnetpp::cCommBuffer *buffer, std::list<T,A>& l)
{
    int n;
    doParsimUnpacking(buffer, n);
    for (int i = 0; i < n; i++) {
        l.push_back(T());
        doParsimUnpacking(buffer, l.back());
    }
}

// Packing/unpacking an std::set
template<typename T, typename Tr, typename A>
void doParsimPacking(omnetpp::cCommBuffer *buffer, const std::set<T,Tr,A>& s)
{
    doParsimPacking(buffer, (int)s.size());
    for (typename std::set<T,Tr,A>::const_iterator it = s.begin(); it != s.end(); ++it)
        doParsimPacking(buffer, *it);
}

template<typename T, typename Tr, typename A>
void doParsimUnpacking(omnetpp::cCommBuffer *buffer, std::set<T,Tr,A>& s)
{
    int n;
    doParsimUnpacking(buffer, n);
    for (int i = 0; i < n; i++) {
        T x;
        doParsimUnpacking(buffer, x);
        s.insert(x);
    }
}

// Packing/unpacking an std::map
template<typename K, typename V, typename Tr, typename A>
void doParsimPacking(omnetpp::cCommBuffer *buffer, const std::map<K,V,Tr,A>& m)
{
    doParsimPacking(buffer, (int)m.size());
    for (typename std::map<K,V,Tr,A>::const_iterator it = m.begin(); it != m.end(); ++it) {
        doParsimPacking(buffer, it->first);
        doParsimPacking(buffer, it->second);
    }
}

template<typename K, typename V, typename Tr, typename A>
void doParsimUnpacking(omnetpp::cCommBuffer *buffer, std::map<K,V,Tr,A>& m)
{
    int n;
    doParsimUnpacking(buffer, n);
    for (int i = 0; i < n; i++) {
        K k; V v;
        doParsimUnpacking(buffer, k);
        doParsimUnpacking(buffer, v);
        m[k] = v;
    }
}

// Default pack/unpack function for arrays
template<typename T>
void doParsimArrayPacking(omnetpp::cCommBuffer *b, const T *t, int n)
{
    for (int i = 0; i < n; i++)
        doParsimPacking(b, t[i]);
}

template<typename T>
void doParsimArrayUnpacking(omnetpp::cCommBuffer *b, T *t, int n)
{
    for (int i = 0; i < n; i++)
        doParsimUnpacking(b, t[i]);
}

// Default rule to prevent compiler from choosing base class' doParsimPacking() function
template<typename T>
void doParsimPacking(omnetpp::cCommBuffer *, const T& t)
{
    throw omnetpp::cRuntimeError("Parsim error: No doParsimPacking() function for type %s", omnetpp::opp_typename(typeid(t)));
}

template<typename T>
void doParsimUnpacking(omnetpp::cCommBuffer *, T& t)
{
    throw omnetpp::cRuntimeError("Parsim error: No doParsimUnpacking() function for type %s", omnetpp::opp_typename(typeid(t)));
}

}  // namespace omnetpp

// cplusplus {{
#ifdef _MSC_VER
#  pragma warning(disable:4996)  // deprecation
#endif

#ifdef __GNUC__
#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#include "expressionfilter.h"
#include "nedsupport.h" // makeNedValue()

namespace omnetpp {

//
// Register enums from the sim. kernel
//
#define cF cFigure
Register_Enum(cPar::Type,         (cPar::BOOL, cPar::DOUBLE, cPar::INT, cPar::STRING, cPar::OBJECT, cPar::XML));
Register_Enum(cGate::Type,        (cGate::INPUT, cGate::OUTPUT, cGate::INOUT));
Register_Enum(cHistogram::Mode,   (cHistogram::MODE_INTEGERS, cHistogram::MODE_REALS, cHistogram::MODE_AUTO));
Register_Enum(cFigure::LineStyle, (cF::LINE_SOLID, cF::LINE_DOTTED, cF::LINE_DASHED));
Register_Enum(cFigure::CapStyle,  (cF::CAP_BUTT, cF::CAP_SQUARE, cF::CAP_ROUND));
Register_Enum(cFigure::JoinStyle, (cF::JOIN_BEVEL, cF::JOIN_MITER, cF::JOIN_ROUND));
Register_Enum(cFigure::FillRule,  (cF::FILL_EVENODD, cF::FILL_NONZERO));
Register_Enum(cFigure::Arrowhead, (cF::ARROW_NONE, cF::ARROW_SIMPLE, cF::ARROW_TRIANGLE, cF::ARROW_BARBED));
Register_Enum(cFigure::Anchor,    (cF::ANCHOR_CENTER, cF::ANCHOR_N, cF::ANCHOR_E, cF::ANCHOR_S, cF::ANCHOR_W, cF::ANCHOR_NW, cF::ANCHOR_NE, cF::ANCHOR_SE, cF::ANCHOR_SW, cF::ANCHOR_BASELINE_START, cF::ANCHOR_BASELINE_MIDDLE, cF::ANCHOR_BASELINE_END));
Register_Enum(cFigure::Alignment, (cF::ALIGN_LEFT, cF::ALIGN_RIGHT, cF::ALIGN_CENTER));
Register_Enum(cFigure::Interpolation, (cF::INTERPOLATION_NONE, cF::INTERPOLATION_FAST, cF::INTERPOLATION_BEST));
Register_Enum(cValue::Type,       (cValue::UNDEF, cValue::BOOL, cValue::INT, cValue::DOUBLE, cValue::STRING, cValue::POINTER));
#undef cF

//
// Define operator<< for some classes
//
inline std::ostream& operator<<(std::ostream& os, const cDisplayString& d) {
    return os << "\"" << d.str() << "\"";
}

using namespace canvas_stream_ops;

//
// This function is to be referenced from sim. kernel classes, to force the
// linker to include this file in executables
//
void std_sim_descriptor_dummy() {}

// This cannot go into the header, because ExpressionFilter is not available via <omnetpp.h>
template<> inline ExpressionFilter *fromAnyPtr(any_ptr ptr) {return static_cast<ExpressionFilter *>(ptr.get<cObject>());}

static void trySetName(cObject *obj, const char *s) 
{
    if (auto named = dynamic_cast<cNamedObject*>(obj))
        named->setName(s);
    else
        throw cRuntimeError("Cannot set name for a %s: not a cNamedObject", obj->getClassName());
}

}  // namespace omnetpp
// }}

namespace omnetpp {

class cObjectDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_className,
        FIELD_name,
        FIELD_fullName,
        FIELD_fullPath,
        FIELD_info,
    };
  public:
    cObjectDescriptor();
    virtual ~cObjectDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cObjectDescriptor)

cObjectDescriptor::cObjectDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cObject)), "")
{
    propertyNames = nullptr;
}

cObjectDescriptor::~cObjectDescriptor()
{
    delete[] propertyNames;
}

bool cObjectDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cObject *>(obj)!=nullptr;
}

const char **cObjectDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "castFunction", "icon",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cObjectDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "castFunction")) return "false";
    if (!strcmp(propertyName, "icon")) return "cogwheel";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cObjectDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 5+base->getFieldCount() : 5;
}

unsigned int cObjectDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_className
        FD_ISEDITABLE,    // FIELD_name
        0,    // FIELD_fullName
        0,    // FIELD_fullPath
        0,    // FIELD_info
    };
    return (field >= 0 && field < 5) ? fieldTypeFlags[field] : 0;
}

const char *cObjectDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "className",
        "name",
        "fullName",
        "fullPath",
        "info",
    };
    return (field >= 0 && field < 5) ? fieldNames[field] : nullptr;
}

int cObjectDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "className") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "name") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "fullName") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "fullPath") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "info") == 0) return baseIndex + 4;
    return base ? base->findField(fieldName) : -1;
}

const char *cObjectDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "string",    // FIELD_className
        "string",    // FIELD_name
        "string",    // FIELD_fullName
        "string",    // FIELD_fullPath
        "string",    // FIELD_info
    };
    return (field >= 0 && field < 5) ? fieldTypeStrings[field] : nullptr;
}

const char **cObjectDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_className: {
            static const char *names[] = { "group", "hint", "eventlog",  nullptr };
            return names;
        }
        case FIELD_name: {
            static const char *names[] = { "group", "editable", "setter", "hint",  nullptr };
            return names;
        }
        case FIELD_fullName: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_fullPath: {
            static const char *names[] = { "group", "hint", "eventlog",  nullptr };
            return names;
        }
        case FIELD_info: {
            static const char *names[] = { "getter", "group", "hint", "eventlog",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cObjectDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_className:
            if (!strcmp(propertyName, "group")) return "base";
            if (!strcmp(propertyName, "hint")) return "C++ class name";
            if (!strcmp(propertyName, "eventlog")) return "skip";
            return nullptr;
        case FIELD_name:
            if (!strcmp(propertyName, "group")) return "base";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "setter")) return "trySetName($,value)";
            if (!strcmp(propertyName, "hint")) return "A string attribute of the object, also used for fullName and fullPath";
            return nullptr;
        case FIELD_fullName:
            if (!strcmp(propertyName, "group")) return "base";
            if (!strcmp(propertyName, "hint")) return "If object is part of a module/gate vector: name with index";
            return nullptr;
        case FIELD_fullPath:
            if (!strcmp(propertyName, "group")) return "base";
            if (!strcmp(propertyName, "hint")) return "Hierarchical name, composed of full names of this object and its owners/parents";
            if (!strcmp(propertyName, "eventlog")) return "skip";
            return nullptr;
        case FIELD_info:
            if (!strcmp(propertyName, "getter")) return "str";
            if (!strcmp(propertyName, "group")) return "base";
            if (!strcmp(propertyName, "hint")) return "Text provided by the object's \"str()\" method";
            if (!strcmp(propertyName, "eventlog")) return "skip";
            return nullptr;
        default: return nullptr;
    }
}

int cObjectDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cObject *pp = omnetpp::fromAnyPtr<cObject>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cObjectDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cObject *pp = omnetpp::fromAnyPtr<cObject>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cObject'", field);
    }
}

const char *cObjectDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cObject *pp = omnetpp::fromAnyPtr<cObject>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cObjectDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cObject *pp = omnetpp::fromAnyPtr<cObject>(object); (void)pp;
    switch (field) {
        case FIELD_className: return oppstring2string(pp->getClassName());
        case FIELD_name: return oppstring2string(pp->getName());
        case FIELD_fullName: return oppstring2string(pp->getFullName());
        case FIELD_fullPath: return oppstring2string(pp->getFullPath());
        case FIELD_info: return oppstring2string(pp->str());
        default: return "";
    }
}

void cObjectDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cObject *pp = omnetpp::fromAnyPtr<cObject>(object); (void)pp;
    switch (field) {
        case FIELD_name: trySetName(pp,value); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cObject'", field);
    }
}

omnetpp::cValue cObjectDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cObject *pp = omnetpp::fromAnyPtr<cObject>(object); (void)pp;
    switch (field) {
        case FIELD_className: return pp->getClassName();
        case FIELD_name: return pp->getName();
        case FIELD_fullName: return pp->getFullName();
        case FIELD_fullPath: return pp->getFullPath();
        case FIELD_info: return pp->str();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cObject' as cValue -- field index out of range?", field);
    }
}

void cObjectDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cObject *pp = omnetpp::fromAnyPtr<cObject>(object); (void)pp;
    switch (field) {
        case FIELD_name: trySetName(pp,value); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cObject'", field);
    }
}

const char *cObjectDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cObjectDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cObject *pp = omnetpp::fromAnyPtr<cObject>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cObjectDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cObject *pp = omnetpp::fromAnyPtr<cObject>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cObject'", field);
    }
}

class cNamedObjectDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cNamedObjectDescriptor();
    virtual ~cNamedObjectDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cNamedObjectDescriptor)

cNamedObjectDescriptor::cNamedObjectDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cNamedObject)), "omnetpp::cObject")
{
    propertyNames = nullptr;
}

cNamedObjectDescriptor::~cNamedObjectDescriptor()
{
    delete[] propertyNames;
}

bool cNamedObjectDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cNamedObject *>(obj)!=nullptr;
}

const char **cNamedObjectDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cNamedObjectDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cNamedObjectDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cNamedObjectDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cNamedObjectDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cNamedObjectDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cNamedObjectDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cNamedObjectDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cNamedObjectDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cNamedObjectDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cNamedObject *pp = omnetpp::fromAnyPtr<cNamedObject>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cNamedObjectDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cNamedObject *pp = omnetpp::fromAnyPtr<cNamedObject>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cNamedObject'", field);
    }
}

const char *cNamedObjectDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cNamedObject *pp = omnetpp::fromAnyPtr<cNamedObject>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cNamedObjectDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cNamedObject *pp = omnetpp::fromAnyPtr<cNamedObject>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cNamedObjectDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cNamedObject *pp = omnetpp::fromAnyPtr<cNamedObject>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNamedObject'", field);
    }
}

omnetpp::cValue cNamedObjectDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cNamedObject *pp = omnetpp::fromAnyPtr<cNamedObject>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cNamedObject' as cValue -- field index out of range?", field);
    }
}

void cNamedObjectDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cNamedObject *pp = omnetpp::fromAnyPtr<cNamedObject>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNamedObject'", field);
    }
}

const char *cNamedObjectDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cNamedObjectDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cNamedObject *pp = omnetpp::fromAnyPtr<cNamedObject>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cNamedObjectDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cNamedObject *pp = omnetpp::fromAnyPtr<cNamedObject>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNamedObject'", field);
    }
}

class cOwnedObjectDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_owner,
    };
  public:
    cOwnedObjectDescriptor();
    virtual ~cOwnedObjectDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cOwnedObjectDescriptor)

cOwnedObjectDescriptor::cOwnedObjectDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cOwnedObject)), "omnetpp::cNamedObject")
{
    propertyNames = nullptr;
}

cOwnedObjectDescriptor::~cOwnedObjectDescriptor()
{
    delete[] propertyNames;
}

bool cOwnedObjectDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cOwnedObject *>(obj)!=nullptr;
}

const char **cOwnedObjectDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cOwnedObjectDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cOwnedObjectDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cOwnedObjectDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_owner
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cOwnedObjectDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "owner",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cOwnedObjectDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "owner") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cOwnedObjectDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cObject",    // FIELD_owner
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cOwnedObjectDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_owner: {
            static const char *names[] = { "group", "hint", "eventlog",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cOwnedObjectDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_owner:
            if (!strcmp(propertyName, "group")) return "base";
            if (!strcmp(propertyName, "hint")) return "Module or container this object belongs to";
            if (!strcmp(propertyName, "eventlog")) return "skip";
            return nullptr;
        default: return nullptr;
    }
}

int cOwnedObjectDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cOwnedObject *pp = omnetpp::fromAnyPtr<cOwnedObject>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cOwnedObjectDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cOwnedObject *pp = omnetpp::fromAnyPtr<cOwnedObject>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cOwnedObject'", field);
    }
}

const char *cOwnedObjectDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cOwnedObject *pp = omnetpp::fromAnyPtr<cOwnedObject>(object); (void)pp;
    switch (field) {
        case FIELD_owner: { const cObject * value = pp->getOwner(); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cOwnedObjectDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cOwnedObject *pp = omnetpp::fromAnyPtr<cOwnedObject>(object); (void)pp;
    switch (field) {
        case FIELD_owner: { auto obj = pp->getOwner(); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cOwnedObjectDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cOwnedObject *pp = omnetpp::fromAnyPtr<cOwnedObject>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cOwnedObject'", field);
    }
}

omnetpp::cValue cOwnedObjectDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cOwnedObject *pp = omnetpp::fromAnyPtr<cOwnedObject>(object); (void)pp;
    switch (field) {
        case FIELD_owner: return omnetpp::toAnyPtr(pp->getOwner()); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cOwnedObject' as cValue -- field index out of range?", field);
    }
}

void cOwnedObjectDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cOwnedObject *pp = omnetpp::fromAnyPtr<cOwnedObject>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cOwnedObject'", field);
    }
}

const char *cOwnedObjectDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_owner: return omnetpp::opp_typename(typeid(cObject));
        default: return nullptr;
    };
}

omnetpp::any_ptr cOwnedObjectDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cOwnedObject *pp = omnetpp::fromAnyPtr<cOwnedObject>(object); (void)pp;
    switch (field) {
        case FIELD_owner: return omnetpp::toAnyPtr(pp->getOwner()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cOwnedObjectDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cOwnedObject *pp = omnetpp::fromAnyPtr<cOwnedObject>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cOwnedObject'", field);
    }
}

class cNoncopyableOwnedObjectDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cNoncopyableOwnedObjectDescriptor();
    virtual ~cNoncopyableOwnedObjectDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cNoncopyableOwnedObjectDescriptor)

cNoncopyableOwnedObjectDescriptor::cNoncopyableOwnedObjectDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cNoncopyableOwnedObject)), "omnetpp::cOwnedObject")
{
    propertyNames = nullptr;
}

cNoncopyableOwnedObjectDescriptor::~cNoncopyableOwnedObjectDescriptor()
{
    delete[] propertyNames;
}

bool cNoncopyableOwnedObjectDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cNoncopyableOwnedObject *>(obj)!=nullptr;
}

const char **cNoncopyableOwnedObjectDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cNoncopyableOwnedObjectDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cNoncopyableOwnedObjectDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cNoncopyableOwnedObjectDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cNoncopyableOwnedObjectDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cNoncopyableOwnedObjectDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cNoncopyableOwnedObjectDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cNoncopyableOwnedObjectDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cNoncopyableOwnedObjectDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cNoncopyableOwnedObjectDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cNoncopyableOwnedObject *pp = omnetpp::fromAnyPtr<cNoncopyableOwnedObject>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cNoncopyableOwnedObjectDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cNoncopyableOwnedObject *pp = omnetpp::fromAnyPtr<cNoncopyableOwnedObject>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cNoncopyableOwnedObject'", field);
    }
}

const char *cNoncopyableOwnedObjectDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cNoncopyableOwnedObject *pp = omnetpp::fromAnyPtr<cNoncopyableOwnedObject>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cNoncopyableOwnedObjectDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cNoncopyableOwnedObject *pp = omnetpp::fromAnyPtr<cNoncopyableOwnedObject>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cNoncopyableOwnedObjectDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cNoncopyableOwnedObject *pp = omnetpp::fromAnyPtr<cNoncopyableOwnedObject>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNoncopyableOwnedObject'", field);
    }
}

omnetpp::cValue cNoncopyableOwnedObjectDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cNoncopyableOwnedObject *pp = omnetpp::fromAnyPtr<cNoncopyableOwnedObject>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cNoncopyableOwnedObject' as cValue -- field index out of range?", field);
    }
}

void cNoncopyableOwnedObjectDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cNoncopyableOwnedObject *pp = omnetpp::fromAnyPtr<cNoncopyableOwnedObject>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNoncopyableOwnedObject'", field);
    }
}

const char *cNoncopyableOwnedObjectDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cNoncopyableOwnedObjectDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cNoncopyableOwnedObject *pp = omnetpp::fromAnyPtr<cNoncopyableOwnedObject>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cNoncopyableOwnedObjectDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cNoncopyableOwnedObject *pp = omnetpp::fromAnyPtr<cNoncopyableOwnedObject>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNoncopyableOwnedObject'", field);
    }
}

class cSoftOwnerDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_ownedObjects,
    };
  public:
    cSoftOwnerDescriptor();
    virtual ~cSoftOwnerDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cSoftOwnerDescriptor)

cSoftOwnerDescriptor::cSoftOwnerDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cSoftOwner)), "omnetpp::cNoncopyableOwnedObject")
{
    propertyNames = nullptr;
}

cSoftOwnerDescriptor::~cSoftOwnerDescriptor()
{
    delete[] propertyNames;
}

bool cSoftOwnerDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cSoftOwner *>(obj)!=nullptr;
}

const char **cSoftOwnerDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cSoftOwnerDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cSoftOwnerDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cSoftOwnerDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_ownedObjects
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cSoftOwnerDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "ownedObjects",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cSoftOwnerDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "ownedObjects") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cSoftOwnerDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cOwnedObject",    // FIELD_ownedObjects
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cSoftOwnerDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_ownedObjects: {
            static const char *names[] = { "getter", "sizeGetter", "group", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cSoftOwnerDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_ownedObjects:
            if (!strcmp(propertyName, "getter")) return "getOwnedObject";
            if (!strcmp(propertyName, "sizeGetter")) return "getNumOwnedObjects";
            if (!strcmp(propertyName, "group")) return "owned objects";
            if (!strcmp(propertyName, "hint")) return "List of objects directly held by this component";
            return nullptr;
        default: return nullptr;
    }
}

int cSoftOwnerDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cSoftOwner *pp = omnetpp::fromAnyPtr<cSoftOwner>(object); (void)pp;
    switch (field) {
        case FIELD_ownedObjects: return pp->getNumOwnedObjects();
        default: return 0;
    }
}

void cSoftOwnerDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cSoftOwner *pp = omnetpp::fromAnyPtr<cSoftOwner>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cSoftOwner'", field);
    }
}

const char *cSoftOwnerDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cSoftOwner *pp = omnetpp::fromAnyPtr<cSoftOwner>(object); (void)pp;
    switch (field) {
        case FIELD_ownedObjects: { const cOwnedObject * value = pp->getOwnedObject(i); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cSoftOwnerDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cSoftOwner *pp = omnetpp::fromAnyPtr<cSoftOwner>(object); (void)pp;
    switch (field) {
        case FIELD_ownedObjects: { auto obj = pp->getOwnedObject(i); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cSoftOwnerDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cSoftOwner *pp = omnetpp::fromAnyPtr<cSoftOwner>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cSoftOwner'", field);
    }
}

omnetpp::cValue cSoftOwnerDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cSoftOwner *pp = omnetpp::fromAnyPtr<cSoftOwner>(object); (void)pp;
    switch (field) {
        case FIELD_ownedObjects: return omnetpp::toAnyPtr(pp->getOwnedObject(i)); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cSoftOwner' as cValue -- field index out of range?", field);
    }
}

void cSoftOwnerDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cSoftOwner *pp = omnetpp::fromAnyPtr<cSoftOwner>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cSoftOwner'", field);
    }
}

const char *cSoftOwnerDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_ownedObjects: return omnetpp::opp_typename(typeid(cOwnedObject));
        default: return nullptr;
    };
}

omnetpp::any_ptr cSoftOwnerDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cSoftOwner *pp = omnetpp::fromAnyPtr<cSoftOwner>(object); (void)pp;
    switch (field) {
        case FIELD_ownedObjects: return omnetpp::toAnyPtr(pp->getOwnedObject(i)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cSoftOwnerDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cSoftOwner *pp = omnetpp::fromAnyPtr<cSoftOwner>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cSoftOwner'", field);
    }
}

class cDisplayStringDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_value,
    };
  public:
    cDisplayStringDescriptor();
    virtual ~cDisplayStringDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cDisplayStringDescriptor)

cDisplayStringDescriptor::cDisplayStringDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cDisplayString)), "")
{
    propertyNames = nullptr;
}

cDisplayStringDescriptor::~cDisplayStringDescriptor()
{
    delete[] propertyNames;
}

bool cDisplayStringDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cDisplayString *>(obj)!=nullptr;
}

const char **cDisplayStringDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "polymorphic", "descriptor", "toValue",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cDisplayStringDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "polymorphic")) return "false";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "toValue")) return ".str()";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cDisplayStringDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cDisplayStringDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_value
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cDisplayStringDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "value",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cDisplayStringDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "value") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cDisplayStringDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "string",    // FIELD_value
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cDisplayStringDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_value: {
            static const char *names[] = { "getter", "setter", "editable", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cDisplayStringDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_value:
            if (!strcmp(propertyName, "getter")) return "str";
            if (!strcmp(propertyName, "setter")) return "parse";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "hint")) return "The editable display string itself";
            return nullptr;
        default: return nullptr;
    }
}

int cDisplayStringDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cDisplayString *pp = omnetpp::fromAnyPtr<cDisplayString>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cDisplayStringDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cDisplayString *pp = omnetpp::fromAnyPtr<cDisplayString>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cDisplayString'", field);
    }
}

const char *cDisplayStringDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cDisplayString *pp = omnetpp::fromAnyPtr<cDisplayString>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cDisplayStringDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cDisplayString *pp = omnetpp::fromAnyPtr<cDisplayString>(object); (void)pp;
    switch (field) {
        case FIELD_value: return oppstring2string(pp->str());
        default: return "";
    }
}

void cDisplayStringDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cDisplayString *pp = omnetpp::fromAnyPtr<cDisplayString>(object); (void)pp;
    switch (field) {
        case FIELD_value: pp->parse((value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cDisplayString'", field);
    }
}

omnetpp::cValue cDisplayStringDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cDisplayString *pp = omnetpp::fromAnyPtr<cDisplayString>(object); (void)pp;
    switch (field) {
        case FIELD_value: return pp->str();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cDisplayString' as cValue -- field index out of range?", field);
    }
}

void cDisplayStringDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cDisplayString *pp = omnetpp::fromAnyPtr<cDisplayString>(object); (void)pp;
    switch (field) {
        case FIELD_value: pp->parse(value.stringValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cDisplayString'", field);
    }
}

const char *cDisplayStringDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cDisplayStringDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cDisplayString *pp = omnetpp::fromAnyPtr<cDisplayString>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cDisplayStringDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cDisplayString *pp = omnetpp::fromAnyPtr<cDisplayString>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cDisplayString'", field);
    }
}

class cPropertyDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_isImplicit,
        FIELD_index,
        FIELD_value,
    };
  public:
    cPropertyDescriptor();
    virtual ~cPropertyDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cPropertyDescriptor)

cPropertyDescriptor::cPropertyDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cProperty)), "omnetpp::cObject")
{
    propertyNames = nullptr;
}

cPropertyDescriptor::~cPropertyDescriptor()
{
    delete[] propertyNames;
}

bool cPropertyDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cProperty *>(obj)!=nullptr;
}

const char **cPropertyDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cPropertyDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cPropertyDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 3+base->getFieldCount() : 3;
}

unsigned int cPropertyDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_isImplicit
        0,    // FIELD_index
        0,    // FIELD_value
    };
    return (field >= 0 && field < 3) ? fieldTypeFlags[field] : 0;
}

const char *cPropertyDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "isImplicit",
        "index",
        "value",
    };
    return (field >= 0 && field < 3) ? fieldNames[field] : nullptr;
}

int cPropertyDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "isImplicit") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "index") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "value") == 0) return baseIndex + 2;
    return base ? base->findField(fieldName) : -1;
}

const char *cPropertyDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "bool",    // FIELD_isImplicit
        "string",    // FIELD_index
        "string",    // FIELD_value
    };
    return (field >= 0 && field < 3) ? fieldTypeStrings[field] : nullptr;
}

const char **cPropertyDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_isImplicit: {
            static const char *names[] = { "getter", "group",  nullptr };
            return names;
        }
        case FIELD_index: {
            static const char *names[] = { "group",  nullptr };
            return names;
        }
        case FIELD_value: {
            static const char *names[] = { "getter", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cPropertyDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_isImplicit:
            if (!strcmp(propertyName, "getter")) return "isImplicit";
            if (!strcmp(propertyName, "group")) return "fields";
            return nullptr;
        case FIELD_index:
            if (!strcmp(propertyName, "group")) return "fields";
            return nullptr;
        case FIELD_value:
            if (!strcmp(propertyName, "getter")) return "str";
            if (!strcmp(propertyName, "hint")) return "Name and value";
            return nullptr;
        default: return nullptr;
    }
}

int cPropertyDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cProperty *pp = omnetpp::fromAnyPtr<cProperty>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cPropertyDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cProperty *pp = omnetpp::fromAnyPtr<cProperty>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cProperty'", field);
    }
}

const char *cPropertyDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cProperty *pp = omnetpp::fromAnyPtr<cProperty>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cPropertyDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cProperty *pp = omnetpp::fromAnyPtr<cProperty>(object); (void)pp;
    switch (field) {
        case FIELD_isImplicit: return bool2string(pp->isImplicit());
        case FIELD_index: return oppstring2string(pp->getIndex());
        case FIELD_value: return oppstring2string(pp->str());
        default: return "";
    }
}

void cPropertyDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cProperty *pp = omnetpp::fromAnyPtr<cProperty>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cProperty'", field);
    }
}

omnetpp::cValue cPropertyDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cProperty *pp = omnetpp::fromAnyPtr<cProperty>(object); (void)pp;
    switch (field) {
        case FIELD_isImplicit: return pp->isImplicit();
        case FIELD_index: return pp->getIndex();
        case FIELD_value: return pp->str();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cProperty' as cValue -- field index out of range?", field);
    }
}

void cPropertyDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cProperty *pp = omnetpp::fromAnyPtr<cProperty>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cProperty'", field);
    }
}

const char *cPropertyDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cPropertyDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cProperty *pp = omnetpp::fromAnyPtr<cProperty>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cPropertyDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cProperty *pp = omnetpp::fromAnyPtr<cProperty>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cProperty'", field);
    }
}

class cComponent__SignalListenerListDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_signalName,
        FIELD_listeners,
    };
  public:
    cComponent__SignalListenerListDescriptor();
    virtual ~cComponent__SignalListenerListDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cComponent__SignalListenerListDescriptor)

cComponent__SignalListenerListDescriptor::cComponent__SignalListenerListDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cComponent::SignalListenerList)), "")
{
    propertyNames = nullptr;
}

cComponent__SignalListenerListDescriptor::~cComponent__SignalListenerListDescriptor()
{
    delete[] propertyNames;
}

bool cComponent__SignalListenerListDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cComponent::SignalListenerList *>(obj)!=nullptr;
}

const char **cComponent__SignalListenerListDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "polymorphic", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cComponent__SignalListenerListDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "polymorphic")) return "false";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cComponent__SignalListenerListDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cComponent__SignalListenerListDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_signalName
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER,    // FIELD_listeners
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cComponent__SignalListenerListDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "signalName",
        "listeners",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cComponent__SignalListenerListDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "signalName") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "listeners") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cComponent__SignalListenerListDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "string",    // FIELD_signalName
        "omnetpp::cIListener",    // FIELD_listeners
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cComponent__SignalListenerListDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_signalName: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_listeners: {
            static const char *names[] = { "getter", "sizeGetter",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cComponent__SignalListenerListDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_signalName:
            if (!strcmp(propertyName, "hint")) return "Name of signal listened on";
            return nullptr;
        case FIELD_listeners:
            if (!strcmp(propertyName, "getter")) return "getListener";
            if (!strcmp(propertyName, "sizeGetter")) return "countListeners";
            return nullptr;
        default: return nullptr;
    }
}

int cComponent__SignalListenerListDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cComponent::SignalListenerList *pp = omnetpp::fromAnyPtr<cComponent::SignalListenerList>(object); (void)pp;
    switch (field) {
        case FIELD_listeners: return pp->countListeners();
        default: return 0;
    }
}

void cComponent__SignalListenerListDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cComponent::SignalListenerList *pp = omnetpp::fromAnyPtr<cComponent::SignalListenerList>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cComponent::SignalListenerList'", field);
    }
}

const char *cComponent__SignalListenerListDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cComponent::SignalListenerList *pp = omnetpp::fromAnyPtr<cComponent::SignalListenerList>(object); (void)pp;
    switch (field) {
        case FIELD_listeners: { const cIListener * value = pp->getListener(i); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cComponent__SignalListenerListDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cComponent::SignalListenerList *pp = omnetpp::fromAnyPtr<cComponent::SignalListenerList>(object); (void)pp;
    switch (field) {
        case FIELD_signalName: return oppstring2string(pp->getSignalName());
        case FIELD_listeners: return "";
        default: return "";
    }
}

void cComponent__SignalListenerListDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cComponent::SignalListenerList *pp = omnetpp::fromAnyPtr<cComponent::SignalListenerList>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cComponent::SignalListenerList'", field);
    }
}

omnetpp::cValue cComponent__SignalListenerListDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cComponent::SignalListenerList *pp = omnetpp::fromAnyPtr<cComponent::SignalListenerList>(object); (void)pp;
    switch (field) {
        case FIELD_signalName: return pp->getSignalName();
        case FIELD_listeners: return omnetpp::toAnyPtr(pp->getListener(i)); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cComponent::SignalListenerList' as cValue -- field index out of range?", field);
    }
}

void cComponent__SignalListenerListDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cComponent::SignalListenerList *pp = omnetpp::fromAnyPtr<cComponent::SignalListenerList>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cComponent::SignalListenerList'", field);
    }
}

const char *cComponent__SignalListenerListDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_listeners: return omnetpp::opp_typename(typeid(cIListener));
        default: return nullptr;
    };
}

omnetpp::any_ptr cComponent__SignalListenerListDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cComponent::SignalListenerList *pp = omnetpp::fromAnyPtr<cComponent::SignalListenerList>(object); (void)pp;
    switch (field) {
        case FIELD_listeners: return omnetpp::toAnyPtr(pp->getListener(i)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cComponent__SignalListenerListDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cComponent::SignalListenerList *pp = omnetpp::fromAnyPtr<cComponent::SignalListenerList>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cComponent::SignalListenerList'", field);
    }
}

class cComponentDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_displayName,
        FIELD_isModule,
        FIELD_componentType,
        FIELD_par,
        FIELD_properties_,
        FIELD_listenedSignals,
        FIELD_results,
    };
  public:
    cComponentDescriptor();
    virtual ~cComponentDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cComponentDescriptor)

cComponentDescriptor::cComponentDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cComponent)), "omnetpp::cSoftOwner")
{
    propertyNames = nullptr;
}

cComponentDescriptor::~cComponentDescriptor()
{
    delete[] propertyNames;
}

bool cComponentDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cComponent *>(obj)!=nullptr;
}

const char **cComponentDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cComponentDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cComponentDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 7+base->getFieldCount() : 7;
}

unsigned int cComponentDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_displayName
        0,    // FIELD_isModule
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_componentType
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISCOBJECT | FD_ISEDITABLE,    // FIELD_par
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_properties_
        FD_ISARRAY | FD_ISCOMPOUND,    // FIELD_listenedSignals
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_results
    };
    return (field >= 0 && field < 7) ? fieldTypeFlags[field] : 0;
}

const char *cComponentDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "displayName",
        "isModule",
        "componentType",
        "par",
        "properties_",
        "listenedSignals",
        "results",
    };
    return (field >= 0 && field < 7) ? fieldNames[field] : nullptr;
}

int cComponentDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "displayName") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "isModule") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "componentType") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "par") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "properties_") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "listenedSignals") == 0) return baseIndex + 5;
    if (strcmp(fieldName, "results") == 0) return baseIndex + 6;
    return base ? base->findField(fieldName) : -1;
}

const char *cComponentDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "string",    // FIELD_displayName
        "bool",    // FIELD_isModule
        "omnetpp::cComponentType",    // FIELD_componentType
        "omnetpp::cPar",    // FIELD_par
        "omnetpp::cProperty",    // FIELD_properties_
        "omnetpp::cComponent::SignalListenerList",    // FIELD_listenedSignals
        "omnetpp::cResultRecorder",    // FIELD_results
    };
    return (field >= 0 && field < 7) ? fieldTypeStrings[field] : nullptr;
}

const char **cComponentDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_displayName: {
            static const char *names[] = { "group", "editable", "hint",  nullptr };
            return names;
        }
        case FIELD_isModule: {
            static const char *names[] = { "readonly", "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_componentType: {
            static const char *names[] = { "readonly", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_par: {
            static const char *names[] = { "editable", "resizable", "getter", "setter", "sizeGetter", "toValue", "fromValue", "label", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_properties_: {
            static const char *names[] = { "readonly", "label", "getter", "sizeGetter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_listenedSignals: {
            static const char *names[] = { "readonly", "getter", "sizeGetter", "toString", "toValue", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_results: {
            static const char *names[] = { "readonly", "getter", "sizeGetter", "toString", "group", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cComponentDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_displayName:
            if (!strcmp(propertyName, "group")) return "base";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "hint")) return "Display name";
            return nullptr;
        case FIELD_isModule:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "getter")) return "isModule";
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "Whether this component is a module or a channel";
            return nullptr;
        case FIELD_componentType:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "The object that represents the type declaration for this component";
            return nullptr;
        case FIELD_par:
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "resizable")) return "false";
            if (!strcmp(propertyName, "getter")) return "par";
            if (!strcmp(propertyName, "setter")) return "pp->par(i).parse(value)";
            if (!strcmp(propertyName, "sizeGetter")) return "getNumParams";
            if (!strcmp(propertyName, "toValue")) return "toAnyPtr(&$)";
            if (!strcmp(propertyName, "fromValue")) return "TODO";
            if (!strcmp(propertyName, "label")) return "parameters";
            if (!strcmp(propertyName, "group")) return "parameters,gates";
            if (!strcmp(propertyName, "hint")) return "NED parameters";
            return nullptr;
        case FIELD_properties_:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "label")) return "properties";
            if (!strcmp(propertyName, "getter")) return "->getProperties()->get(i)";
            if (!strcmp(propertyName, "sizeGetter")) return "->getProperties()->getNumProperties()";
            if (!strcmp(propertyName, "group")) return "parameters,gates";
            if (!strcmp(propertyName, "hint")) return "NED properties";
            return nullptr;
        case FIELD_listenedSignals:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "getter")) return "getListenerList";
            if (!strcmp(propertyName, "sizeGetter")) return "getSignalTableSize";
            if (!strcmp(propertyName, "toString")) return ".str()";
            if (!strcmp(propertyName, "toValue")) return "toAnyPtr(&($))";
            if (!strcmp(propertyName, "group")) return "signals,statistics";
            if (!strcmp(propertyName, "hint")) return "Signal listener lists";
            return nullptr;
        case FIELD_results:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "getter")) return "->getResultRecorders()[i]";
            if (!strcmp(propertyName, "sizeGetter")) return "->getResultRecorders().size()";
            if (!strcmp(propertyName, "toString")) return "->str()";
            if (!strcmp(propertyName, "group")) return "signals,statistics";
            if (!strcmp(propertyName, "hint")) return "Statistical results collected in this component";
            return nullptr;
        default: return nullptr;
    }
}

int cComponentDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cComponent *pp = omnetpp::fromAnyPtr<cComponent>(object); (void)pp;
    switch (field) {
        case FIELD_par: return pp->getNumParams();
        case FIELD_properties_: return pp->getProperties()->getNumProperties();
        case FIELD_listenedSignals: return pp->getSignalTableSize();
        case FIELD_results: return pp->getResultRecorders().size();
        default: return 0;
    }
}

void cComponentDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cComponent *pp = omnetpp::fromAnyPtr<cComponent>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cComponent'", field);
    }
}

const char *cComponentDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cComponent *pp = omnetpp::fromAnyPtr<cComponent>(object); (void)pp;
    switch (field) {
        case FIELD_componentType: { const cComponentType * value = pp->getComponentType(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_properties_: { const cProperty * value = pp->getProperties()->get(i); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_results: { const cResultRecorder * value = pp->getResultRecorders()[i]; return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cComponentDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cComponent *pp = omnetpp::fromAnyPtr<cComponent>(object); (void)pp;
    switch (field) {
        case FIELD_displayName: return oppstring2string(pp->getDisplayName());
        case FIELD_isModule: return bool2string(pp->isModule());
        case FIELD_componentType: { auto obj = pp->getComponentType(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_par: return pp->par(i).str();
        case FIELD_properties_: { auto obj = pp->getProperties()->get(i); return obj == nullptr ? "" : obj->str(); }
        case FIELD_listenedSignals: return pp->getListenerList(i).str();
        case FIELD_results: { auto obj = pp->getResultRecorders()[i]; return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cComponentDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cComponent *pp = omnetpp::fromAnyPtr<cComponent>(object); (void)pp;
    switch (field) {
        case FIELD_displayName: pp->setDisplayName((value)); break;
        case FIELD_par: pp->par(i).parse(value); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cComponent'", field);
    }
}

omnetpp::cValue cComponentDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cComponent *pp = omnetpp::fromAnyPtr<cComponent>(object); (void)pp;
    switch (field) {
        case FIELD_displayName: return pp->getDisplayName();
        case FIELD_isModule: return pp->isModule();
        case FIELD_componentType: return omnetpp::toAnyPtr(pp->getComponentType()); break;
        case FIELD_par: return toAnyPtr(&pp->par(i));
        case FIELD_properties_: return omnetpp::toAnyPtr(pp->getProperties()->get(i)); break;
        case FIELD_listenedSignals: return toAnyPtr(&(pp->getListenerList(i)));
        case FIELD_results: return omnetpp::toAnyPtr(pp->getResultRecorders()[i]); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cComponent' as cValue -- field index out of range?", field);
    }
}

void cComponentDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cComponent *pp = omnetpp::fromAnyPtr<cComponent>(object); (void)pp;
    switch (field) {
        case FIELD_displayName: pp->setDisplayName(value.stringValue()); break;
        case FIELD_par: pp->par(i).parse(value); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cComponent'", field);
    }
}

const char *cComponentDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_componentType: return omnetpp::opp_typename(typeid(cComponentType));
        case FIELD_par: return omnetpp::opp_typename(typeid(cPar));
        case FIELD_properties_: return omnetpp::opp_typename(typeid(cProperty));
        case FIELD_listenedSignals: return omnetpp::opp_typename(typeid(cComponent::SignalListenerList));
        case FIELD_results: return omnetpp::opp_typename(typeid(cResultRecorder));
        default: return nullptr;
    };
}

omnetpp::any_ptr cComponentDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cComponent *pp = omnetpp::fromAnyPtr<cComponent>(object); (void)pp;
    switch (field) {
        case FIELD_componentType: return omnetpp::toAnyPtr(pp->getComponentType()); break;
        case FIELD_par: return omnetpp::toAnyPtr(&pp->par(i)); break;
        case FIELD_properties_: return omnetpp::toAnyPtr(pp->getProperties()->get(i)); break;
        case FIELD_listenedSignals: return omnetpp::toAnyPtr(&pp->getListenerList(i)); break;
        case FIELD_results: return omnetpp::toAnyPtr(pp->getResultRecorders()[i]); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cComponentDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cComponent *pp = omnetpp::fromAnyPtr<cComponent>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cComponent'", field);
    }
}

class cChannelDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_displayString,
    };
  public:
    cChannelDescriptor();
    virtual ~cChannelDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cChannelDescriptor)

cChannelDescriptor::cChannelDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cChannel)), "omnetpp::cComponent")
{
    propertyNames = nullptr;
}

cChannelDescriptor::~cChannelDescriptor()
{
    delete[] propertyNames;
}

bool cChannelDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cChannel *>(obj)!=nullptr;
}

const char **cChannelDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "icon",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cChannelDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "icon")) return "channel";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cChannelDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cChannelDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISCOMPOUND | FD_ISEDITABLE,    // FIELD_displayString
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cChannelDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "displayString",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cChannelDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "displayString") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cChannelDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cDisplayString",    // FIELD_displayString
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cChannelDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_displayString: {
            static const char *names[] = { "group", "hint", "editable", "setter", "fromString", "toString", "getter", "fromValue",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cChannelDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_displayString:
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "Controls appearance of this channel in the GUI";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "setter")) return "setDisplayString";
            if (!strcmp(propertyName, "fromString")) return "$";
            if (!strcmp(propertyName, "toString")) return ".str()";
            if (!strcmp(propertyName, "getter")) return "getDisplayString";
            if (!strcmp(propertyName, "fromValue")) return "$.stringValue()";
            return nullptr;
        default: return nullptr;
    }
}

int cChannelDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cChannel *pp = omnetpp::fromAnyPtr<cChannel>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cChannelDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cChannel *pp = omnetpp::fromAnyPtr<cChannel>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cChannel'", field);
    }
}

const char *cChannelDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cChannel *pp = omnetpp::fromAnyPtr<cChannel>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cChannelDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cChannel *pp = omnetpp::fromAnyPtr<cChannel>(object); (void)pp;
    switch (field) {
        case FIELD_displayString: return pp->getDisplayString().str();
        default: return "";
    }
}

void cChannelDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cChannel *pp = omnetpp::fromAnyPtr<cChannel>(object); (void)pp;
    switch (field) {
        case FIELD_displayString: pp->setDisplayString(value); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cChannel'", field);
    }
}

omnetpp::cValue cChannelDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cChannel *pp = omnetpp::fromAnyPtr<cChannel>(object); (void)pp;
    switch (field) {
        case FIELD_displayString: return pp->getDisplayString().str();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cChannel' as cValue -- field index out of range?", field);
    }
}

void cChannelDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cChannel *pp = omnetpp::fromAnyPtr<cChannel>(object); (void)pp;
    switch (field) {
        case FIELD_displayString: pp->setDisplayString(value.stringValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cChannel'", field);
    }
}

const char *cChannelDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_displayString: return omnetpp::opp_typename(typeid(cDisplayString));
        default: return nullptr;
    };
}

omnetpp::any_ptr cChannelDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cChannel *pp = omnetpp::fromAnyPtr<cChannel>(object); (void)pp;
    switch (field) {
        case FIELD_displayString: return omnetpp::toAnyPtr(&pp->getDisplayString()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cChannelDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cChannel *pp = omnetpp::fromAnyPtr<cChannel>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cChannel'", field);
    }
}

class cIdealChannelDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cIdealChannelDescriptor();
    virtual ~cIdealChannelDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cIdealChannelDescriptor)

cIdealChannelDescriptor::cIdealChannelDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cIdealChannel)), "omnetpp::cChannel")
{
    propertyNames = nullptr;
}

cIdealChannelDescriptor::~cIdealChannelDescriptor()
{
    delete[] propertyNames;
}

bool cIdealChannelDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cIdealChannel *>(obj)!=nullptr;
}

const char **cIdealChannelDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cIdealChannelDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cIdealChannelDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cIdealChannelDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cIdealChannelDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cIdealChannelDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cIdealChannelDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cIdealChannelDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cIdealChannelDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cIdealChannelDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cIdealChannel *pp = omnetpp::fromAnyPtr<cIdealChannel>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cIdealChannelDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cIdealChannel *pp = omnetpp::fromAnyPtr<cIdealChannel>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cIdealChannel'", field);
    }
}

const char *cIdealChannelDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cIdealChannel *pp = omnetpp::fromAnyPtr<cIdealChannel>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cIdealChannelDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cIdealChannel *pp = omnetpp::fromAnyPtr<cIdealChannel>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cIdealChannelDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cIdealChannel *pp = omnetpp::fromAnyPtr<cIdealChannel>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cIdealChannel'", field);
    }
}

omnetpp::cValue cIdealChannelDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cIdealChannel *pp = omnetpp::fromAnyPtr<cIdealChannel>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cIdealChannel' as cValue -- field index out of range?", field);
    }
}

void cIdealChannelDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cIdealChannel *pp = omnetpp::fromAnyPtr<cIdealChannel>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cIdealChannel'", field);
    }
}

const char *cIdealChannelDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cIdealChannelDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cIdealChannel *pp = omnetpp::fromAnyPtr<cIdealChannel>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cIdealChannelDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cIdealChannel *pp = omnetpp::fromAnyPtr<cIdealChannel>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cIdealChannel'", field);
    }
}

class cDelayChannelDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cDelayChannelDescriptor();
    virtual ~cDelayChannelDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cDelayChannelDescriptor)

cDelayChannelDescriptor::cDelayChannelDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cDelayChannel)), "omnetpp::cChannel")
{
    propertyNames = nullptr;
}

cDelayChannelDescriptor::~cDelayChannelDescriptor()
{
    delete[] propertyNames;
}

bool cDelayChannelDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cDelayChannel *>(obj)!=nullptr;
}

const char **cDelayChannelDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cDelayChannelDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cDelayChannelDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cDelayChannelDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cDelayChannelDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cDelayChannelDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cDelayChannelDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cDelayChannelDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cDelayChannelDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cDelayChannelDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cDelayChannel *pp = omnetpp::fromAnyPtr<cDelayChannel>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cDelayChannelDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cDelayChannel *pp = omnetpp::fromAnyPtr<cDelayChannel>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cDelayChannel'", field);
    }
}

const char *cDelayChannelDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cDelayChannel *pp = omnetpp::fromAnyPtr<cDelayChannel>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cDelayChannelDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cDelayChannel *pp = omnetpp::fromAnyPtr<cDelayChannel>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cDelayChannelDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cDelayChannel *pp = omnetpp::fromAnyPtr<cDelayChannel>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cDelayChannel'", field);
    }
}

omnetpp::cValue cDelayChannelDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cDelayChannel *pp = omnetpp::fromAnyPtr<cDelayChannel>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cDelayChannel' as cValue -- field index out of range?", field);
    }
}

void cDelayChannelDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cDelayChannel *pp = omnetpp::fromAnyPtr<cDelayChannel>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cDelayChannel'", field);
    }
}

const char *cDelayChannelDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cDelayChannelDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cDelayChannel *pp = omnetpp::fromAnyPtr<cDelayChannel>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cDelayChannelDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cDelayChannel *pp = omnetpp::fromAnyPtr<cDelayChannel>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cDelayChannel'", field);
    }
}

class cDatarateChannelDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_isBusy,
        FIELD_transmissionFinishTime,
    };
  public:
    cDatarateChannelDescriptor();
    virtual ~cDatarateChannelDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cDatarateChannelDescriptor)

cDatarateChannelDescriptor::cDatarateChannelDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cDatarateChannel)), "omnetpp::cChannel")
{
    propertyNames = nullptr;
}

cDatarateChannelDescriptor::~cDatarateChannelDescriptor()
{
    delete[] propertyNames;
}

bool cDatarateChannelDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cDatarateChannel *>(obj)!=nullptr;
}

const char **cDatarateChannelDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cDatarateChannelDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cDatarateChannelDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cDatarateChannelDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_isBusy
        0,    // FIELD_transmissionFinishTime
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cDatarateChannelDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "isBusy",
        "transmissionFinishTime",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cDatarateChannelDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "isBusy") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "transmissionFinishTime") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cDatarateChannelDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "bool",    // FIELD_isBusy
        "omnetpp::simtime_t",    // FIELD_transmissionFinishTime
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cDatarateChannelDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_isBusy: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_transmissionFinishTime: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cDatarateChannelDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_isBusy:
            if (!strcmp(propertyName, "getter")) return "isBusy";
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "If channel is currently transmitting";
            return nullptr;
        case FIELD_transmissionFinishTime:
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "If busy: when currently active transmissions will finish";
            return nullptr;
        default: return nullptr;
    }
}

int cDatarateChannelDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cDatarateChannel *pp = omnetpp::fromAnyPtr<cDatarateChannel>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cDatarateChannelDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cDatarateChannel *pp = omnetpp::fromAnyPtr<cDatarateChannel>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cDatarateChannel'", field);
    }
}

const char *cDatarateChannelDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cDatarateChannel *pp = omnetpp::fromAnyPtr<cDatarateChannel>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cDatarateChannelDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cDatarateChannel *pp = omnetpp::fromAnyPtr<cDatarateChannel>(object); (void)pp;
    switch (field) {
        case FIELD_isBusy: return bool2string(pp->isBusy());
        case FIELD_transmissionFinishTime: return simtime2string(pp->getTransmissionFinishTime());
        default: return "";
    }
}

void cDatarateChannelDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cDatarateChannel *pp = omnetpp::fromAnyPtr<cDatarateChannel>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cDatarateChannel'", field);
    }
}

omnetpp::cValue cDatarateChannelDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cDatarateChannel *pp = omnetpp::fromAnyPtr<cDatarateChannel>(object); (void)pp;
    switch (field) {
        case FIELD_isBusy: return pp->isBusy();
        case FIELD_transmissionFinishTime: return pp->getTransmissionFinishTime().dbl();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cDatarateChannel' as cValue -- field index out of range?", field);
    }
}

void cDatarateChannelDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cDatarateChannel *pp = omnetpp::fromAnyPtr<cDatarateChannel>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cDatarateChannel'", field);
    }
}

const char *cDatarateChannelDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cDatarateChannelDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cDatarateChannel *pp = omnetpp::fromAnyPtr<cDatarateChannel>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cDatarateChannelDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cDatarateChannel *pp = omnetpp::fromAnyPtr<cDatarateChannel>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cDatarateChannel'", field);
    }
}

class cModuleDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_id,
        FIELD_isSimple,
        FIELD_isVector,
        FIELD_index,
        FIELD_vectorSize,
        FIELD_builtinAnimationsAllowed,
        FIELD_displayString,
        FIELD_gate,
        FIELD_canvas,
        FIELD_osgCanvas,
    };
  public:
    cModuleDescriptor();
    virtual ~cModuleDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cModuleDescriptor)

cModuleDescriptor::cModuleDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cModule)), "omnetpp::cComponent")
{
    propertyNames = nullptr;
}

cModuleDescriptor::~cModuleDescriptor()
{
    delete[] propertyNames;
}

bool cModuleDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cModule *>(obj)!=nullptr;
}

const char **cModuleDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "icon",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cModuleDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "icon")) return "compound";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cModuleDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 10+base->getFieldCount() : 10;
}

unsigned int cModuleDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_id
        0,    // FIELD_isSimple
        0,    // FIELD_isVector
        0,    // FIELD_index
        0,    // FIELD_vectorSize
        FD_ISEDITABLE,    // FIELD_builtinAnimationsAllowed
        FD_ISCOMPOUND | FD_ISEDITABLE,    // FIELD_displayString
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_gate
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_canvas
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_osgCanvas
    };
    return (field >= 0 && field < 10) ? fieldTypeFlags[field] : 0;
}

const char *cModuleDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "id",
        "isSimple",
        "isVector",
        "index",
        "vectorSize",
        "builtinAnimationsAllowed",
        "displayString",
        "gate",
        "canvas",
        "osgCanvas",
    };
    return (field >= 0 && field < 10) ? fieldNames[field] : nullptr;
}

int cModuleDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "id") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "isSimple") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "isVector") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "index") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "vectorSize") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "builtinAnimationsAllowed") == 0) return baseIndex + 5;
    if (strcmp(fieldName, "displayString") == 0) return baseIndex + 6;
    if (strcmp(fieldName, "gate") == 0) return baseIndex + 7;
    if (strcmp(fieldName, "canvas") == 0) return baseIndex + 8;
    if (strcmp(fieldName, "osgCanvas") == 0) return baseIndex + 9;
    return base ? base->findField(fieldName) : -1;
}

const char *cModuleDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "int",    // FIELD_id
        "bool",    // FIELD_isSimple
        "bool",    // FIELD_isVector
        "int",    // FIELD_index
        "int",    // FIELD_vectorSize
        "bool",    // FIELD_builtinAnimationsAllowed
        "omnetpp::cDisplayString",    // FIELD_displayString
        "omnetpp::cGate",    // FIELD_gate
        "omnetpp::cCanvas",    // FIELD_canvas
        "omnetpp::cOsgCanvas",    // FIELD_osgCanvas
    };
    return (field >= 0 && field < 10) ? fieldTypeStrings[field] : nullptr;
}

const char **cModuleDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_id: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isSimple: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isVector: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_index: {
            static const char *names[] = { "group", "toString", "hint",  nullptr };
            return names;
        }
        case FIELD_vectorSize: {
            static const char *names[] = { "group", "toString", "hint",  nullptr };
            return names;
        }
        case FIELD_builtinAnimationsAllowed: {
            static const char *names[] = { "editable", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_displayString: {
            static const char *names[] = { "group", "hint", "editable", "setter", "fromString", "toString", "getter", "fromValue",  nullptr };
            return names;
        }
        case FIELD_gate: {
            static const char *names[] = { "sizeGetter", "getter", "group", "label", "hint",  nullptr };
            return names;
        }
        case FIELD_canvas: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_osgCanvas: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cModuleDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_id:
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "Unique module ID -- IDs of deleted modules are not issued again";
            return nullptr;
        case FIELD_isSimple:
            if (!strcmp(propertyName, "getter")) return "isSimple";
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "Whether this is a simple module";
            return nullptr;
        case FIELD_isVector:
            if (!strcmp(propertyName, "getter")) return "isVector";
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "Whether this module is part of a module vector";
            return nullptr;
        case FIELD_index:
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "toString")) return "pp->isVector() ? long2string($) : \"<not a vector>\"";
            if (!strcmp(propertyName, "hint")) return "If vector: index of this module in its module vector";
            return nullptr;
        case FIELD_vectorSize:
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "toString")) return "pp->isVector() ? long2string($) : \"<not a vector>\"";
            if (!strcmp(propertyName, "hint")) return "If vector: size of module vector this module belongs to";
            return nullptr;
        case FIELD_builtinAnimationsAllowed:
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "Whether built-in animations are enabled on this module's graphical inspector";
            return nullptr;
        case FIELD_displayString:
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "Controls appearance of this module in the GUI";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "setter")) return "setDisplayString";
            if (!strcmp(propertyName, "fromString")) return "$";
            if (!strcmp(propertyName, "toString")) return ".str()";
            if (!strcmp(propertyName, "getter")) return "getDisplayString";
            if (!strcmp(propertyName, "fromValue")) return "$.stringValue()";
            return nullptr;
        case FIELD_gate:
            if (!strcmp(propertyName, "sizeGetter")) return "gateCount";
            if (!strcmp(propertyName, "getter")) return "gateByOrdinal";
            if (!strcmp(propertyName, "group")) return "parameters,gates";
            if (!strcmp(propertyName, "label")) return "gates";
            if (!strcmp(propertyName, "hint")) return "Module gates";
            return nullptr;
        case FIELD_canvas:
            if (!strcmp(propertyName, "getter")) return "getCanvasIfExists";
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "Built-in canvas instance";
            return nullptr;
        case FIELD_osgCanvas:
            if (!strcmp(propertyName, "getter")) return "getOsgCanvasIfExists";
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "Built-in 3D (OpenSceneGraph) canvas instance";
            return nullptr;
        default: return nullptr;
    }
}

int cModuleDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cModule *pp = omnetpp::fromAnyPtr<cModule>(object); (void)pp;
    switch (field) {
        case FIELD_gate: return pp->gateCount();
        default: return 0;
    }
}

void cModuleDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cModule *pp = omnetpp::fromAnyPtr<cModule>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cModule'", field);
    }
}

const char *cModuleDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cModule *pp = omnetpp::fromAnyPtr<cModule>(object); (void)pp;
    switch (field) {
        case FIELD_gate: { const cGate * value = pp->gateByOrdinal(i); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_canvas: { const cCanvas * value = pp->getCanvasIfExists(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_osgCanvas: { const cOsgCanvas * value = pp->getOsgCanvasIfExists(); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cModuleDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cModule *pp = omnetpp::fromAnyPtr<cModule>(object); (void)pp;
    switch (field) {
        case FIELD_id: return long2string(pp->getId());
        case FIELD_isSimple: return bool2string(pp->isSimple());
        case FIELD_isVector: return bool2string(pp->isVector());
        case FIELD_index: return pp->isVector() ? long2string(pp->getIndex()) : "<not a vector>";
        case FIELD_vectorSize: return pp->isVector() ? long2string(pp->getVectorSize()) : "<not a vector>";
        case FIELD_builtinAnimationsAllowed: return bool2string(pp->getBuiltinAnimationsAllowed());
        case FIELD_displayString: return pp->getDisplayString().str();
        case FIELD_gate: { auto obj = pp->gateByOrdinal(i); return obj == nullptr ? "" : obj->str(); }
        case FIELD_canvas: { auto obj = pp->getCanvasIfExists(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_osgCanvas: { auto obj = pp->getOsgCanvasIfExists(); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cModuleDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cModule *pp = omnetpp::fromAnyPtr<cModule>(object); (void)pp;
    switch (field) {
        case FIELD_builtinAnimationsAllowed: pp->setBuiltinAnimationsAllowed(string2bool(value)); break;
        case FIELD_displayString: pp->setDisplayString(value); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cModule'", field);
    }
}

omnetpp::cValue cModuleDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cModule *pp = omnetpp::fromAnyPtr<cModule>(object); (void)pp;
    switch (field) {
        case FIELD_id: return pp->getId();
        case FIELD_isSimple: return pp->isSimple();
        case FIELD_isVector: return pp->isVector();
        case FIELD_index: return pp->getIndex();
        case FIELD_vectorSize: return pp->getVectorSize();
        case FIELD_builtinAnimationsAllowed: return pp->getBuiltinAnimationsAllowed();
        case FIELD_displayString: return pp->getDisplayString().str();
        case FIELD_gate: return omnetpp::toAnyPtr(pp->gateByOrdinal(i)); break;
        case FIELD_canvas: return omnetpp::toAnyPtr(pp->getCanvasIfExists()); break;
        case FIELD_osgCanvas: return omnetpp::toAnyPtr(pp->getOsgCanvasIfExists()); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cModule' as cValue -- field index out of range?", field);
    }
}

void cModuleDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cModule *pp = omnetpp::fromAnyPtr<cModule>(object); (void)pp;
    switch (field) {
        case FIELD_builtinAnimationsAllowed: pp->setBuiltinAnimationsAllowed(value.boolValue()); break;
        case FIELD_displayString: pp->setDisplayString(value.stringValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cModule'", field);
    }
}

const char *cModuleDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_displayString: return omnetpp::opp_typename(typeid(cDisplayString));
        case FIELD_gate: return omnetpp::opp_typename(typeid(cGate));
        case FIELD_canvas: return omnetpp::opp_typename(typeid(cCanvas));
        case FIELD_osgCanvas: return omnetpp::opp_typename(typeid(cOsgCanvas));
        default: return nullptr;
    };
}

omnetpp::any_ptr cModuleDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cModule *pp = omnetpp::fromAnyPtr<cModule>(object); (void)pp;
    switch (field) {
        case FIELD_displayString: return omnetpp::toAnyPtr(&pp->getDisplayString()); break;
        case FIELD_gate: return omnetpp::toAnyPtr(pp->gateByOrdinal(i)); break;
        case FIELD_canvas: return omnetpp::toAnyPtr(pp->getCanvasIfExists()); break;
        case FIELD_osgCanvas: return omnetpp::toAnyPtr(pp->getOsgCanvasIfExists()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cModuleDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cModule *pp = omnetpp::fromAnyPtr<cModule>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cModule'", field);
    }
}

class cSimpleModuleDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_isTerminated,
        FIELD_usesActivity,
        FIELD_stackSize,
        FIELD_stackUsage,
    };
  public:
    cSimpleModuleDescriptor();
    virtual ~cSimpleModuleDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cSimpleModuleDescriptor)

cSimpleModuleDescriptor::cSimpleModuleDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cSimpleModule)), "omnetpp::cModule")
{
    propertyNames = nullptr;
}

cSimpleModuleDescriptor::~cSimpleModuleDescriptor()
{
    delete[] propertyNames;
}

bool cSimpleModuleDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cSimpleModule *>(obj)!=nullptr;
}

const char **cSimpleModuleDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "icon",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cSimpleModuleDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "icon")) return "simple";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cSimpleModuleDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 4+base->getFieldCount() : 4;
}

unsigned int cSimpleModuleDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_isTerminated
        0,    // FIELD_usesActivity
        0,    // FIELD_stackSize
        0,    // FIELD_stackUsage
    };
    return (field >= 0 && field < 4) ? fieldTypeFlags[field] : 0;
}

const char *cSimpleModuleDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "isTerminated",
        "usesActivity",
        "stackSize",
        "stackUsage",
    };
    return (field >= 0 && field < 4) ? fieldNames[field] : nullptr;
}

int cSimpleModuleDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "isTerminated") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "usesActivity") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "stackSize") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "stackUsage") == 0) return baseIndex + 3;
    return base ? base->findField(fieldName) : -1;
}

const char *cSimpleModuleDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "bool",    // FIELD_isTerminated
        "bool",    // FIELD_usesActivity
        "unsigned int",    // FIELD_stackSize
        "unsigned int",    // FIELD_stackUsage
    };
    return (field >= 0 && field < 4) ? fieldTypeStrings[field] : nullptr;
}

const char **cSimpleModuleDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_isTerminated: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_usesActivity: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_stackSize: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_stackUsage: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cSimpleModuleDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_isTerminated:
            if (!strcmp(propertyName, "getter")) return "isTerminated";
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "Whether this module has terminated";
            return nullptr;
        case FIELD_usesActivity:
            if (!strcmp(propertyName, "getter")) return "usesActivity";
            if (!strcmp(propertyName, "group")) return "activity";
            if (!strcmp(propertyName, "hint")) return "Whether this simple module was programmed using the \"activity\" or the \"handleMessage\" C++ method";
            return nullptr;
        case FIELD_stackSize:
            if (!strcmp(propertyName, "group")) return "activity";
            if (!strcmp(propertyName, "hint")) return "If module uses \"activity\": stack size allocated for this module -- zero means info not available";
            return nullptr;
        case FIELD_stackUsage:
            if (!strcmp(propertyName, "group")) return "activity";
            if (!strcmp(propertyName, "hint")) return "If module uses \"activity\": stack actually used by this module -- zero means info not available";
            return nullptr;
        default: return nullptr;
    }
}

int cSimpleModuleDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cSimpleModule *pp = omnetpp::fromAnyPtr<cSimpleModule>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cSimpleModuleDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cSimpleModule *pp = omnetpp::fromAnyPtr<cSimpleModule>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cSimpleModule'", field);
    }
}

const char *cSimpleModuleDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cSimpleModule *pp = omnetpp::fromAnyPtr<cSimpleModule>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cSimpleModuleDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cSimpleModule *pp = omnetpp::fromAnyPtr<cSimpleModule>(object); (void)pp;
    switch (field) {
        case FIELD_isTerminated: return bool2string(pp->isTerminated());
        case FIELD_usesActivity: return bool2string(pp->usesActivity());
        case FIELD_stackSize: return ulong2string(pp->getStackSize());
        case FIELD_stackUsage: return ulong2string(pp->getStackUsage());
        default: return "";
    }
}

void cSimpleModuleDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cSimpleModule *pp = omnetpp::fromAnyPtr<cSimpleModule>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cSimpleModule'", field);
    }
}

omnetpp::cValue cSimpleModuleDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cSimpleModule *pp = omnetpp::fromAnyPtr<cSimpleModule>(object); (void)pp;
    switch (field) {
        case FIELD_isTerminated: return pp->isTerminated();
        case FIELD_usesActivity: return pp->usesActivity();
        case FIELD_stackSize: return (omnetpp::intval_t)(pp->getStackSize());
        case FIELD_stackUsage: return (omnetpp::intval_t)(pp->getStackUsage());
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cSimpleModule' as cValue -- field index out of range?", field);
    }
}

void cSimpleModuleDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cSimpleModule *pp = omnetpp::fromAnyPtr<cSimpleModule>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cSimpleModule'", field);
    }
}

const char *cSimpleModuleDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cSimpleModuleDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cSimpleModule *pp = omnetpp::fromAnyPtr<cSimpleModule>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cSimpleModuleDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cSimpleModule *pp = omnetpp::fromAnyPtr<cSimpleModule>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cSimpleModule'", field);
    }
}

class cComponentTypeDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_nedSource,
    };
  public:
    cComponentTypeDescriptor();
    virtual ~cComponentTypeDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cComponentTypeDescriptor)

cComponentTypeDescriptor::cComponentTypeDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cComponentType)), "omnetpp::cNoncopyableOwnedObject")
{
    propertyNames = nullptr;
}

cComponentTypeDescriptor::~cComponentTypeDescriptor()
{
    delete[] propertyNames;
}

bool cComponentTypeDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cComponentType *>(obj)!=nullptr;
}

const char **cComponentTypeDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cComponentTypeDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cComponentTypeDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cComponentTypeDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_nedSource
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cComponentTypeDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "nedSource",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cComponentTypeDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "nedSource") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cComponentTypeDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "string",    // FIELD_nedSource
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cComponentTypeDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_nedSource: {
            static const char *names[] = { "getter", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cComponentTypeDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_nedSource:
            if (!strcmp(propertyName, "getter")) return "getNedSource";
            if (!strcmp(propertyName, "hint")) return "NED source of component if available";
            return nullptr;
        default: return nullptr;
    }
}

int cComponentTypeDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cComponentType *pp = omnetpp::fromAnyPtr<cComponentType>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cComponentTypeDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cComponentType *pp = omnetpp::fromAnyPtr<cComponentType>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cComponentType'", field);
    }
}

const char *cComponentTypeDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cComponentType *pp = omnetpp::fromAnyPtr<cComponentType>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cComponentTypeDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cComponentType *pp = omnetpp::fromAnyPtr<cComponentType>(object); (void)pp;
    switch (field) {
        case FIELD_nedSource: return oppstring2string(pp->getNedSource());
        default: return "";
    }
}

void cComponentTypeDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cComponentType *pp = omnetpp::fromAnyPtr<cComponentType>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cComponentType'", field);
    }
}

omnetpp::cValue cComponentTypeDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cComponentType *pp = omnetpp::fromAnyPtr<cComponentType>(object); (void)pp;
    switch (field) {
        case FIELD_nedSource: return pp->getNedSource();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cComponentType' as cValue -- field index out of range?", field);
    }
}

void cComponentTypeDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cComponentType *pp = omnetpp::fromAnyPtr<cComponentType>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cComponentType'", field);
    }
}

const char *cComponentTypeDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cComponentTypeDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cComponentType *pp = omnetpp::fromAnyPtr<cComponentType>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cComponentTypeDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cComponentType *pp = omnetpp::fromAnyPtr<cComponentType>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cComponentType'", field);
    }
}

class cModuleTypeDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_isNetwork,
    };
  public:
    cModuleTypeDescriptor();
    virtual ~cModuleTypeDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cModuleTypeDescriptor)

cModuleTypeDescriptor::cModuleTypeDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cModuleType)), "omnetpp::cComponentType")
{
    propertyNames = nullptr;
}

cModuleTypeDescriptor::~cModuleTypeDescriptor()
{
    delete[] propertyNames;
}

bool cModuleTypeDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cModuleType *>(obj)!=nullptr;
}

const char **cModuleTypeDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cModuleTypeDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cModuleTypeDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cModuleTypeDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_isNetwork
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cModuleTypeDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "isNetwork",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cModuleTypeDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "isNetwork") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cModuleTypeDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "bool",    // FIELD_isNetwork
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cModuleTypeDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_isNetwork: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cModuleTypeDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_isNetwork:
            if (!strcmp(propertyName, "getter")) return "isNetwork";
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "Whether this module type can be used as toplevel module";
            return nullptr;
        default: return nullptr;
    }
}

int cModuleTypeDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cModuleType *pp = omnetpp::fromAnyPtr<cModuleType>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cModuleTypeDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cModuleType *pp = omnetpp::fromAnyPtr<cModuleType>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cModuleType'", field);
    }
}

const char *cModuleTypeDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cModuleType *pp = omnetpp::fromAnyPtr<cModuleType>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cModuleTypeDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cModuleType *pp = omnetpp::fromAnyPtr<cModuleType>(object); (void)pp;
    switch (field) {
        case FIELD_isNetwork: return bool2string(pp->isNetwork());
        default: return "";
    }
}

void cModuleTypeDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cModuleType *pp = omnetpp::fromAnyPtr<cModuleType>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cModuleType'", field);
    }
}

omnetpp::cValue cModuleTypeDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cModuleType *pp = omnetpp::fromAnyPtr<cModuleType>(object); (void)pp;
    switch (field) {
        case FIELD_isNetwork: return pp->isNetwork();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cModuleType' as cValue -- field index out of range?", field);
    }
}

void cModuleTypeDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cModuleType *pp = omnetpp::fromAnyPtr<cModuleType>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cModuleType'", field);
    }
}

const char *cModuleTypeDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cModuleTypeDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cModuleType *pp = omnetpp::fromAnyPtr<cModuleType>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cModuleTypeDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cModuleType *pp = omnetpp::fromAnyPtr<cModuleType>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cModuleType'", field);
    }
}

class cChannelTypeDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cChannelTypeDescriptor();
    virtual ~cChannelTypeDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cChannelTypeDescriptor)

cChannelTypeDescriptor::cChannelTypeDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cChannelType)), "omnetpp::cComponentType")
{
    propertyNames = nullptr;
}

cChannelTypeDescriptor::~cChannelTypeDescriptor()
{
    delete[] propertyNames;
}

bool cChannelTypeDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cChannelType *>(obj)!=nullptr;
}

const char **cChannelTypeDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cChannelTypeDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cChannelTypeDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cChannelTypeDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cChannelTypeDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cChannelTypeDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cChannelTypeDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cChannelTypeDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cChannelTypeDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cChannelTypeDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cChannelType *pp = omnetpp::fromAnyPtr<cChannelType>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cChannelTypeDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cChannelType *pp = omnetpp::fromAnyPtr<cChannelType>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cChannelType'", field);
    }
}

const char *cChannelTypeDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cChannelType *pp = omnetpp::fromAnyPtr<cChannelType>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cChannelTypeDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cChannelType *pp = omnetpp::fromAnyPtr<cChannelType>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cChannelTypeDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cChannelType *pp = omnetpp::fromAnyPtr<cChannelType>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cChannelType'", field);
    }
}

omnetpp::cValue cChannelTypeDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cChannelType *pp = omnetpp::fromAnyPtr<cChannelType>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cChannelType' as cValue -- field index out of range?", field);
    }
}

void cChannelTypeDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cChannelType *pp = omnetpp::fromAnyPtr<cChannelType>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cChannelType'", field);
    }
}

const char *cChannelTypeDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cChannelTypeDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cChannelType *pp = omnetpp::fromAnyPtr<cChannelType>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cChannelTypeDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cChannelType *pp = omnetpp::fromAnyPtr<cChannelType>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cChannelType'", field);
    }
}

class cRegistrationListDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_contents,
    };
  public:
    cRegistrationListDescriptor();
    virtual ~cRegistrationListDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cRegistrationListDescriptor)

cRegistrationListDescriptor::cRegistrationListDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cRegistrationList)), "omnetpp::cNamedObject")
{
    propertyNames = nullptr;
}

cRegistrationListDescriptor::~cRegistrationListDescriptor()
{
    delete[] propertyNames;
}

bool cRegistrationListDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cRegistrationList *>(obj)!=nullptr;
}

const char **cRegistrationListDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cRegistrationListDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cRegistrationListDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cRegistrationListDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_contents
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cRegistrationListDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "contents",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cRegistrationListDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "contents") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cRegistrationListDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cObject",    // FIELD_contents
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cRegistrationListDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_contents: {
            static const char *names[] = { "getter", "sizeGetter", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cRegistrationListDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_contents:
            if (!strcmp(propertyName, "getter")) return "get";
            if (!strcmp(propertyName, "sizeGetter")) return "size";
            if (!strcmp(propertyName, "hint")) return "Contained objects";
            return nullptr;
        default: return nullptr;
    }
}

int cRegistrationListDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cRegistrationList *pp = omnetpp::fromAnyPtr<cRegistrationList>(object); (void)pp;
    switch (field) {
        case FIELD_contents: return pp->size();
        default: return 0;
    }
}

void cRegistrationListDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cRegistrationList *pp = omnetpp::fromAnyPtr<cRegistrationList>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cRegistrationList'", field);
    }
}

const char *cRegistrationListDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cRegistrationList *pp = omnetpp::fromAnyPtr<cRegistrationList>(object); (void)pp;
    switch (field) {
        case FIELD_contents: { const cObject * value = pp->get(i); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cRegistrationListDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cRegistrationList *pp = omnetpp::fromAnyPtr<cRegistrationList>(object); (void)pp;
    switch (field) {
        case FIELD_contents: { auto obj = pp->get(i); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cRegistrationListDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cRegistrationList *pp = omnetpp::fromAnyPtr<cRegistrationList>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRegistrationList'", field);
    }
}

omnetpp::cValue cRegistrationListDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cRegistrationList *pp = omnetpp::fromAnyPtr<cRegistrationList>(object); (void)pp;
    switch (field) {
        case FIELD_contents: return omnetpp::toAnyPtr(pp->get(i)); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cRegistrationList' as cValue -- field index out of range?", field);
    }
}

void cRegistrationListDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cRegistrationList *pp = omnetpp::fromAnyPtr<cRegistrationList>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRegistrationList'", field);
    }
}

const char *cRegistrationListDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_contents: return omnetpp::opp_typename(typeid(cObject));
        default: return nullptr;
    };
}

omnetpp::any_ptr cRegistrationListDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cRegistrationList *pp = omnetpp::fromAnyPtr<cRegistrationList>(object); (void)pp;
    switch (field) {
        case FIELD_contents: return omnetpp::toAnyPtr(pp->get(i)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cRegistrationListDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cRegistrationList *pp = omnetpp::fromAnyPtr<cRegistrationList>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRegistrationList'", field);
    }
}

class cGateDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_type,
        FIELD_id,
        FIELD_isVector,
        FIELD_index,
        FIELD_deliverImmediately,
        FIELD_channel,
        FIELD_previousGate,
        FIELD_nextGate,
        FIELD_pathStartGate,
        FIELD_pathEndGate,
        FIELD_isConnectedOutside,
        FIELD_isConnectedInside,
        FIELD_isConnected,
        FIELD_isPathOK,
    };
  public:
    cGateDescriptor();
    virtual ~cGateDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cGateDescriptor)

cGateDescriptor::cGateDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cGate)), "omnetpp::cObject")
{
    propertyNames = nullptr;
}

cGateDescriptor::~cGateDescriptor()
{
    delete[] propertyNames;
}

bool cGateDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cGate *>(obj)!=nullptr;
}

const char **cGateDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "icon",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cGateDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "icon")) return "gate";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cGateDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 14+base->getFieldCount() : 14;
}

unsigned int cGateDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_type
        0,    // FIELD_id
        0,    // FIELD_isVector
        0,    // FIELD_index
        0,    // FIELD_deliverImmediately
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_channel
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_previousGate
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_nextGate
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_pathStartGate
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_pathEndGate
        0,    // FIELD_isConnectedOutside
        0,    // FIELD_isConnectedInside
        0,    // FIELD_isConnected
        0,    // FIELD_isPathOK
    };
    return (field >= 0 && field < 14) ? fieldTypeFlags[field] : 0;
}

const char *cGateDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "type",
        "id",
        "isVector",
        "index",
        "deliverImmediately",
        "channel",
        "previousGate",
        "nextGate",
        "pathStartGate",
        "pathEndGate",
        "isConnectedOutside",
        "isConnectedInside",
        "isConnected",
        "isPathOK",
    };
    return (field >= 0 && field < 14) ? fieldNames[field] : nullptr;
}

int cGateDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "type") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "id") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "isVector") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "index") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "deliverImmediately") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "channel") == 0) return baseIndex + 5;
    if (strcmp(fieldName, "previousGate") == 0) return baseIndex + 6;
    if (strcmp(fieldName, "nextGate") == 0) return baseIndex + 7;
    if (strcmp(fieldName, "pathStartGate") == 0) return baseIndex + 8;
    if (strcmp(fieldName, "pathEndGate") == 0) return baseIndex + 9;
    if (strcmp(fieldName, "isConnectedOutside") == 0) return baseIndex + 10;
    if (strcmp(fieldName, "isConnectedInside") == 0) return baseIndex + 11;
    if (strcmp(fieldName, "isConnected") == 0) return baseIndex + 12;
    if (strcmp(fieldName, "isPathOK") == 0) return baseIndex + 13;
    return base ? base->findField(fieldName) : -1;
}

const char *cGateDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "char",    // FIELD_type
        "int",    // FIELD_id
        "bool",    // FIELD_isVector
        "int",    // FIELD_index
        "bool",    // FIELD_deliverImmediately
        "omnetpp::cChannel",    // FIELD_channel
        "omnetpp::cGate",    // FIELD_previousGate
        "omnetpp::cGate",    // FIELD_nextGate
        "omnetpp::cGate",    // FIELD_pathStartGate
        "omnetpp::cGate",    // FIELD_pathEndGate
        "bool",    // FIELD_isConnectedOutside
        "bool",    // FIELD_isConnectedInside
        "bool",    // FIELD_isConnected
        "bool",    // FIELD_isPathOK
    };
    return (field >= 0 && field < 14) ? fieldTypeStrings[field] : nullptr;
}

const char **cGateDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_type: {
            static const char *names[] = { "group", "enum", "hint", "enum",  nullptr };
            return names;
        }
        case FIELD_id: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isVector: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_index: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_deliverImmediately: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_channel: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_previousGate: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_nextGate: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_pathStartGate: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_pathEndGate: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isConnectedOutside: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isConnectedInside: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isConnected: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isPathOK: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cGateDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_type:
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "enum")) return "cGate::Type";
            if (!strcmp(propertyName, "hint")) return "Gate type";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cGate::Type";
            return nullptr;
        case FIELD_id:
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "Gate id, unique within this module";
            return nullptr;
        case FIELD_isVector:
            if (!strcmp(propertyName, "getter")) return "isVector";
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "Whether this gate is part of a gate vector";
            return nullptr;
        case FIELD_index:
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "If vector: index of this gate within its gate vector";
            return nullptr;
        case FIELD_deliverImmediately:
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "Only for simple module input gates, and if transmission duration is nonzero: whether packets arriving on this gate will be given to the module immediately, or at the end of the reception";
            return nullptr;
        case FIELD_channel:
            if (!strcmp(propertyName, "group")) return "connection";
            if (!strcmp(propertyName, "hint")) return "Channel object associated with the connection";
            return nullptr;
        case FIELD_previousGate:
            if (!strcmp(propertyName, "group")) return "connection";
            if (!strcmp(propertyName, "hint")) return "The gate this one is connected to -- for output gates this points out of this module, and for input gates it points inside";
            return nullptr;
        case FIELD_nextGate:
            if (!strcmp(propertyName, "group")) return "connection";
            if (!strcmp(propertyName, "hint")) return "The gate whose \"previousGate\" is this gate -- note that \"previous\" and \"next\" correspond to the direction of messages";
            return nullptr;
        case FIELD_pathStartGate:
            if (!strcmp(propertyName, "group")) return "connection";
            if (!strcmp(propertyName, "hint")) return "The last gate in the \"previousGate->previousGate->previousGate...\" chain";
            return nullptr;
        case FIELD_pathEndGate:
            if (!strcmp(propertyName, "group")) return "connection";
            if (!strcmp(propertyName, "hint")) return "The last gate in the \"nextGate->nextGate->nextGate...\" chain";
            return nullptr;
        case FIELD_isConnectedOutside:
            if (!strcmp(propertyName, "getter")) return "isConnectedOutside";
            if (!strcmp(propertyName, "group")) return "connection";
            if (!strcmp(propertyName, "hint")) return "For an output gate this checks nextGate, and previousGate for an input gate";
            return nullptr;
        case FIELD_isConnectedInside:
            if (!strcmp(propertyName, "getter")) return "isConnectedInside";
            if (!strcmp(propertyName, "group")) return "connection";
            if (!strcmp(propertyName, "hint")) return "For an input gate this checks nextGate, and previousGate for an output gate";
            return nullptr;
        case FIELD_isConnected:
            if (!strcmp(propertyName, "getter")) return "isConnected";
            if (!strcmp(propertyName, "group")) return "connection";
            if (!strcmp(propertyName, "hint")) return "Whether the gate is fully connected -- both inside and outside for a compound module gate, and outside for a simple module gate";
            return nullptr;
        case FIELD_isPathOK:
            if (!strcmp(propertyName, "getter")) return "isPathOK";
            if (!strcmp(propertyName, "group")) return "connection";
            if (!strcmp(propertyName, "hint")) return "The chain of connections is OK if it starts and ends at a simple module";
            return nullptr;
        default: return nullptr;
    }
}

int cGateDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cGate *pp = omnetpp::fromAnyPtr<cGate>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cGateDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cGate *pp = omnetpp::fromAnyPtr<cGate>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cGate'", field);
    }
}

const char *cGateDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cGate *pp = omnetpp::fromAnyPtr<cGate>(object); (void)pp;
    switch (field) {
        case FIELD_channel: { const cChannel * value = pp->getChannel(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_previousGate: { const cGate * value = pp->getPreviousGate(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_nextGate: { const cGate * value = pp->getNextGate(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_pathStartGate: { const cGate * value = pp->getPathStartGate(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_pathEndGate: { const cGate * value = pp->getPathEndGate(); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cGateDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cGate *pp = omnetpp::fromAnyPtr<cGate>(object); (void)pp;
    switch (field) {
        case FIELD_type: return enum2string(pp->getType(), "omnetpp::cGate::Type");
        case FIELD_id: return long2string(pp->getId());
        case FIELD_isVector: return bool2string(pp->isVector());
        case FIELD_index: return long2string(pp->getIndex());
        case FIELD_deliverImmediately: return bool2string(pp->getDeliverImmediately());
        case FIELD_channel: { auto obj = pp->getChannel(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_previousGate: { auto obj = pp->getPreviousGate(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_nextGate: { auto obj = pp->getNextGate(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_pathStartGate: { auto obj = pp->getPathStartGate(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_pathEndGate: { auto obj = pp->getPathEndGate(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_isConnectedOutside: return bool2string(pp->isConnectedOutside());
        case FIELD_isConnectedInside: return bool2string(pp->isConnectedInside());
        case FIELD_isConnected: return bool2string(pp->isConnected());
        case FIELD_isPathOK: return bool2string(pp->isPathOK());
        default: return "";
    }
}

void cGateDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cGate *pp = omnetpp::fromAnyPtr<cGate>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cGate'", field);
    }
}

omnetpp::cValue cGateDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cGate *pp = omnetpp::fromAnyPtr<cGate>(object); (void)pp;
    switch (field) {
        case FIELD_type: return pp->getType();
        case FIELD_id: return pp->getId();
        case FIELD_isVector: return pp->isVector();
        case FIELD_index: return pp->getIndex();
        case FIELD_deliverImmediately: return pp->getDeliverImmediately();
        case FIELD_channel: return omnetpp::toAnyPtr(pp->getChannel()); break;
        case FIELD_previousGate: return omnetpp::toAnyPtr(pp->getPreviousGate()); break;
        case FIELD_nextGate: return omnetpp::toAnyPtr(pp->getNextGate()); break;
        case FIELD_pathStartGate: return omnetpp::toAnyPtr(pp->getPathStartGate()); break;
        case FIELD_pathEndGate: return omnetpp::toAnyPtr(pp->getPathEndGate()); break;
        case FIELD_isConnectedOutside: return pp->isConnectedOutside();
        case FIELD_isConnectedInside: return pp->isConnectedInside();
        case FIELD_isConnected: return pp->isConnected();
        case FIELD_isPathOK: return pp->isPathOK();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cGate' as cValue -- field index out of range?", field);
    }
}

void cGateDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cGate *pp = omnetpp::fromAnyPtr<cGate>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cGate'", field);
    }
}

const char *cGateDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_channel: return omnetpp::opp_typename(typeid(cChannel));
        case FIELD_previousGate: return omnetpp::opp_typename(typeid(cGate));
        case FIELD_nextGate: return omnetpp::opp_typename(typeid(cGate));
        case FIELD_pathStartGate: return omnetpp::opp_typename(typeid(cGate));
        case FIELD_pathEndGate: return omnetpp::opp_typename(typeid(cGate));
        default: return nullptr;
    };
}

omnetpp::any_ptr cGateDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cGate *pp = omnetpp::fromAnyPtr<cGate>(object); (void)pp;
    switch (field) {
        case FIELD_channel: return omnetpp::toAnyPtr(pp->getChannel()); break;
        case FIELD_previousGate: return omnetpp::toAnyPtr(pp->getPreviousGate()); break;
        case FIELD_nextGate: return omnetpp::toAnyPtr(pp->getNextGate()); break;
        case FIELD_pathStartGate: return omnetpp::toAnyPtr(pp->getPathStartGate()); break;
        case FIELD_pathEndGate: return omnetpp::toAnyPtr(pp->getPathEndGate()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cGateDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cGate *pp = omnetpp::fromAnyPtr<cGate>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cGate'", field);
    }
}

class cArrayDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_takeOwnership,
        FIELD_contents,
    };
  public:
    cArrayDescriptor();
    virtual ~cArrayDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cArrayDescriptor)

cArrayDescriptor::cArrayDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cArray)), "omnetpp::cOwnedObject")
{
    propertyNames = nullptr;
}

cArrayDescriptor::~cArrayDescriptor()
{
    delete[] propertyNames;
}

bool cArrayDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cArray *>(obj)!=nullptr;
}

const char **cArrayDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "icon",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cArrayDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "icon")) return "container";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cArrayDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cArrayDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_takeOwnership
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_contents
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cArrayDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "takeOwnership",
        "contents",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cArrayDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "takeOwnership") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "contents") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cArrayDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "bool",    // FIELD_takeOwnership
        "omnetpp::cObject",    // FIELD_contents
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cArrayDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_takeOwnership: {
            static const char *names[] = { "group", "editable", "hint",  nullptr };
            return names;
        }
        case FIELD_contents: {
            static const char *names[] = { "getter", "sizeGetter", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cArrayDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_takeOwnership:
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "hint")) return "Whether the array should own the objects inserted into it";
            return nullptr;
        case FIELD_contents:
            if (!strcmp(propertyName, "getter")) return "get";
            if (!strcmp(propertyName, "sizeGetter")) return "size";
            if (!strcmp(propertyName, "hint")) return "Objects contained in the array";
            return nullptr;
        default: return nullptr;
    }
}

int cArrayDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cArray *pp = omnetpp::fromAnyPtr<cArray>(object); (void)pp;
    switch (field) {
        case FIELD_contents: return pp->size();
        default: return 0;
    }
}

void cArrayDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cArray *pp = omnetpp::fromAnyPtr<cArray>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cArray'", field);
    }
}

const char *cArrayDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cArray *pp = omnetpp::fromAnyPtr<cArray>(object); (void)pp;
    switch (field) {
        case FIELD_contents: { const cObject * value = pp->get(i); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cArrayDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cArray *pp = omnetpp::fromAnyPtr<cArray>(object); (void)pp;
    switch (field) {
        case FIELD_takeOwnership: return bool2string(pp->getTakeOwnership());
        case FIELD_contents: { auto obj = pp->get(i); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cArrayDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cArray *pp = omnetpp::fromAnyPtr<cArray>(object); (void)pp;
    switch (field) {
        case FIELD_takeOwnership: pp->setTakeOwnership(string2bool(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cArray'", field);
    }
}

omnetpp::cValue cArrayDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cArray *pp = omnetpp::fromAnyPtr<cArray>(object); (void)pp;
    switch (field) {
        case FIELD_takeOwnership: return pp->getTakeOwnership();
        case FIELD_contents: return omnetpp::toAnyPtr(pp->get(i)); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cArray' as cValue -- field index out of range?", field);
    }
}

void cArrayDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cArray *pp = omnetpp::fromAnyPtr<cArray>(object); (void)pp;
    switch (field) {
        case FIELD_takeOwnership: pp->setTakeOwnership(value.boolValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cArray'", field);
    }
}

const char *cArrayDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_contents: return omnetpp::opp_typename(typeid(cObject));
        default: return nullptr;
    };
}

omnetpp::any_ptr cArrayDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cArray *pp = omnetpp::fromAnyPtr<cArray>(object); (void)pp;
    switch (field) {
        case FIELD_contents: return omnetpp::toAnyPtr(pp->get(i)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cArrayDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cArray *pp = omnetpp::fromAnyPtr<cArray>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cArray'", field);
    }
}

class cEventDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_schedulingPriority,
        FIELD_targetObject,
        FIELD_isScheduled,
        FIELD_arrivalTime,
    };
  public:
    cEventDescriptor();
    virtual ~cEventDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cEventDescriptor)

cEventDescriptor::cEventDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cEvent)), "omnetpp::cOwnedObject")
{
    propertyNames = nullptr;
}

cEventDescriptor::~cEventDescriptor()
{
    delete[] propertyNames;
}

bool cEventDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cEvent *>(obj)!=nullptr;
}

const char **cEventDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cEventDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cEventDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 4+base->getFieldCount() : 4;
}

unsigned int cEventDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_schedulingPriority
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_targetObject
        0,    // FIELD_isScheduled
        0,    // FIELD_arrivalTime
    };
    return (field >= 0 && field < 4) ? fieldTypeFlags[field] : 0;
}

const char *cEventDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "schedulingPriority",
        "targetObject",
        "isScheduled",
        "arrivalTime",
    };
    return (field >= 0 && field < 4) ? fieldNames[field] : nullptr;
}

int cEventDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "schedulingPriority") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "targetObject") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "isScheduled") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "arrivalTime") == 0) return baseIndex + 3;
    return base ? base->findField(fieldName) : -1;
}

const char *cEventDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "short",    // FIELD_schedulingPriority
        "omnetpp::cObject",    // FIELD_targetObject
        "bool",    // FIELD_isScheduled
        "omnetpp::simtime_t",    // FIELD_arrivalTime
    };
    return (field >= 0 && field < 4) ? fieldTypeStrings[field] : nullptr;
}

const char **cEventDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_schedulingPriority: {
            static const char *names[] = { "group", "editable", "hint",  nullptr };
            return names;
        }
        case FIELD_targetObject: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isScheduled: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_arrivalTime: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cEventDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_schedulingPriority:
            if (!strcmp(propertyName, "group")) return "event";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "hint")) return "Controls order of messages with equal timestamps in FES";
            return nullptr;
        case FIELD_targetObject:
            if (!strcmp(propertyName, "group")) return "event";
            if (!strcmp(propertyName, "hint")) return "The object this message will be delivered to";
            return nullptr;
        case FIELD_isScheduled:
            if (!strcmp(propertyName, "getter")) return "isScheduled";
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "Whether event or message is currently scheduled (or in transit)";
            return nullptr;
        case FIELD_arrivalTime:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "Simulation time the event or message will be (or was) delivered";
            return nullptr;
        default: return nullptr;
    }
}

int cEventDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cEvent *pp = omnetpp::fromAnyPtr<cEvent>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cEventDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cEvent *pp = omnetpp::fromAnyPtr<cEvent>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cEvent'", field);
    }
}

const char *cEventDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cEvent *pp = omnetpp::fromAnyPtr<cEvent>(object); (void)pp;
    switch (field) {
        case FIELD_targetObject: { const cObject * value = pp->getTargetObject(); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cEventDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cEvent *pp = omnetpp::fromAnyPtr<cEvent>(object); (void)pp;
    switch (field) {
        case FIELD_schedulingPriority: return long2string(pp->getSchedulingPriority());
        case FIELD_targetObject: { auto obj = pp->getTargetObject(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_isScheduled: return bool2string(pp->isScheduled());
        case FIELD_arrivalTime: return simtime2string(pp->getArrivalTime());
        default: return "";
    }
}

void cEventDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cEvent *pp = omnetpp::fromAnyPtr<cEvent>(object); (void)pp;
    switch (field) {
        case FIELD_schedulingPriority: pp->setSchedulingPriority(string2long(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cEvent'", field);
    }
}

omnetpp::cValue cEventDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cEvent *pp = omnetpp::fromAnyPtr<cEvent>(object); (void)pp;
    switch (field) {
        case FIELD_schedulingPriority: return pp->getSchedulingPriority();
        case FIELD_targetObject: return omnetpp::toAnyPtr(pp->getTargetObject()); break;
        case FIELD_isScheduled: return pp->isScheduled();
        case FIELD_arrivalTime: return pp->getArrivalTime().dbl();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cEvent' as cValue -- field index out of range?", field);
    }
}

void cEventDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cEvent *pp = omnetpp::fromAnyPtr<cEvent>(object); (void)pp;
    switch (field) {
        case FIELD_schedulingPriority: pp->setSchedulingPriority(omnetpp::checked_int_cast<short>(value.intValue())); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cEvent'", field);
    }
}

const char *cEventDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_targetObject: return omnetpp::opp_typename(typeid(cObject));
        default: return nullptr;
    };
}

omnetpp::any_ptr cEventDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cEvent *pp = omnetpp::fromAnyPtr<cEvent>(object); (void)pp;
    switch (field) {
        case FIELD_targetObject: return omnetpp::toAnyPtr(pp->getTargetObject()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cEventDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cEvent *pp = omnetpp::fromAnyPtr<cEvent>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cEvent'", field);
    }
}

class cMessageDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_id,
        FIELD_treeId,
        FIELD_kind,
        FIELD_displayString,
        FIELD_controlInfo,
        FIELD_parList,
        FIELD_isSelfMessage,
        FIELD_creationTime,
        FIELD_sendingTime,
        FIELD_timestamp,
        FIELD_senderModuleId,
        FIELD_senderGateId,
        FIELD_senderModule,
        FIELD_senderGate,
        FIELD_arrivalModuleId,
        FIELD_arrivalGateId,
        FIELD_arrivalModule,
        FIELD_arrivalGate,
    };
  public:
    cMessageDescriptor();
    virtual ~cMessageDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cMessageDescriptor)

cMessageDescriptor::cMessageDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cMessage)), "omnetpp::cEvent")
{
    propertyNames = nullptr;
}

cMessageDescriptor::~cMessageDescriptor()
{
    delete[] propertyNames;
}

bool cMessageDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cMessage *>(obj)!=nullptr;
}

const char **cMessageDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "icon",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cMessageDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "icon")) return "message";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cMessageDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 18+base->getFieldCount() : 18;
}

unsigned int cMessageDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_id
        0,    // FIELD_treeId
        FD_ISEDITABLE,    // FIELD_kind
        0,    // FIELD_displayString
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_controlInfo
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_parList
        0,    // FIELD_isSelfMessage
        0,    // FIELD_creationTime
        0,    // FIELD_sendingTime
        FD_ISEDITABLE,    // FIELD_timestamp
        0,    // FIELD_senderModuleId
        0,    // FIELD_senderGateId
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_senderModule
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_senderGate
        0,    // FIELD_arrivalModuleId
        0,    // FIELD_arrivalGateId
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_arrivalModule
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_arrivalGate
    };
    return (field >= 0 && field < 18) ? fieldTypeFlags[field] : 0;
}

const char *cMessageDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "id",
        "treeId",
        "kind",
        "displayString",
        "controlInfo",
        "parList",
        "isSelfMessage",
        "creationTime",
        "sendingTime",
        "timestamp",
        "senderModuleId",
        "senderGateId",
        "senderModule",
        "senderGate",
        "arrivalModuleId",
        "arrivalGateId",
        "arrivalModule",
        "arrivalGate",
    };
    return (field >= 0 && field < 18) ? fieldNames[field] : nullptr;
}

int cMessageDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "id") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "treeId") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "kind") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "displayString") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "controlInfo") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "parList") == 0) return baseIndex + 5;
    if (strcmp(fieldName, "isSelfMessage") == 0) return baseIndex + 6;
    if (strcmp(fieldName, "creationTime") == 0) return baseIndex + 7;
    if (strcmp(fieldName, "sendingTime") == 0) return baseIndex + 8;
    if (strcmp(fieldName, "timestamp") == 0) return baseIndex + 9;
    if (strcmp(fieldName, "senderModuleId") == 0) return baseIndex + 10;
    if (strcmp(fieldName, "senderGateId") == 0) return baseIndex + 11;
    if (strcmp(fieldName, "senderModule") == 0) return baseIndex + 12;
    if (strcmp(fieldName, "senderGate") == 0) return baseIndex + 13;
    if (strcmp(fieldName, "arrivalModuleId") == 0) return baseIndex + 14;
    if (strcmp(fieldName, "arrivalGateId") == 0) return baseIndex + 15;
    if (strcmp(fieldName, "arrivalModule") == 0) return baseIndex + 16;
    if (strcmp(fieldName, "arrivalGate") == 0) return baseIndex + 17;
    return base ? base->findField(fieldName) : -1;
}

const char *cMessageDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::msgid_t",    // FIELD_id
        "omnetpp::msgid_t",    // FIELD_treeId
        "short",    // FIELD_kind
        "string",    // FIELD_displayString
        "omnetpp::cObject",    // FIELD_controlInfo
        "omnetpp::cArray",    // FIELD_parList
        "bool",    // FIELD_isSelfMessage
        "omnetpp::simtime_t",    // FIELD_creationTime
        "omnetpp::simtime_t",    // FIELD_sendingTime
        "omnetpp::simtime_t",    // FIELD_timestamp
        "int",    // FIELD_senderModuleId
        "int",    // FIELD_senderGateId
        "omnetpp::cModule",    // FIELD_senderModule
        "omnetpp::cGate",    // FIELD_senderGate
        "int",    // FIELD_arrivalModuleId
        "int",    // FIELD_arrivalGateId
        "omnetpp::cModule",    // FIELD_arrivalModule
        "omnetpp::cGate",    // FIELD_arrivalGate
    };
    return (field >= 0 && field < 18) ? fieldTypeStrings[field] : nullptr;
}

const char **cMessageDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_id: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_treeId: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_kind: {
            static const char *names[] = { "group", "editable", "hint",  nullptr };
            return names;
        }
        case FIELD_displayString: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_controlInfo: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_parList: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isSelfMessage: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_creationTime: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_sendingTime: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_timestamp: {
            static const char *names[] = { "group", "editable", "hint",  nullptr };
            return names;
        }
        case FIELD_senderModuleId: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_senderGateId: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_senderModule: {
            static const char *names[] = { "group", "hint", "eventlog",  nullptr };
            return names;
        }
        case FIELD_senderGate: {
            static const char *names[] = { "group", "hint", "eventlog",  nullptr };
            return names;
        }
        case FIELD_arrivalModuleId: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_arrivalGateId: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_arrivalModule: {
            static const char *names[] = { "group", "hint", "eventlog",  nullptr };
            return names;
        }
        case FIELD_arrivalGate: {
            static const char *names[] = { "group", "hint", "eventlog",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cMessageDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_id:
            if (!strcmp(propertyName, "group")) return "message";
            if (!strcmp(propertyName, "hint")) return "Automatically assigned unique identifier";
            return nullptr;
        case FIELD_treeId:
            if (!strcmp(propertyName, "group")) return "message";
            if (!strcmp(propertyName, "hint")) return "Identifier shared between the message and its copies";
            return nullptr;
        case FIELD_kind:
            if (!strcmp(propertyName, "group")) return "message";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "hint")) return "Generic user-settable attribute, usually carries \"type\" or \"role\" or \"category\" of message";
            return nullptr;
        case FIELD_displayString:
            if (!strcmp(propertyName, "group")) return "message";
            if (!strcmp(propertyName, "hint")) return "Controls appearance of the message in GUI";
            return nullptr;
        case FIELD_controlInfo:
            if (!strcmp(propertyName, "hint")) return "Used with protocol stacks: carries extra information when a packet is sent between protocol layers";
            return nullptr;
        case FIELD_parList:
            if (!strcmp(propertyName, "getter")) return "getParListPtr";
            if (!strcmp(propertyName, "group")) return "message";
            if (!strcmp(propertyName, "hint")) return "OBSOLETE: use of \"parList\" should be replaced with message subclassing in the few models that still use it";
            return nullptr;
        case FIELD_isSelfMessage:
            if (!strcmp(propertyName, "getter")) return "isSelfMessage";
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "Whether message is a self-message, scheduled to be delivered back to the same module at a later time";
            return nullptr;
        case FIELD_creationTime:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "Simulation time the message was created";
            return nullptr;
        case FIELD_sendingTime:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "Simulation time of the current or last sending/scheduling of the message";
            return nullptr;
        case FIELD_timestamp:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "hint")) return "User-settable timestamp for generic use";
            return nullptr;
        case FIELD_senderModuleId:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "ID of the module performing the current or last send/schedule operation";
            return nullptr;
        case FIELD_senderGateId:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "Module-local ID of the gate on which the message was sent out -- -1==none for self-messages and after \"sendDirect\"";
            return nullptr;
        case FIELD_senderModule:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "ID of the module performing the current or last send/schedule operation";
            if (!strcmp(propertyName, "eventlog")) return "fullPath";
            return nullptr;
        case FIELD_senderGate:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "The gate on which the message was sent out -- nullptr for self-messages and after \"sendDirect\"";
            if (!strcmp(propertyName, "eventlog")) return "fullName";
            return nullptr;
        case FIELD_arrivalModuleId:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "ID of the arrival module of the current or last sending/scheduling";
            return nullptr;
        case FIELD_arrivalGateId:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "Module-local ID of arrival gate for current or last sending -- -1==none for self-messages";
            return nullptr;
        case FIELD_arrivalModule:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "Arrival module for current or last sending/scheduling";
            if (!strcmp(propertyName, "eventlog")) return "fullPath";
            return nullptr;
        case FIELD_arrivalGate:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "Arrival gate for current or last sending -- nullptr for self-messages";
            if (!strcmp(propertyName, "eventlog")) return "fullName";
            return nullptr;
        default: return nullptr;
    }
}

int cMessageDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cMessage *pp = omnetpp::fromAnyPtr<cMessage>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cMessageDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cMessage *pp = omnetpp::fromAnyPtr<cMessage>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cMessage'", field);
    }
}

const char *cMessageDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cMessage *pp = omnetpp::fromAnyPtr<cMessage>(object); (void)pp;
    switch (field) {
        case FIELD_controlInfo: { const cObject * value = pp->getControlInfo(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_parList: { const cArray * value = pp->getParListPtr(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_senderModule: { const cModule * value = pp->getSenderModule(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_senderGate: { const cGate * value = pp->getSenderGate(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_arrivalModule: { const cModule * value = pp->getArrivalModule(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_arrivalGate: { const cGate * value = pp->getArrivalGate(); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cMessageDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cMessage *pp = omnetpp::fromAnyPtr<cMessage>(object); (void)pp;
    switch (field) {
        case FIELD_id: return int642string(pp->getId());
        case FIELD_treeId: return int642string(pp->getTreeId());
        case FIELD_kind: return long2string(pp->getKind());
        case FIELD_displayString: return oppstring2string(pp->getDisplayString());
        case FIELD_controlInfo: { auto obj = pp->getControlInfo(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_parList: { auto obj = pp->getParListPtr(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_isSelfMessage: return bool2string(pp->isSelfMessage());
        case FIELD_creationTime: return simtime2string(pp->getCreationTime());
        case FIELD_sendingTime: return simtime2string(pp->getSendingTime());
        case FIELD_timestamp: return simtime2string(pp->getTimestamp());
        case FIELD_senderModuleId: return long2string(pp->getSenderModuleId());
        case FIELD_senderGateId: return long2string(pp->getSenderGateId());
        case FIELD_senderModule: { auto obj = pp->getSenderModule(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_senderGate: { auto obj = pp->getSenderGate(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_arrivalModuleId: return long2string(pp->getArrivalModuleId());
        case FIELD_arrivalGateId: return long2string(pp->getArrivalGateId());
        case FIELD_arrivalModule: { auto obj = pp->getArrivalModule(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_arrivalGate: { auto obj = pp->getArrivalGate(); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cMessageDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cMessage *pp = omnetpp::fromAnyPtr<cMessage>(object); (void)pp;
    switch (field) {
        case FIELD_kind: pp->setKind(string2long(value)); break;
        case FIELD_timestamp: pp->setTimestamp(string2simtime(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cMessage'", field);
    }
}

omnetpp::cValue cMessageDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cMessage *pp = omnetpp::fromAnyPtr<cMessage>(object); (void)pp;
    switch (field) {
        case FIELD_id: return (omnetpp::intval_t)(pp->getId());
        case FIELD_treeId: return (omnetpp::intval_t)(pp->getTreeId());
        case FIELD_kind: return pp->getKind();
        case FIELD_displayString: return pp->getDisplayString();
        case FIELD_controlInfo: return omnetpp::toAnyPtr(pp->getControlInfo()); break;
        case FIELD_parList: return omnetpp::toAnyPtr(pp->getParListPtr()); break;
        case FIELD_isSelfMessage: return pp->isSelfMessage();
        case FIELD_creationTime: return pp->getCreationTime().dbl();
        case FIELD_sendingTime: return pp->getSendingTime().dbl();
        case FIELD_timestamp: return pp->getTimestamp().dbl();
        case FIELD_senderModuleId: return pp->getSenderModuleId();
        case FIELD_senderGateId: return pp->getSenderGateId();
        case FIELD_senderModule: return omnetpp::toAnyPtr(pp->getSenderModule()); break;
        case FIELD_senderGate: return omnetpp::toAnyPtr(pp->getSenderGate()); break;
        case FIELD_arrivalModuleId: return pp->getArrivalModuleId();
        case FIELD_arrivalGateId: return pp->getArrivalGateId();
        case FIELD_arrivalModule: return omnetpp::toAnyPtr(pp->getArrivalModule()); break;
        case FIELD_arrivalGate: return omnetpp::toAnyPtr(pp->getArrivalGate()); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cMessage' as cValue -- field index out of range?", field);
    }
}

void cMessageDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cMessage *pp = omnetpp::fromAnyPtr<cMessage>(object); (void)pp;
    switch (field) {
        case FIELD_kind: pp->setKind(omnetpp::checked_int_cast<short>(value.intValue())); break;
        case FIELD_timestamp: pp->setTimestamp(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cMessage'", field);
    }
}

const char *cMessageDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_controlInfo: return omnetpp::opp_typename(typeid(cObject));
        case FIELD_parList: return omnetpp::opp_typename(typeid(cArray));
        case FIELD_senderModule: return omnetpp::opp_typename(typeid(cModule));
        case FIELD_senderGate: return omnetpp::opp_typename(typeid(cGate));
        case FIELD_arrivalModule: return omnetpp::opp_typename(typeid(cModule));
        case FIELD_arrivalGate: return omnetpp::opp_typename(typeid(cGate));
        default: return nullptr;
    };
}

omnetpp::any_ptr cMessageDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cMessage *pp = omnetpp::fromAnyPtr<cMessage>(object); (void)pp;
    switch (field) {
        case FIELD_controlInfo: return omnetpp::toAnyPtr(pp->getControlInfo()); break;
        case FIELD_parList: return omnetpp::toAnyPtr(pp->getParListPtr()); break;
        case FIELD_senderModule: return omnetpp::toAnyPtr(pp->getSenderModule()); break;
        case FIELD_senderGate: return omnetpp::toAnyPtr(pp->getSenderGate()); break;
        case FIELD_arrivalModule: return omnetpp::toAnyPtr(pp->getArrivalModule()); break;
        case FIELD_arrivalGate: return omnetpp::toAnyPtr(pp->getArrivalGate()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cMessageDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cMessage *pp = omnetpp::fromAnyPtr<cMessage>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cMessage'", field);
    }
}

class cPacketDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_bitLength,
        FIELD_byteLength,
        FIELD_hasBitError,
        FIELD_encapsulatedPacket,
        FIELD_txChannelEncountered,
        FIELD_isUpdate,
        FIELD_transmissionId,
        FIELD_duration,
        FIELD_remainingDuration,
        FIELD_isReceptionStart,
        FIELD_isReceptionEnd,
    };
  public:
    cPacketDescriptor();
    virtual ~cPacketDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cPacketDescriptor)

cPacketDescriptor::cPacketDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cPacket)), "omnetpp::cMessage")
{
    propertyNames = nullptr;
}

cPacketDescriptor::~cPacketDescriptor()
{
    delete[] propertyNames;
}

bool cPacketDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cPacket *>(obj)!=nullptr;
}

const char **cPacketDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "icon",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cPacketDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "icon")) return "packet";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cPacketDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 11+base->getFieldCount() : 11;
}

unsigned int cPacketDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_bitLength
        FD_ISEDITABLE,    // FIELD_byteLength
        FD_ISEDITABLE,    // FIELD_hasBitError
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_encapsulatedPacket
        0,    // FIELD_txChannelEncountered
        0,    // FIELD_isUpdate
        FD_ISEDITABLE,    // FIELD_transmissionId
        0,    // FIELD_duration
        0,    // FIELD_remainingDuration
        0,    // FIELD_isReceptionStart
        0,    // FIELD_isReceptionEnd
    };
    return (field >= 0 && field < 11) ? fieldTypeFlags[field] : 0;
}

const char *cPacketDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "bitLength",
        "byteLength",
        "hasBitError",
        "encapsulatedPacket",
        "txChannelEncountered",
        "isUpdate",
        "transmissionId",
        "duration",
        "remainingDuration",
        "isReceptionStart",
        "isReceptionEnd",
    };
    return (field >= 0 && field < 11) ? fieldNames[field] : nullptr;
}

int cPacketDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "bitLength") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "byteLength") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "hasBitError") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "encapsulatedPacket") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "txChannelEncountered") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "isUpdate") == 0) return baseIndex + 5;
    if (strcmp(fieldName, "transmissionId") == 0) return baseIndex + 6;
    if (strcmp(fieldName, "duration") == 0) return baseIndex + 7;
    if (strcmp(fieldName, "remainingDuration") == 0) return baseIndex + 8;
    if (strcmp(fieldName, "isReceptionStart") == 0) return baseIndex + 9;
    if (strcmp(fieldName, "isReceptionEnd") == 0) return baseIndex + 10;
    return base ? base->findField(fieldName) : -1;
}

const char *cPacketDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "int64_t",    // FIELD_bitLength
        "int64_t",    // FIELD_byteLength
        "bool",    // FIELD_hasBitError
        "omnetpp::cPacket",    // FIELD_encapsulatedPacket
        "bool",    // FIELD_txChannelEncountered
        "bool",    // FIELD_isUpdate
        "omnetpp::txid_t",    // FIELD_transmissionId
        "omnetpp::simtime_t",    // FIELD_duration
        "omnetpp::simtime_t",    // FIELD_remainingDuration
        "bool",    // FIELD_isReceptionStart
        "bool",    // FIELD_isReceptionEnd
    };
    return (field >= 0 && field < 11) ? fieldTypeStrings[field] : nullptr;
}

const char **cPacketDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_bitLength: {
            static const char *names[] = { "group", "editable", "hint",  nullptr };
            return names;
        }
        case FIELD_byteLength: {
            static const char *names[] = { "group", "editable", "hint",  nullptr };
            return names;
        }
        case FIELD_hasBitError: {
            static const char *names[] = { "getter", "group", "setter", "editable", "hint",  nullptr };
            return names;
        }
        case FIELD_encapsulatedPacket: {
            static const char *names[] = { "packetData", "hint",  nullptr };
            return names;
        }
        case FIELD_txChannelEncountered: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isUpdate: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_transmissionId: {
            static const char *names[] = { "group", "editable", "hint",  nullptr };
            return names;
        }
        case FIELD_duration: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_remainingDuration: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isReceptionStart: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isReceptionEnd: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cPacketDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_bitLength:
            if (!strcmp(propertyName, "group")) return "packet";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "hint")) return "Simulated length of the message in bits, affects transmission time and probability of bit errors when sent through a channel";
            return nullptr;
        case FIELD_byteLength:
            if (!strcmp(propertyName, "group")) return "packet";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "hint")) return "Length in bytes, i.e. length in bits divided by eight";
            return nullptr;
        case FIELD_hasBitError:
            if (!strcmp(propertyName, "getter")) return "hasBitError";
            if (!strcmp(propertyName, "group")) return "packet";
            if (!strcmp(propertyName, "setter")) return "setBitError";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "hint")) return "Indicates that a bit error occurred when the message was sent through a channel with nonzero bit error rate";
            return nullptr;
        case FIELD_encapsulatedPacket:
            if (!strcmp(propertyName, "packetData")) return "";
            if (!strcmp(propertyName, "hint")) return "Used with protocol stacks: stores an encapsulated higher-layer packet";
            return nullptr;
        case FIELD_txChannelEncountered:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "If true, the packet has encountered a transmission channel during its last send";
            return nullptr;
        case FIELD_isUpdate:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "If true, this is not a separate packet but a modification to a previous packet transmission (see remainingDuration too)";
            return nullptr;
        case FIELD_transmissionId:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "hint")) return "When isUpdate=true: identifies the original packet transmission";
            return nullptr;
        case FIELD_duration:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "Transmission time over a channel with datarate";
            return nullptr;
        case FIELD_remainingDuration:
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "Remaining transmission time over a channel with datarate (see isUpdate=true)";
            return nullptr;
        case FIELD_isReceptionStart:
            if (!strcmp(propertyName, "getter")) return "isReceptionStart";
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "True if duration==remainingDuration";
            return nullptr;
        case FIELD_isReceptionEnd:
            if (!strcmp(propertyName, "getter")) return "isReceptionEnd";
            if (!strcmp(propertyName, "group")) return "sending";
            if (!strcmp(propertyName, "hint")) return "True if remainingDuration is zero";
            return nullptr;
        default: return nullptr;
    }
}

int cPacketDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cPacket *pp = omnetpp::fromAnyPtr<cPacket>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cPacketDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cPacket *pp = omnetpp::fromAnyPtr<cPacket>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cPacket'", field);
    }
}

const char *cPacketDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cPacket *pp = omnetpp::fromAnyPtr<cPacket>(object); (void)pp;
    switch (field) {
        case FIELD_encapsulatedPacket: { const cPacket * value = pp->getEncapsulatedPacket(); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cPacketDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cPacket *pp = omnetpp::fromAnyPtr<cPacket>(object); (void)pp;
    switch (field) {
        case FIELD_bitLength: return int642string(pp->getBitLength());
        case FIELD_byteLength: return int642string(pp->getByteLength());
        case FIELD_hasBitError: return bool2string(pp->hasBitError());
        case FIELD_encapsulatedPacket: { auto obj = pp->getEncapsulatedPacket(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_txChannelEncountered: return bool2string(pp->getTxChannelEncountered());
        case FIELD_isUpdate: return bool2string(pp->isUpdate());
        case FIELD_transmissionId: return int642string(pp->getTransmissionId());
        case FIELD_duration: return simtime2string(pp->getDuration());
        case FIELD_remainingDuration: return simtime2string(pp->getRemainingDuration());
        case FIELD_isReceptionStart: return bool2string(pp->isReceptionStart());
        case FIELD_isReceptionEnd: return bool2string(pp->isReceptionEnd());
        default: return "";
    }
}

void cPacketDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPacket *pp = omnetpp::fromAnyPtr<cPacket>(object); (void)pp;
    switch (field) {
        case FIELD_bitLength: pp->setBitLength(string2int64(value)); break;
        case FIELD_byteLength: pp->setByteLength(string2int64(value)); break;
        case FIELD_hasBitError: pp->setBitError(string2bool(value)); break;
        case FIELD_transmissionId: pp->setTransmissionId(string2int64(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPacket'", field);
    }
}

omnetpp::cValue cPacketDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cPacket *pp = omnetpp::fromAnyPtr<cPacket>(object); (void)pp;
    switch (field) {
        case FIELD_bitLength: return pp->getBitLength();
        case FIELD_byteLength: return pp->getByteLength();
        case FIELD_hasBitError: return pp->hasBitError();
        case FIELD_encapsulatedPacket: return omnetpp::toAnyPtr(pp->getEncapsulatedPacket()); break;
        case FIELD_txChannelEncountered: return pp->getTxChannelEncountered();
        case FIELD_isUpdate: return pp->isUpdate();
        case FIELD_transmissionId: return (omnetpp::intval_t)(pp->getTransmissionId());
        case FIELD_duration: return pp->getDuration().dbl();
        case FIELD_remainingDuration: return pp->getRemainingDuration().dbl();
        case FIELD_isReceptionStart: return pp->isReceptionStart();
        case FIELD_isReceptionEnd: return pp->isReceptionEnd();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cPacket' as cValue -- field index out of range?", field);
    }
}

void cPacketDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPacket *pp = omnetpp::fromAnyPtr<cPacket>(object); (void)pp;
    switch (field) {
        case FIELD_bitLength: pp->setBitLength(omnetpp::checked_int_cast<int64_t>(value.intValue())); break;
        case FIELD_byteLength: pp->setByteLength(omnetpp::checked_int_cast<int64_t>(value.intValue())); break;
        case FIELD_hasBitError: pp->setBitError(value.boolValue()); break;
        case FIELD_transmissionId: pp->setTransmissionId(omnetpp::checked_int_cast<int64_t>(value.intValue())); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPacket'", field);
    }
}

const char *cPacketDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_encapsulatedPacket: return omnetpp::opp_typename(typeid(cPacket));
        default: return nullptr;
    };
}

omnetpp::any_ptr cPacketDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cPacket *pp = omnetpp::fromAnyPtr<cPacket>(object); (void)pp;
    switch (field) {
        case FIELD_encapsulatedPacket: return omnetpp::toAnyPtr(pp->getEncapsulatedPacket()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cPacketDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cPacket *pp = omnetpp::fromAnyPtr<cPacket>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPacket'", field);
    }
}

class cRNGDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cRNGDescriptor();
    virtual ~cRNGDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cRNGDescriptor)

cRNGDescriptor::cRNGDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cRNG)), "omnetpp::cObject")
{
    propertyNames = nullptr;
}

cRNGDescriptor::~cRNGDescriptor()
{
    delete[] propertyNames;
}

bool cRNGDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cRNG *>(obj)!=nullptr;
}

const char **cRNGDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cRNGDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cRNGDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cRNGDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cRNGDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cRNGDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cRNGDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cRNGDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cRNGDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cRNGDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cRNG *pp = omnetpp::fromAnyPtr<cRNG>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cRNGDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cRNG *pp = omnetpp::fromAnyPtr<cRNG>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cRNG'", field);
    }
}

const char *cRNGDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cRNG *pp = omnetpp::fromAnyPtr<cRNG>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cRNGDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cRNG *pp = omnetpp::fromAnyPtr<cRNG>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cRNGDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cRNG *pp = omnetpp::fromAnyPtr<cRNG>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRNG'", field);
    }
}

omnetpp::cValue cRNGDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cRNG *pp = omnetpp::fromAnyPtr<cRNG>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cRNG' as cValue -- field index out of range?", field);
    }
}

void cRNGDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cRNG *pp = omnetpp::fromAnyPtr<cRNG>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRNG'", field);
    }
}

const char *cRNGDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cRNGDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cRNG *pp = omnetpp::fromAnyPtr<cRNG>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cRNGDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cRNG *pp = omnetpp::fromAnyPtr<cRNG>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRNG'", field);
    }
}

class cRandomDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_rng,
    };
  public:
    cRandomDescriptor();
    virtual ~cRandomDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cRandomDescriptor)

cRandomDescriptor::cRandomDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cRandom)), "omnetpp::cOwnedObject")
{
    propertyNames = nullptr;
}

cRandomDescriptor::~cRandomDescriptor()
{
    delete[] propertyNames;
}

bool cRandomDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cRandom *>(obj)!=nullptr;
}

const char **cRandomDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "icon",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cRandomDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "icon")) return "cogwheel";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cRandomDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cRandomDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISREPLACEABLE,    // FIELD_rng
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cRandomDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "rng",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cRandomDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "rng") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cRandomDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cRNG",    // FIELD_rng
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cRandomDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_rng: {
            static const char *names[] = { "getter", "setter",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cRandomDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_rng:
            if (!strcmp(propertyName, "getter")) return "getRNG";
            if (!strcmp(propertyName, "setter")) return "setRNG";
            return nullptr;
        default: return nullptr;
    }
}

int cRandomDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cRandom *pp = omnetpp::fromAnyPtr<cRandom>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cRandomDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cRandom *pp = omnetpp::fromAnyPtr<cRandom>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cRandom'", field);
    }
}

const char *cRandomDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cRandom *pp = omnetpp::fromAnyPtr<cRandom>(object); (void)pp;
    switch (field) {
        case FIELD_rng: { const cRNG * value = pp->getRNG(); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cRandomDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cRandom *pp = omnetpp::fromAnyPtr<cRandom>(object); (void)pp;
    switch (field) {
        case FIELD_rng: { auto obj = pp->getRNG(); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cRandomDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cRandom *pp = omnetpp::fromAnyPtr<cRandom>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRandom'", field);
    }
}

omnetpp::cValue cRandomDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cRandom *pp = omnetpp::fromAnyPtr<cRandom>(object); (void)pp;
    switch (field) {
        case FIELD_rng: return omnetpp::toAnyPtr(pp->getRNG()); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cRandom' as cValue -- field index out of range?", field);
    }
}

void cRandomDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cRandom *pp = omnetpp::fromAnyPtr<cRandom>(object); (void)pp;
    switch (field) {
        case FIELD_rng: pp->setRNG(omnetpp::fromAnyPtr<cRNG>(value.pointerValue())); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRandom'", field);
    }
}

const char *cRandomDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_rng: return omnetpp::opp_typename(typeid(cRNG));
        default: return nullptr;
    };
}

omnetpp::any_ptr cRandomDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cRandom *pp = omnetpp::fromAnyPtr<cRandom>(object); (void)pp;
    switch (field) {
        case FIELD_rng: return omnetpp::toAnyPtr(pp->getRNG()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cRandomDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cRandom *pp = omnetpp::fromAnyPtr<cRandom>(object); (void)pp;
    switch (field) {
        case FIELD_rng: pp->setRNG(omnetpp::fromAnyPtr<cRNG>(ptr)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRandom'", field);
    }
}

class cUniformDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_a,
        FIELD_b,
    };
  public:
    cUniformDescriptor();
    virtual ~cUniformDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cUniformDescriptor)

cUniformDescriptor::cUniformDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cUniform)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cUniformDescriptor::~cUniformDescriptor()
{
    delete[] propertyNames;
}

bool cUniformDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cUniform *>(obj)!=nullptr;
}

const char **cUniformDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cUniformDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cUniformDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cUniformDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_a
        FD_ISEDITABLE,    // FIELD_b
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cUniformDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "a",
        "b",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cUniformDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "a") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "b") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cUniformDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_a
        "double",    // FIELD_b
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cUniformDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cUniformDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cUniformDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cUniform *pp = omnetpp::fromAnyPtr<cUniform>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cUniformDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cUniform *pp = omnetpp::fromAnyPtr<cUniform>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cUniform'", field);
    }
}

const char *cUniformDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cUniform *pp = omnetpp::fromAnyPtr<cUniform>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cUniformDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cUniform *pp = omnetpp::fromAnyPtr<cUniform>(object); (void)pp;
    switch (field) {
        case FIELD_a: return double2string(pp->getA());
        case FIELD_b: return double2string(pp->getB());
        default: return "";
    }
}

void cUniformDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cUniform *pp = omnetpp::fromAnyPtr<cUniform>(object); (void)pp;
    switch (field) {
        case FIELD_a: pp->setA(string2double(value)); break;
        case FIELD_b: pp->setB(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cUniform'", field);
    }
}

omnetpp::cValue cUniformDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cUniform *pp = omnetpp::fromAnyPtr<cUniform>(object); (void)pp;
    switch (field) {
        case FIELD_a: return pp->getA();
        case FIELD_b: return pp->getB();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cUniform' as cValue -- field index out of range?", field);
    }
}

void cUniformDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cUniform *pp = omnetpp::fromAnyPtr<cUniform>(object); (void)pp;
    switch (field) {
        case FIELD_a: pp->setA(value.doubleValue()); break;
        case FIELD_b: pp->setB(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cUniform'", field);
    }
}

const char *cUniformDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cUniformDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cUniform *pp = omnetpp::fromAnyPtr<cUniform>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cUniformDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cUniform *pp = omnetpp::fromAnyPtr<cUniform>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cUniform'", field);
    }
}

class cExponentialDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_mean,
    };
  public:
    cExponentialDescriptor();
    virtual ~cExponentialDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cExponentialDescriptor)

cExponentialDescriptor::cExponentialDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cExponential)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cExponentialDescriptor::~cExponentialDescriptor()
{
    delete[] propertyNames;
}

bool cExponentialDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cExponential *>(obj)!=nullptr;
}

const char **cExponentialDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cExponentialDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cExponentialDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cExponentialDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_mean
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cExponentialDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "mean",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cExponentialDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "mean") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cExponentialDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_mean
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cExponentialDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cExponentialDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cExponentialDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cExponential *pp = omnetpp::fromAnyPtr<cExponential>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cExponentialDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cExponential *pp = omnetpp::fromAnyPtr<cExponential>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cExponential'", field);
    }
}

const char *cExponentialDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cExponential *pp = omnetpp::fromAnyPtr<cExponential>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cExponentialDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cExponential *pp = omnetpp::fromAnyPtr<cExponential>(object); (void)pp;
    switch (field) {
        case FIELD_mean: return double2string(pp->getMean());
        default: return "";
    }
}

void cExponentialDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cExponential *pp = omnetpp::fromAnyPtr<cExponential>(object); (void)pp;
    switch (field) {
        case FIELD_mean: pp->setMean(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cExponential'", field);
    }
}

omnetpp::cValue cExponentialDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cExponential *pp = omnetpp::fromAnyPtr<cExponential>(object); (void)pp;
    switch (field) {
        case FIELD_mean: return pp->getMean();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cExponential' as cValue -- field index out of range?", field);
    }
}

void cExponentialDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cExponential *pp = omnetpp::fromAnyPtr<cExponential>(object); (void)pp;
    switch (field) {
        case FIELD_mean: pp->setMean(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cExponential'", field);
    }
}

const char *cExponentialDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cExponentialDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cExponential *pp = omnetpp::fromAnyPtr<cExponential>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cExponentialDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cExponential *pp = omnetpp::fromAnyPtr<cExponential>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cExponential'", field);
    }
}

class cNormalDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_mean,
        FIELD_stddev,
    };
  public:
    cNormalDescriptor();
    virtual ~cNormalDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cNormalDescriptor)

cNormalDescriptor::cNormalDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cNormal)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cNormalDescriptor::~cNormalDescriptor()
{
    delete[] propertyNames;
}

bool cNormalDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cNormal *>(obj)!=nullptr;
}

const char **cNormalDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cNormalDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cNormalDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cNormalDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_mean
        FD_ISEDITABLE,    // FIELD_stddev
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cNormalDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "mean",
        "stddev",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cNormalDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "mean") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "stddev") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cNormalDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_mean
        "double",    // FIELD_stddev
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cNormalDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cNormalDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cNormalDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cNormal *pp = omnetpp::fromAnyPtr<cNormal>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cNormalDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cNormal *pp = omnetpp::fromAnyPtr<cNormal>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cNormal'", field);
    }
}

const char *cNormalDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cNormal *pp = omnetpp::fromAnyPtr<cNormal>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cNormalDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cNormal *pp = omnetpp::fromAnyPtr<cNormal>(object); (void)pp;
    switch (field) {
        case FIELD_mean: return double2string(pp->getMean());
        case FIELD_stddev: return double2string(pp->getStddev());
        default: return "";
    }
}

void cNormalDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cNormal *pp = omnetpp::fromAnyPtr<cNormal>(object); (void)pp;
    switch (field) {
        case FIELD_mean: pp->setMean(string2double(value)); break;
        case FIELD_stddev: pp->setStddev(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNormal'", field);
    }
}

omnetpp::cValue cNormalDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cNormal *pp = omnetpp::fromAnyPtr<cNormal>(object); (void)pp;
    switch (field) {
        case FIELD_mean: return pp->getMean();
        case FIELD_stddev: return pp->getStddev();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cNormal' as cValue -- field index out of range?", field);
    }
}

void cNormalDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cNormal *pp = omnetpp::fromAnyPtr<cNormal>(object); (void)pp;
    switch (field) {
        case FIELD_mean: pp->setMean(value.doubleValue()); break;
        case FIELD_stddev: pp->setStddev(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNormal'", field);
    }
}

const char *cNormalDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cNormalDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cNormal *pp = omnetpp::fromAnyPtr<cNormal>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cNormalDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cNormal *pp = omnetpp::fromAnyPtr<cNormal>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNormal'", field);
    }
}

class cTruncNormalDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_mean,
        FIELD_stddev,
    };
  public:
    cTruncNormalDescriptor();
    virtual ~cTruncNormalDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cTruncNormalDescriptor)

cTruncNormalDescriptor::cTruncNormalDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cTruncNormal)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cTruncNormalDescriptor::~cTruncNormalDescriptor()
{
    delete[] propertyNames;
}

bool cTruncNormalDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cTruncNormal *>(obj)!=nullptr;
}

const char **cTruncNormalDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cTruncNormalDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cTruncNormalDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cTruncNormalDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_mean
        FD_ISEDITABLE,    // FIELD_stddev
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cTruncNormalDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "mean",
        "stddev",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cTruncNormalDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "mean") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "stddev") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cTruncNormalDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_mean
        "double",    // FIELD_stddev
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cTruncNormalDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cTruncNormalDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cTruncNormalDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cTruncNormal *pp = omnetpp::fromAnyPtr<cTruncNormal>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cTruncNormalDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cTruncNormal *pp = omnetpp::fromAnyPtr<cTruncNormal>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cTruncNormal'", field);
    }
}

const char *cTruncNormalDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cTruncNormal *pp = omnetpp::fromAnyPtr<cTruncNormal>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cTruncNormalDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cTruncNormal *pp = omnetpp::fromAnyPtr<cTruncNormal>(object); (void)pp;
    switch (field) {
        case FIELD_mean: return double2string(pp->getMean());
        case FIELD_stddev: return double2string(pp->getStddev());
        default: return "";
    }
}

void cTruncNormalDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cTruncNormal *pp = omnetpp::fromAnyPtr<cTruncNormal>(object); (void)pp;
    switch (field) {
        case FIELD_mean: pp->setMean(string2double(value)); break;
        case FIELD_stddev: pp->setStddev(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTruncNormal'", field);
    }
}

omnetpp::cValue cTruncNormalDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cTruncNormal *pp = omnetpp::fromAnyPtr<cTruncNormal>(object); (void)pp;
    switch (field) {
        case FIELD_mean: return pp->getMean();
        case FIELD_stddev: return pp->getStddev();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cTruncNormal' as cValue -- field index out of range?", field);
    }
}

void cTruncNormalDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cTruncNormal *pp = omnetpp::fromAnyPtr<cTruncNormal>(object); (void)pp;
    switch (field) {
        case FIELD_mean: pp->setMean(value.doubleValue()); break;
        case FIELD_stddev: pp->setStddev(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTruncNormal'", field);
    }
}

const char *cTruncNormalDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cTruncNormalDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cTruncNormal *pp = omnetpp::fromAnyPtr<cTruncNormal>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cTruncNormalDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cTruncNormal *pp = omnetpp::fromAnyPtr<cTruncNormal>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTruncNormal'", field);
    }
}

class cGammaDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_alpha,
        FIELD_theta,
    };
  public:
    cGammaDescriptor();
    virtual ~cGammaDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cGammaDescriptor)

cGammaDescriptor::cGammaDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cGamma)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cGammaDescriptor::~cGammaDescriptor()
{
    delete[] propertyNames;
}

bool cGammaDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cGamma *>(obj)!=nullptr;
}

const char **cGammaDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cGammaDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cGammaDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cGammaDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_alpha
        FD_ISEDITABLE,    // FIELD_theta
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cGammaDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "alpha",
        "theta",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cGammaDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "alpha") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "theta") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cGammaDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_alpha
        "double",    // FIELD_theta
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cGammaDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cGammaDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cGammaDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cGamma *pp = omnetpp::fromAnyPtr<cGamma>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cGammaDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cGamma *pp = omnetpp::fromAnyPtr<cGamma>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cGamma'", field);
    }
}

const char *cGammaDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cGamma *pp = omnetpp::fromAnyPtr<cGamma>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cGammaDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cGamma *pp = omnetpp::fromAnyPtr<cGamma>(object); (void)pp;
    switch (field) {
        case FIELD_alpha: return double2string(pp->getAlpha());
        case FIELD_theta: return double2string(pp->getTheta());
        default: return "";
    }
}

void cGammaDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cGamma *pp = omnetpp::fromAnyPtr<cGamma>(object); (void)pp;
    switch (field) {
        case FIELD_alpha: pp->setAlpha(string2double(value)); break;
        case FIELD_theta: pp->setTheta(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cGamma'", field);
    }
}

omnetpp::cValue cGammaDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cGamma *pp = omnetpp::fromAnyPtr<cGamma>(object); (void)pp;
    switch (field) {
        case FIELD_alpha: return pp->getAlpha();
        case FIELD_theta: return pp->getTheta();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cGamma' as cValue -- field index out of range?", field);
    }
}

void cGammaDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cGamma *pp = omnetpp::fromAnyPtr<cGamma>(object); (void)pp;
    switch (field) {
        case FIELD_alpha: pp->setAlpha(value.doubleValue()); break;
        case FIELD_theta: pp->setTheta(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cGamma'", field);
    }
}

const char *cGammaDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cGammaDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cGamma *pp = omnetpp::fromAnyPtr<cGamma>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cGammaDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cGamma *pp = omnetpp::fromAnyPtr<cGamma>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cGamma'", field);
    }
}

class cBetaDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_alpha1,
        FIELD_alpha2,
    };
  public:
    cBetaDescriptor();
    virtual ~cBetaDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cBetaDescriptor)

cBetaDescriptor::cBetaDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cBeta)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cBetaDescriptor::~cBetaDescriptor()
{
    delete[] propertyNames;
}

bool cBetaDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cBeta *>(obj)!=nullptr;
}

const char **cBetaDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cBetaDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cBetaDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cBetaDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_alpha1
        FD_ISEDITABLE,    // FIELD_alpha2
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cBetaDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "alpha1",
        "alpha2",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cBetaDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "alpha1") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "alpha2") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cBetaDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_alpha1
        "double",    // FIELD_alpha2
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cBetaDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cBetaDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cBetaDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cBeta *pp = omnetpp::fromAnyPtr<cBeta>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cBetaDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cBeta *pp = omnetpp::fromAnyPtr<cBeta>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cBeta'", field);
    }
}

const char *cBetaDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cBeta *pp = omnetpp::fromAnyPtr<cBeta>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cBetaDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cBeta *pp = omnetpp::fromAnyPtr<cBeta>(object); (void)pp;
    switch (field) {
        case FIELD_alpha1: return double2string(pp->getAlpha1());
        case FIELD_alpha2: return double2string(pp->getAlpha2());
        default: return "";
    }
}

void cBetaDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cBeta *pp = omnetpp::fromAnyPtr<cBeta>(object); (void)pp;
    switch (field) {
        case FIELD_alpha1: pp->setAlpha1(string2double(value)); break;
        case FIELD_alpha2: pp->setAlpha2(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cBeta'", field);
    }
}

omnetpp::cValue cBetaDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cBeta *pp = omnetpp::fromAnyPtr<cBeta>(object); (void)pp;
    switch (field) {
        case FIELD_alpha1: return pp->getAlpha1();
        case FIELD_alpha2: return pp->getAlpha2();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cBeta' as cValue -- field index out of range?", field);
    }
}

void cBetaDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cBeta *pp = omnetpp::fromAnyPtr<cBeta>(object); (void)pp;
    switch (field) {
        case FIELD_alpha1: pp->setAlpha1(value.doubleValue()); break;
        case FIELD_alpha2: pp->setAlpha2(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cBeta'", field);
    }
}

const char *cBetaDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cBetaDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cBeta *pp = omnetpp::fromAnyPtr<cBeta>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cBetaDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cBeta *pp = omnetpp::fromAnyPtr<cBeta>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cBeta'", field);
    }
}

class cErlangDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_k,
        FIELD_mean,
    };
  public:
    cErlangDescriptor();
    virtual ~cErlangDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cErlangDescriptor)

cErlangDescriptor::cErlangDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cErlang)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cErlangDescriptor::~cErlangDescriptor()
{
    delete[] propertyNames;
}

bool cErlangDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cErlang *>(obj)!=nullptr;
}

const char **cErlangDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cErlangDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cErlangDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cErlangDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_k
        FD_ISEDITABLE,    // FIELD_mean
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cErlangDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "k",
        "mean",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cErlangDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "k") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "mean") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cErlangDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "unsigned int",    // FIELD_k
        "double",    // FIELD_mean
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cErlangDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cErlangDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cErlangDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cErlang *pp = omnetpp::fromAnyPtr<cErlang>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cErlangDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cErlang *pp = omnetpp::fromAnyPtr<cErlang>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cErlang'", field);
    }
}

const char *cErlangDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cErlang *pp = omnetpp::fromAnyPtr<cErlang>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cErlangDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cErlang *pp = omnetpp::fromAnyPtr<cErlang>(object); (void)pp;
    switch (field) {
        case FIELD_k: return ulong2string(pp->getK());
        case FIELD_mean: return double2string(pp->getMean());
        default: return "";
    }
}

void cErlangDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cErlang *pp = omnetpp::fromAnyPtr<cErlang>(object); (void)pp;
    switch (field) {
        case FIELD_k: pp->setK(string2ulong(value)); break;
        case FIELD_mean: pp->setMean(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cErlang'", field);
    }
}

omnetpp::cValue cErlangDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cErlang *pp = omnetpp::fromAnyPtr<cErlang>(object); (void)pp;
    switch (field) {
        case FIELD_k: return (omnetpp::intval_t)(pp->getK());
        case FIELD_mean: return pp->getMean();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cErlang' as cValue -- field index out of range?", field);
    }
}

void cErlangDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cErlang *pp = omnetpp::fromAnyPtr<cErlang>(object); (void)pp;
    switch (field) {
        case FIELD_k: pp->setK(omnetpp::checked_int_cast<unsigned int>(value.intValue())); break;
        case FIELD_mean: pp->setMean(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cErlang'", field);
    }
}

const char *cErlangDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cErlangDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cErlang *pp = omnetpp::fromAnyPtr<cErlang>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cErlangDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cErlang *pp = omnetpp::fromAnyPtr<cErlang>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cErlang'", field);
    }
}

class cChiSquareDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_k,
    };
  public:
    cChiSquareDescriptor();
    virtual ~cChiSquareDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cChiSquareDescriptor)

cChiSquareDescriptor::cChiSquareDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cChiSquare)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cChiSquareDescriptor::~cChiSquareDescriptor()
{
    delete[] propertyNames;
}

bool cChiSquareDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cChiSquare *>(obj)!=nullptr;
}

const char **cChiSquareDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cChiSquareDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cChiSquareDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cChiSquareDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_k
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cChiSquareDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "k",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cChiSquareDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "k") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cChiSquareDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "unsigned int",    // FIELD_k
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cChiSquareDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cChiSquareDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cChiSquareDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cChiSquare *pp = omnetpp::fromAnyPtr<cChiSquare>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cChiSquareDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cChiSquare *pp = omnetpp::fromAnyPtr<cChiSquare>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cChiSquare'", field);
    }
}

const char *cChiSquareDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cChiSquare *pp = omnetpp::fromAnyPtr<cChiSquare>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cChiSquareDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cChiSquare *pp = omnetpp::fromAnyPtr<cChiSquare>(object); (void)pp;
    switch (field) {
        case FIELD_k: return ulong2string(pp->getK());
        default: return "";
    }
}

void cChiSquareDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cChiSquare *pp = omnetpp::fromAnyPtr<cChiSquare>(object); (void)pp;
    switch (field) {
        case FIELD_k: pp->setK(string2ulong(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cChiSquare'", field);
    }
}

omnetpp::cValue cChiSquareDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cChiSquare *pp = omnetpp::fromAnyPtr<cChiSquare>(object); (void)pp;
    switch (field) {
        case FIELD_k: return (omnetpp::intval_t)(pp->getK());
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cChiSquare' as cValue -- field index out of range?", field);
    }
}

void cChiSquareDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cChiSquare *pp = omnetpp::fromAnyPtr<cChiSquare>(object); (void)pp;
    switch (field) {
        case FIELD_k: pp->setK(omnetpp::checked_int_cast<unsigned int>(value.intValue())); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cChiSquare'", field);
    }
}

const char *cChiSquareDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cChiSquareDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cChiSquare *pp = omnetpp::fromAnyPtr<cChiSquare>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cChiSquareDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cChiSquare *pp = omnetpp::fromAnyPtr<cChiSquare>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cChiSquare'", field);
    }
}

class cStudentTDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_i,
    };
  public:
    cStudentTDescriptor();
    virtual ~cStudentTDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cStudentTDescriptor)

cStudentTDescriptor::cStudentTDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cStudentT)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cStudentTDescriptor::~cStudentTDescriptor()
{
    delete[] propertyNames;
}

bool cStudentTDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cStudentT *>(obj)!=nullptr;
}

const char **cStudentTDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cStudentTDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cStudentTDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cStudentTDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_i
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cStudentTDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "i",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cStudentTDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "i") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cStudentTDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "unsigned int",    // FIELD_i
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cStudentTDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cStudentTDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cStudentTDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cStudentT *pp = omnetpp::fromAnyPtr<cStudentT>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cStudentTDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cStudentT *pp = omnetpp::fromAnyPtr<cStudentT>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cStudentT'", field);
    }
}

const char *cStudentTDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cStudentT *pp = omnetpp::fromAnyPtr<cStudentT>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cStudentTDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cStudentT *pp = omnetpp::fromAnyPtr<cStudentT>(object); (void)pp;
    switch (field) {
        case FIELD_i: return ulong2string(pp->getI());
        default: return "";
    }
}

void cStudentTDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cStudentT *pp = omnetpp::fromAnyPtr<cStudentT>(object); (void)pp;
    switch (field) {
        case FIELD_i: pp->setI(string2ulong(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cStudentT'", field);
    }
}

omnetpp::cValue cStudentTDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cStudentT *pp = omnetpp::fromAnyPtr<cStudentT>(object); (void)pp;
    switch (field) {
        case FIELD_i: return (omnetpp::intval_t)(pp->getI());
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cStudentT' as cValue -- field index out of range?", field);
    }
}

void cStudentTDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cStudentT *pp = omnetpp::fromAnyPtr<cStudentT>(object); (void)pp;
    switch (field) {
        case FIELD_i: pp->setI(omnetpp::checked_int_cast<unsigned int>(value.intValue())); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cStudentT'", field);
    }
}

const char *cStudentTDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cStudentTDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cStudentT *pp = omnetpp::fromAnyPtr<cStudentT>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cStudentTDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cStudentT *pp = omnetpp::fromAnyPtr<cStudentT>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cStudentT'", field);
    }
}

class cCauchyDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_a,
        FIELD_b,
    };
  public:
    cCauchyDescriptor();
    virtual ~cCauchyDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cCauchyDescriptor)

cCauchyDescriptor::cCauchyDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cCauchy)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cCauchyDescriptor::~cCauchyDescriptor()
{
    delete[] propertyNames;
}

bool cCauchyDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cCauchy *>(obj)!=nullptr;
}

const char **cCauchyDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cCauchyDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cCauchyDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cCauchyDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_a
        FD_ISEDITABLE,    // FIELD_b
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cCauchyDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "a",
        "b",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cCauchyDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "a") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "b") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cCauchyDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_a
        "double",    // FIELD_b
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cCauchyDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cCauchyDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cCauchyDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cCauchy *pp = omnetpp::fromAnyPtr<cCauchy>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cCauchyDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cCauchy *pp = omnetpp::fromAnyPtr<cCauchy>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cCauchy'", field);
    }
}

const char *cCauchyDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cCauchy *pp = omnetpp::fromAnyPtr<cCauchy>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cCauchyDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cCauchy *pp = omnetpp::fromAnyPtr<cCauchy>(object); (void)pp;
    switch (field) {
        case FIELD_a: return double2string(pp->getA());
        case FIELD_b: return double2string(pp->getB());
        default: return "";
    }
}

void cCauchyDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cCauchy *pp = omnetpp::fromAnyPtr<cCauchy>(object); (void)pp;
    switch (field) {
        case FIELD_a: pp->setA(string2double(value)); break;
        case FIELD_b: pp->setB(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cCauchy'", field);
    }
}

omnetpp::cValue cCauchyDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cCauchy *pp = omnetpp::fromAnyPtr<cCauchy>(object); (void)pp;
    switch (field) {
        case FIELD_a: return pp->getA();
        case FIELD_b: return pp->getB();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cCauchy' as cValue -- field index out of range?", field);
    }
}

void cCauchyDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cCauchy *pp = omnetpp::fromAnyPtr<cCauchy>(object); (void)pp;
    switch (field) {
        case FIELD_a: pp->setA(value.doubleValue()); break;
        case FIELD_b: pp->setB(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cCauchy'", field);
    }
}

const char *cCauchyDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cCauchyDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cCauchy *pp = omnetpp::fromAnyPtr<cCauchy>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cCauchyDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cCauchy *pp = omnetpp::fromAnyPtr<cCauchy>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cCauchy'", field);
    }
}

class cTriangDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_a,
        FIELD_b,
        FIELD_c,
    };
  public:
    cTriangDescriptor();
    virtual ~cTriangDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cTriangDescriptor)

cTriangDescriptor::cTriangDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cTriang)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cTriangDescriptor::~cTriangDescriptor()
{
    delete[] propertyNames;
}

bool cTriangDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cTriang *>(obj)!=nullptr;
}

const char **cTriangDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cTriangDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cTriangDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 3+base->getFieldCount() : 3;
}

unsigned int cTriangDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_a
        FD_ISEDITABLE,    // FIELD_b
        FD_ISEDITABLE,    // FIELD_c
    };
    return (field >= 0 && field < 3) ? fieldTypeFlags[field] : 0;
}

const char *cTriangDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "a",
        "b",
        "c",
    };
    return (field >= 0 && field < 3) ? fieldNames[field] : nullptr;
}

int cTriangDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "a") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "b") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "c") == 0) return baseIndex + 2;
    return base ? base->findField(fieldName) : -1;
}

const char *cTriangDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_a
        "double",    // FIELD_b
        "double",    // FIELD_c
    };
    return (field >= 0 && field < 3) ? fieldTypeStrings[field] : nullptr;
}

const char **cTriangDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cTriangDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cTriangDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cTriang *pp = omnetpp::fromAnyPtr<cTriang>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cTriangDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cTriang *pp = omnetpp::fromAnyPtr<cTriang>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cTriang'", field);
    }
}

const char *cTriangDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cTriang *pp = omnetpp::fromAnyPtr<cTriang>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cTriangDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cTriang *pp = omnetpp::fromAnyPtr<cTriang>(object); (void)pp;
    switch (field) {
        case FIELD_a: return double2string(pp->getA());
        case FIELD_b: return double2string(pp->getB());
        case FIELD_c: return double2string(pp->getC());
        default: return "";
    }
}

void cTriangDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cTriang *pp = omnetpp::fromAnyPtr<cTriang>(object); (void)pp;
    switch (field) {
        case FIELD_a: pp->setA(string2double(value)); break;
        case FIELD_b: pp->setB(string2double(value)); break;
        case FIELD_c: pp->setC(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTriang'", field);
    }
}

omnetpp::cValue cTriangDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cTriang *pp = omnetpp::fromAnyPtr<cTriang>(object); (void)pp;
    switch (field) {
        case FIELD_a: return pp->getA();
        case FIELD_b: return pp->getB();
        case FIELD_c: return pp->getC();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cTriang' as cValue -- field index out of range?", field);
    }
}

void cTriangDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cTriang *pp = omnetpp::fromAnyPtr<cTriang>(object); (void)pp;
    switch (field) {
        case FIELD_a: pp->setA(value.doubleValue()); break;
        case FIELD_b: pp->setB(value.doubleValue()); break;
        case FIELD_c: pp->setC(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTriang'", field);
    }
}

const char *cTriangDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cTriangDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cTriang *pp = omnetpp::fromAnyPtr<cTriang>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cTriangDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cTriang *pp = omnetpp::fromAnyPtr<cTriang>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTriang'", field);
    }
}

class cWeibullDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_a,
        FIELD_b,
    };
  public:
    cWeibullDescriptor();
    virtual ~cWeibullDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cWeibullDescriptor)

cWeibullDescriptor::cWeibullDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cWeibull)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cWeibullDescriptor::~cWeibullDescriptor()
{
    delete[] propertyNames;
}

bool cWeibullDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cWeibull *>(obj)!=nullptr;
}

const char **cWeibullDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cWeibullDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cWeibullDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cWeibullDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_a
        FD_ISEDITABLE,    // FIELD_b
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cWeibullDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "a",
        "b",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cWeibullDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "a") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "b") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cWeibullDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_a
        "double",    // FIELD_b
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cWeibullDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cWeibullDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cWeibullDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cWeibull *pp = omnetpp::fromAnyPtr<cWeibull>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cWeibullDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cWeibull *pp = omnetpp::fromAnyPtr<cWeibull>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cWeibull'", field);
    }
}

const char *cWeibullDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cWeibull *pp = omnetpp::fromAnyPtr<cWeibull>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cWeibullDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cWeibull *pp = omnetpp::fromAnyPtr<cWeibull>(object); (void)pp;
    switch (field) {
        case FIELD_a: return double2string(pp->getA());
        case FIELD_b: return double2string(pp->getB());
        default: return "";
    }
}

void cWeibullDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cWeibull *pp = omnetpp::fromAnyPtr<cWeibull>(object); (void)pp;
    switch (field) {
        case FIELD_a: pp->setA(string2double(value)); break;
        case FIELD_b: pp->setB(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cWeibull'", field);
    }
}

omnetpp::cValue cWeibullDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cWeibull *pp = omnetpp::fromAnyPtr<cWeibull>(object); (void)pp;
    switch (field) {
        case FIELD_a: return pp->getA();
        case FIELD_b: return pp->getB();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cWeibull' as cValue -- field index out of range?", field);
    }
}

void cWeibullDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cWeibull *pp = omnetpp::fromAnyPtr<cWeibull>(object); (void)pp;
    switch (field) {
        case FIELD_a: pp->setA(value.doubleValue()); break;
        case FIELD_b: pp->setB(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cWeibull'", field);
    }
}

const char *cWeibullDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cWeibullDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cWeibull *pp = omnetpp::fromAnyPtr<cWeibull>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cWeibullDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cWeibull *pp = omnetpp::fromAnyPtr<cWeibull>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cWeibull'", field);
    }
}

class cParetoShiftedDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_a,
        FIELD_b,
        FIELD_c,
    };
  public:
    cParetoShiftedDescriptor();
    virtual ~cParetoShiftedDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cParetoShiftedDescriptor)

cParetoShiftedDescriptor::cParetoShiftedDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cParetoShifted)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cParetoShiftedDescriptor::~cParetoShiftedDescriptor()
{
    delete[] propertyNames;
}

bool cParetoShiftedDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cParetoShifted *>(obj)!=nullptr;
}

const char **cParetoShiftedDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cParetoShiftedDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cParetoShiftedDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 3+base->getFieldCount() : 3;
}

unsigned int cParetoShiftedDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_a
        FD_ISEDITABLE,    // FIELD_b
        FD_ISEDITABLE,    // FIELD_c
    };
    return (field >= 0 && field < 3) ? fieldTypeFlags[field] : 0;
}

const char *cParetoShiftedDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "a",
        "b",
        "c",
    };
    return (field >= 0 && field < 3) ? fieldNames[field] : nullptr;
}

int cParetoShiftedDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "a") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "b") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "c") == 0) return baseIndex + 2;
    return base ? base->findField(fieldName) : -1;
}

const char *cParetoShiftedDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_a
        "double",    // FIELD_b
        "double",    // FIELD_c
    };
    return (field >= 0 && field < 3) ? fieldTypeStrings[field] : nullptr;
}

const char **cParetoShiftedDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cParetoShiftedDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cParetoShiftedDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cParetoShifted *pp = omnetpp::fromAnyPtr<cParetoShifted>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cParetoShiftedDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cParetoShifted *pp = omnetpp::fromAnyPtr<cParetoShifted>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cParetoShifted'", field);
    }
}

const char *cParetoShiftedDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cParetoShifted *pp = omnetpp::fromAnyPtr<cParetoShifted>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cParetoShiftedDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cParetoShifted *pp = omnetpp::fromAnyPtr<cParetoShifted>(object); (void)pp;
    switch (field) {
        case FIELD_a: return double2string(pp->getA());
        case FIELD_b: return double2string(pp->getB());
        case FIELD_c: return double2string(pp->getC());
        default: return "";
    }
}

void cParetoShiftedDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cParetoShifted *pp = omnetpp::fromAnyPtr<cParetoShifted>(object); (void)pp;
    switch (field) {
        case FIELD_a: pp->setA(string2double(value)); break;
        case FIELD_b: pp->setB(string2double(value)); break;
        case FIELD_c: pp->setC(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cParetoShifted'", field);
    }
}

omnetpp::cValue cParetoShiftedDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cParetoShifted *pp = omnetpp::fromAnyPtr<cParetoShifted>(object); (void)pp;
    switch (field) {
        case FIELD_a: return pp->getA();
        case FIELD_b: return pp->getB();
        case FIELD_c: return pp->getC();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cParetoShifted' as cValue -- field index out of range?", field);
    }
}

void cParetoShiftedDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cParetoShifted *pp = omnetpp::fromAnyPtr<cParetoShifted>(object); (void)pp;
    switch (field) {
        case FIELD_a: pp->setA(value.doubleValue()); break;
        case FIELD_b: pp->setB(value.doubleValue()); break;
        case FIELD_c: pp->setC(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cParetoShifted'", field);
    }
}

const char *cParetoShiftedDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cParetoShiftedDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cParetoShifted *pp = omnetpp::fromAnyPtr<cParetoShifted>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cParetoShiftedDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cParetoShifted *pp = omnetpp::fromAnyPtr<cParetoShifted>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cParetoShifted'", field);
    }
}

class cIntUniformDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_a,
        FIELD_b,
    };
  public:
    cIntUniformDescriptor();
    virtual ~cIntUniformDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cIntUniformDescriptor)

cIntUniformDescriptor::cIntUniformDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cIntUniform)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cIntUniformDescriptor::~cIntUniformDescriptor()
{
    delete[] propertyNames;
}

bool cIntUniformDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cIntUniform *>(obj)!=nullptr;
}

const char **cIntUniformDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cIntUniformDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cIntUniformDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cIntUniformDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_a
        FD_ISEDITABLE,    // FIELD_b
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cIntUniformDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "a",
        "b",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cIntUniformDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "a") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "b") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cIntUniformDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "int",    // FIELD_a
        "int",    // FIELD_b
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cIntUniformDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cIntUniformDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cIntUniformDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cIntUniform *pp = omnetpp::fromAnyPtr<cIntUniform>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cIntUniformDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cIntUniform *pp = omnetpp::fromAnyPtr<cIntUniform>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cIntUniform'", field);
    }
}

const char *cIntUniformDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cIntUniform *pp = omnetpp::fromAnyPtr<cIntUniform>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cIntUniformDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cIntUniform *pp = omnetpp::fromAnyPtr<cIntUniform>(object); (void)pp;
    switch (field) {
        case FIELD_a: return long2string(pp->getA());
        case FIELD_b: return long2string(pp->getB());
        default: return "";
    }
}

void cIntUniformDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cIntUniform *pp = omnetpp::fromAnyPtr<cIntUniform>(object); (void)pp;
    switch (field) {
        case FIELD_a: pp->setA(string2long(value)); break;
        case FIELD_b: pp->setB(string2long(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cIntUniform'", field);
    }
}

omnetpp::cValue cIntUniformDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cIntUniform *pp = omnetpp::fromAnyPtr<cIntUniform>(object); (void)pp;
    switch (field) {
        case FIELD_a: return pp->getA();
        case FIELD_b: return pp->getB();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cIntUniform' as cValue -- field index out of range?", field);
    }
}

void cIntUniformDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cIntUniform *pp = omnetpp::fromAnyPtr<cIntUniform>(object); (void)pp;
    switch (field) {
        case FIELD_a: pp->setA(omnetpp::checked_int_cast<int>(value.intValue())); break;
        case FIELD_b: pp->setB(omnetpp::checked_int_cast<int>(value.intValue())); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cIntUniform'", field);
    }
}

const char *cIntUniformDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cIntUniformDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cIntUniform *pp = omnetpp::fromAnyPtr<cIntUniform>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cIntUniformDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cIntUniform *pp = omnetpp::fromAnyPtr<cIntUniform>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cIntUniform'", field);
    }
}

class cBernoulliDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_p,
    };
  public:
    cBernoulliDescriptor();
    virtual ~cBernoulliDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cBernoulliDescriptor)

cBernoulliDescriptor::cBernoulliDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cBernoulli)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cBernoulliDescriptor::~cBernoulliDescriptor()
{
    delete[] propertyNames;
}

bool cBernoulliDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cBernoulli *>(obj)!=nullptr;
}

const char **cBernoulliDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cBernoulliDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cBernoulliDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cBernoulliDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_p
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cBernoulliDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "p",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cBernoulliDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "p") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cBernoulliDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_p
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cBernoulliDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cBernoulliDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cBernoulliDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cBernoulli *pp = omnetpp::fromAnyPtr<cBernoulli>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cBernoulliDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cBernoulli *pp = omnetpp::fromAnyPtr<cBernoulli>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cBernoulli'", field);
    }
}

const char *cBernoulliDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cBernoulli *pp = omnetpp::fromAnyPtr<cBernoulli>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cBernoulliDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cBernoulli *pp = omnetpp::fromAnyPtr<cBernoulli>(object); (void)pp;
    switch (field) {
        case FIELD_p: return double2string(pp->getP());
        default: return "";
    }
}

void cBernoulliDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cBernoulli *pp = omnetpp::fromAnyPtr<cBernoulli>(object); (void)pp;
    switch (field) {
        case FIELD_p: pp->setP(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cBernoulli'", field);
    }
}

omnetpp::cValue cBernoulliDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cBernoulli *pp = omnetpp::fromAnyPtr<cBernoulli>(object); (void)pp;
    switch (field) {
        case FIELD_p: return pp->getP();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cBernoulli' as cValue -- field index out of range?", field);
    }
}

void cBernoulliDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cBernoulli *pp = omnetpp::fromAnyPtr<cBernoulli>(object); (void)pp;
    switch (field) {
        case FIELD_p: pp->setP(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cBernoulli'", field);
    }
}

const char *cBernoulliDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cBernoulliDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cBernoulli *pp = omnetpp::fromAnyPtr<cBernoulli>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cBernoulliDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cBernoulli *pp = omnetpp::fromAnyPtr<cBernoulli>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cBernoulli'", field);
    }
}

class cBinomialDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_n,
        FIELD_p,
    };
  public:
    cBinomialDescriptor();
    virtual ~cBinomialDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cBinomialDescriptor)

cBinomialDescriptor::cBinomialDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cBinomial)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cBinomialDescriptor::~cBinomialDescriptor()
{
    delete[] propertyNames;
}

bool cBinomialDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cBinomial *>(obj)!=nullptr;
}

const char **cBinomialDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cBinomialDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cBinomialDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cBinomialDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_n
        FD_ISEDITABLE,    // FIELD_p
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cBinomialDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "n",
        "p",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cBinomialDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "n") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "p") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cBinomialDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "int",    // FIELD_n
        "double",    // FIELD_p
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cBinomialDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cBinomialDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cBinomialDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cBinomial *pp = omnetpp::fromAnyPtr<cBinomial>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cBinomialDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cBinomial *pp = omnetpp::fromAnyPtr<cBinomial>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cBinomial'", field);
    }
}

const char *cBinomialDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cBinomial *pp = omnetpp::fromAnyPtr<cBinomial>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cBinomialDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cBinomial *pp = omnetpp::fromAnyPtr<cBinomial>(object); (void)pp;
    switch (field) {
        case FIELD_n: return long2string(pp->getN());
        case FIELD_p: return double2string(pp->getP());
        default: return "";
    }
}

void cBinomialDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cBinomial *pp = omnetpp::fromAnyPtr<cBinomial>(object); (void)pp;
    switch (field) {
        case FIELD_n: pp->setN(string2long(value)); break;
        case FIELD_p: pp->setP(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cBinomial'", field);
    }
}

omnetpp::cValue cBinomialDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cBinomial *pp = omnetpp::fromAnyPtr<cBinomial>(object); (void)pp;
    switch (field) {
        case FIELD_n: return pp->getN();
        case FIELD_p: return pp->getP();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cBinomial' as cValue -- field index out of range?", field);
    }
}

void cBinomialDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cBinomial *pp = omnetpp::fromAnyPtr<cBinomial>(object); (void)pp;
    switch (field) {
        case FIELD_n: pp->setN(omnetpp::checked_int_cast<int>(value.intValue())); break;
        case FIELD_p: pp->setP(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cBinomial'", field);
    }
}

const char *cBinomialDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cBinomialDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cBinomial *pp = omnetpp::fromAnyPtr<cBinomial>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cBinomialDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cBinomial *pp = omnetpp::fromAnyPtr<cBinomial>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cBinomial'", field);
    }
}

class cGeometricDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_p,
    };
  public:
    cGeometricDescriptor();
    virtual ~cGeometricDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cGeometricDescriptor)

cGeometricDescriptor::cGeometricDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cGeometric)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cGeometricDescriptor::~cGeometricDescriptor()
{
    delete[] propertyNames;
}

bool cGeometricDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cGeometric *>(obj)!=nullptr;
}

const char **cGeometricDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cGeometricDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cGeometricDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cGeometricDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_p
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cGeometricDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "p",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cGeometricDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "p") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cGeometricDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_p
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cGeometricDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cGeometricDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cGeometricDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cGeometric *pp = omnetpp::fromAnyPtr<cGeometric>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cGeometricDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cGeometric *pp = omnetpp::fromAnyPtr<cGeometric>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cGeometric'", field);
    }
}

const char *cGeometricDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cGeometric *pp = omnetpp::fromAnyPtr<cGeometric>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cGeometricDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cGeometric *pp = omnetpp::fromAnyPtr<cGeometric>(object); (void)pp;
    switch (field) {
        case FIELD_p: return double2string(pp->getP());
        default: return "";
    }
}

void cGeometricDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cGeometric *pp = omnetpp::fromAnyPtr<cGeometric>(object); (void)pp;
    switch (field) {
        case FIELD_p: pp->setP(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cGeometric'", field);
    }
}

omnetpp::cValue cGeometricDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cGeometric *pp = omnetpp::fromAnyPtr<cGeometric>(object); (void)pp;
    switch (field) {
        case FIELD_p: return pp->getP();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cGeometric' as cValue -- field index out of range?", field);
    }
}

void cGeometricDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cGeometric *pp = omnetpp::fromAnyPtr<cGeometric>(object); (void)pp;
    switch (field) {
        case FIELD_p: pp->setP(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cGeometric'", field);
    }
}

const char *cGeometricDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cGeometricDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cGeometric *pp = omnetpp::fromAnyPtr<cGeometric>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cGeometricDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cGeometric *pp = omnetpp::fromAnyPtr<cGeometric>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cGeometric'", field);
    }
}

class cNegBinomialDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_n,
        FIELD_p,
    };
  public:
    cNegBinomialDescriptor();
    virtual ~cNegBinomialDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cNegBinomialDescriptor)

cNegBinomialDescriptor::cNegBinomialDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cNegBinomial)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cNegBinomialDescriptor::~cNegBinomialDescriptor()
{
    delete[] propertyNames;
}

bool cNegBinomialDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cNegBinomial *>(obj)!=nullptr;
}

const char **cNegBinomialDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cNegBinomialDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cNegBinomialDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cNegBinomialDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_n
        FD_ISEDITABLE,    // FIELD_p
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cNegBinomialDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "n",
        "p",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cNegBinomialDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "n") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "p") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cNegBinomialDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "int",    // FIELD_n
        "double",    // FIELD_p
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cNegBinomialDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cNegBinomialDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cNegBinomialDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cNegBinomial *pp = omnetpp::fromAnyPtr<cNegBinomial>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cNegBinomialDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cNegBinomial *pp = omnetpp::fromAnyPtr<cNegBinomial>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cNegBinomial'", field);
    }
}

const char *cNegBinomialDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cNegBinomial *pp = omnetpp::fromAnyPtr<cNegBinomial>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cNegBinomialDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cNegBinomial *pp = omnetpp::fromAnyPtr<cNegBinomial>(object); (void)pp;
    switch (field) {
        case FIELD_n: return long2string(pp->getN());
        case FIELD_p: return double2string(pp->getP());
        default: return "";
    }
}

void cNegBinomialDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cNegBinomial *pp = omnetpp::fromAnyPtr<cNegBinomial>(object); (void)pp;
    switch (field) {
        case FIELD_n: pp->setN(string2long(value)); break;
        case FIELD_p: pp->setP(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNegBinomial'", field);
    }
}

omnetpp::cValue cNegBinomialDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cNegBinomial *pp = omnetpp::fromAnyPtr<cNegBinomial>(object); (void)pp;
    switch (field) {
        case FIELD_n: return pp->getN();
        case FIELD_p: return pp->getP();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cNegBinomial' as cValue -- field index out of range?", field);
    }
}

void cNegBinomialDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cNegBinomial *pp = omnetpp::fromAnyPtr<cNegBinomial>(object); (void)pp;
    switch (field) {
        case FIELD_n: pp->setN(omnetpp::checked_int_cast<int>(value.intValue())); break;
        case FIELD_p: pp->setP(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNegBinomial'", field);
    }
}

const char *cNegBinomialDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cNegBinomialDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cNegBinomial *pp = omnetpp::fromAnyPtr<cNegBinomial>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cNegBinomialDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cNegBinomial *pp = omnetpp::fromAnyPtr<cNegBinomial>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNegBinomial'", field);
    }
}

class cPoissonDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_lambda,
    };
  public:
    cPoissonDescriptor();
    virtual ~cPoissonDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cPoissonDescriptor)

cPoissonDescriptor::cPoissonDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cPoisson)), "omnetpp::cRandom")
{
    propertyNames = nullptr;
}

cPoissonDescriptor::~cPoissonDescriptor()
{
    delete[] propertyNames;
}

bool cPoissonDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cPoisson *>(obj)!=nullptr;
}

const char **cPoissonDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cPoissonDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cPoissonDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cPoissonDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_lambda
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cPoissonDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "lambda",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cPoissonDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "lambda") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cPoissonDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_lambda
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cPoissonDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cPoissonDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cPoissonDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cPoisson *pp = omnetpp::fromAnyPtr<cPoisson>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cPoissonDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cPoisson *pp = omnetpp::fromAnyPtr<cPoisson>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cPoisson'", field);
    }
}

const char *cPoissonDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cPoisson *pp = omnetpp::fromAnyPtr<cPoisson>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cPoissonDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cPoisson *pp = omnetpp::fromAnyPtr<cPoisson>(object); (void)pp;
    switch (field) {
        case FIELD_lambda: return double2string(pp->getLambda());
        default: return "";
    }
}

void cPoissonDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPoisson *pp = omnetpp::fromAnyPtr<cPoisson>(object); (void)pp;
    switch (field) {
        case FIELD_lambda: pp->setLambda(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPoisson'", field);
    }
}

omnetpp::cValue cPoissonDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cPoisson *pp = omnetpp::fromAnyPtr<cPoisson>(object); (void)pp;
    switch (field) {
        case FIELD_lambda: return pp->getLambda();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cPoisson' as cValue -- field index out of range?", field);
    }
}

void cPoissonDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPoisson *pp = omnetpp::fromAnyPtr<cPoisson>(object); (void)pp;
    switch (field) {
        case FIELD_lambda: pp->setLambda(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPoisson'", field);
    }
}

const char *cPoissonDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cPoissonDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cPoisson *pp = omnetpp::fromAnyPtr<cPoisson>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cPoissonDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cPoisson *pp = omnetpp::fromAnyPtr<cPoisson>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPoisson'", field);
    }
}

class cStatisticDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_count,
        FIELD_sumWeights,
        FIELD_min,
        FIELD_max,
        FIELD_mean,
        FIELD_stddev,
        FIELD_variance,
    };
  public:
    cStatisticDescriptor();
    virtual ~cStatisticDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cStatisticDescriptor)

cStatisticDescriptor::cStatisticDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cStatistic)), "omnetpp::cOwnedObject")
{
    propertyNames = nullptr;
}

cStatisticDescriptor::~cStatisticDescriptor()
{
    delete[] propertyNames;
}

bool cStatisticDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cStatistic *>(obj)!=nullptr;
}

const char **cStatisticDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "icon",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cStatisticDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "icon")) return "statistic";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cStatisticDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 7+base->getFieldCount() : 7;
}

unsigned int cStatisticDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_count
        0,    // FIELD_sumWeights
        0,    // FIELD_min
        0,    // FIELD_max
        0,    // FIELD_mean
        0,    // FIELD_stddev
        0,    // FIELD_variance
    };
    return (field >= 0 && field < 7) ? fieldTypeFlags[field] : 0;
}

const char *cStatisticDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "count",
        "sumWeights",
        "min",
        "max",
        "mean",
        "stddev",
        "variance",
    };
    return (field >= 0 && field < 7) ? fieldNames[field] : nullptr;
}

int cStatisticDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "count") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "sumWeights") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "min") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "max") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "mean") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "stddev") == 0) return baseIndex + 5;
    if (strcmp(fieldName, "variance") == 0) return baseIndex + 6;
    return base ? base->findField(fieldName) : -1;
}

const char *cStatisticDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "long",    // FIELD_count
        "double",    // FIELD_sumWeights
        "double",    // FIELD_min
        "double",    // FIELD_max
        "double",    // FIELD_mean
        "double",    // FIELD_stddev
        "double",    // FIELD_variance
    };
    return (field >= 0 && field < 7) ? fieldTypeStrings[field] : nullptr;
}

const char **cStatisticDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_count: {
            static const char *names[] = { "readonly", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_sumWeights: {
            static const char *names[] = { "readonly", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_min: {
            static const char *names[] = { "readonly", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_max: {
            static const char *names[] = { "readonly", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_mean: {
            static const char *names[] = { "readonly", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_stddev: {
            static const char *names[] = { "readonly", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_variance: {
            static const char *names[] = { "readonly", "group", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cStatisticDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_count:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "group")) return "statistical summary";
            if (!strcmp(propertyName, "hint")) return "Number of observations collected, regardless of their weights";
            return nullptr;
        case FIELD_sumWeights:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "group")) return "statistical summary";
            if (!strcmp(propertyName, "hint")) return "Sum of weights, which equals the number of observations in the unweighted case";
            return nullptr;
        case FIELD_min:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "group")) return "statistical summary";
            if (!strcmp(propertyName, "hint")) return "Minimum of the observations";
            return nullptr;
        case FIELD_max:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "group")) return "statistical summary";
            if (!strcmp(propertyName, "hint")) return "Maximum of the observations";
            return nullptr;
        case FIELD_mean:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "group")) return "statistical summary";
            if (!strcmp(propertyName, "hint")) return "Mean of the observations";
            return nullptr;
        case FIELD_stddev:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "group")) return "statistical summary";
            if (!strcmp(propertyName, "hint")) return "Standard deviation of the observations";
            return nullptr;
        case FIELD_variance:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "group")) return "statistical summary";
            if (!strcmp(propertyName, "hint")) return "Variance of the observations";
            return nullptr;
        default: return nullptr;
    }
}

int cStatisticDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cStatistic *pp = omnetpp::fromAnyPtr<cStatistic>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cStatisticDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cStatistic *pp = omnetpp::fromAnyPtr<cStatistic>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cStatistic'", field);
    }
}

const char *cStatisticDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cStatistic *pp = omnetpp::fromAnyPtr<cStatistic>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cStatisticDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cStatistic *pp = omnetpp::fromAnyPtr<cStatistic>(object); (void)pp;
    switch (field) {
        case FIELD_count: return long2string(pp->getCount());
        case FIELD_sumWeights: return double2string(pp->getSumWeights());
        case FIELD_min: return double2string(pp->getMin());
        case FIELD_max: return double2string(pp->getMax());
        case FIELD_mean: return double2string(pp->getMean());
        case FIELD_stddev: return double2string(pp->getStddev());
        case FIELD_variance: return double2string(pp->getVariance());
        default: return "";
    }
}

void cStatisticDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cStatistic *pp = omnetpp::fromAnyPtr<cStatistic>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cStatistic'", field);
    }
}

omnetpp::cValue cStatisticDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cStatistic *pp = omnetpp::fromAnyPtr<cStatistic>(object); (void)pp;
    switch (field) {
        case FIELD_count: return (omnetpp::intval_t)(pp->getCount());
        case FIELD_sumWeights: return pp->getSumWeights();
        case FIELD_min: return pp->getMin();
        case FIELD_max: return pp->getMax();
        case FIELD_mean: return pp->getMean();
        case FIELD_stddev: return pp->getStddev();
        case FIELD_variance: return pp->getVariance();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cStatistic' as cValue -- field index out of range?", field);
    }
}

void cStatisticDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cStatistic *pp = omnetpp::fromAnyPtr<cStatistic>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cStatistic'", field);
    }
}

const char *cStatisticDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cStatisticDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cStatistic *pp = omnetpp::fromAnyPtr<cStatistic>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cStatisticDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cStatistic *pp = omnetpp::fromAnyPtr<cStatistic>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cStatistic'", field);
    }
}

class cStdDevDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cStdDevDescriptor();
    virtual ~cStdDevDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cStdDevDescriptor)

cStdDevDescriptor::cStdDevDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cStdDev)), "omnetpp::cStatistic")
{
    propertyNames = nullptr;
}

cStdDevDescriptor::~cStdDevDescriptor()
{
    delete[] propertyNames;
}

bool cStdDevDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cStdDev *>(obj)!=nullptr;
}

const char **cStdDevDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cStdDevDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cStdDevDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cStdDevDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cStdDevDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cStdDevDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cStdDevDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cStdDevDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cStdDevDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cStdDevDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cStdDev *pp = omnetpp::fromAnyPtr<cStdDev>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cStdDevDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cStdDev *pp = omnetpp::fromAnyPtr<cStdDev>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cStdDev'", field);
    }
}

const char *cStdDevDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cStdDev *pp = omnetpp::fromAnyPtr<cStdDev>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cStdDevDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cStdDev *pp = omnetpp::fromAnyPtr<cStdDev>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cStdDevDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cStdDev *pp = omnetpp::fromAnyPtr<cStdDev>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cStdDev'", field);
    }
}

omnetpp::cValue cStdDevDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cStdDev *pp = omnetpp::fromAnyPtr<cStdDev>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cStdDev' as cValue -- field index out of range?", field);
    }
}

void cStdDevDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cStdDev *pp = omnetpp::fromAnyPtr<cStdDev>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cStdDev'", field);
    }
}

const char *cStdDevDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cStdDevDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cStdDev *pp = omnetpp::fromAnyPtr<cStdDev>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cStdDevDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cStdDev *pp = omnetpp::fromAnyPtr<cStdDev>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cStdDev'", field);
    }
}

class cAbstractHistogramDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_binsAlreadySetUp,
        FIELD_underflowSumWeights,
        FIELD_overflowSumWeights,
        FIELD_numBins,
        FIELD_binInfo,
    };
  public:
    cAbstractHistogramDescriptor();
    virtual ~cAbstractHistogramDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cAbstractHistogramDescriptor)

cAbstractHistogramDescriptor::cAbstractHistogramDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cAbstractHistogram)), "omnetpp::cStdDev")
{
    propertyNames = nullptr;
}

cAbstractHistogramDescriptor::~cAbstractHistogramDescriptor()
{
    delete[] propertyNames;
}

bool cAbstractHistogramDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cAbstractHistogram *>(obj)!=nullptr;
}

const char **cAbstractHistogramDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cAbstractHistogramDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cAbstractHistogramDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 5+base->getFieldCount() : 5;
}

unsigned int cAbstractHistogramDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_binsAlreadySetUp
        0,    // FIELD_underflowSumWeights
        0,    // FIELD_overflowSumWeights
        0,    // FIELD_numBins
        FD_ISARRAY,    // FIELD_binInfo
    };
    return (field >= 0 && field < 5) ? fieldTypeFlags[field] : 0;
}

const char *cAbstractHistogramDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "binsAlreadySetUp",
        "underflowSumWeights",
        "overflowSumWeights",
        "numBins",
        "binInfo",
    };
    return (field >= 0 && field < 5) ? fieldNames[field] : nullptr;
}

int cAbstractHistogramDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "binsAlreadySetUp") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "underflowSumWeights") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "overflowSumWeights") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "numBins") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "binInfo") == 0) return baseIndex + 4;
    return base ? base->findField(fieldName) : -1;
}

const char *cAbstractHistogramDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "bool",    // FIELD_binsAlreadySetUp
        "double",    // FIELD_underflowSumWeights
        "double",    // FIELD_overflowSumWeights
        "int",    // FIELD_numBins
        "omnetpp::cAbstractHistogram::Bin",    // FIELD_binInfo
    };
    return (field >= 0 && field < 5) ? fieldTypeStrings[field] : nullptr;
}

const char **cAbstractHistogramDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_binsAlreadySetUp: {
            static const char *names[] = { "readonly", "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_underflowSumWeights: {
            static const char *names[] = { "readonly", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_overflowSumWeights: {
            static const char *names[] = { "readonly", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_numBins: {
            static const char *names[] = { "readonly", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_binInfo: {
            static const char *names[] = { "readonly", "getter", "sizeGetter", "group", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cAbstractHistogramDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_binsAlreadySetUp:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "getter")) return "binsAlreadySetUp";
            if (!strcmp(propertyName, "group")) return "histogram";
            if (!strcmp(propertyName, "hint")) return "If false, the object is still collecting initial observations to gather information for laying out histogram bins";
            return nullptr;
        case FIELD_underflowSumWeights:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "group")) return "histogram";
            if (!strcmp(propertyName, "hint")) return "Total weight of observations above the last histogram bin";
            return nullptr;
        case FIELD_overflowSumWeights:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "group")) return "histogram";
            if (!strcmp(propertyName, "hint")) return "Total weight of observations above the last histogram bin";
            return nullptr;
        case FIELD_numBins:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "group")) return "histogram";
            if (!strcmp(propertyName, "hint")) return "Number of bins in the histogram";
            return nullptr;
        case FIELD_binInfo:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "getter")) return "internalGetBinInfo";
            if (!strcmp(propertyName, "sizeGetter")) return "getNumBins";
            if (!strcmp(propertyName, "group")) return "histogram";
            if (!strcmp(propertyName, "hint")) return "Histogram bin bounds, observation count in the bin, and density estimate in the bin";
            return nullptr;
        default: return nullptr;
    }
}

int cAbstractHistogramDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cAbstractHistogram *pp = omnetpp::fromAnyPtr<cAbstractHistogram>(object); (void)pp;
    switch (field) {
        case FIELD_binInfo: return pp->getNumBins();
        default: return 0;
    }
}

void cAbstractHistogramDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractHistogram *pp = omnetpp::fromAnyPtr<cAbstractHistogram>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cAbstractHistogram'", field);
    }
}

const char *cAbstractHistogramDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cAbstractHistogram *pp = omnetpp::fromAnyPtr<cAbstractHistogram>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cAbstractHistogramDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cAbstractHistogram *pp = omnetpp::fromAnyPtr<cAbstractHistogram>(object); (void)pp;
    switch (field) {
        case FIELD_binsAlreadySetUp: return bool2string(pp->binsAlreadySetUp());
        case FIELD_underflowSumWeights: return double2string(pp->getUnderflowSumWeights());
        case FIELD_overflowSumWeights: return double2string(pp->getOverflowSumWeights());
        case FIELD_numBins: return long2string(pp->getNumBins());
        case FIELD_binInfo: return pp->internalGetBinInfo(i).str();
        default: return "";
    }
}

void cAbstractHistogramDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractHistogram *pp = omnetpp::fromAnyPtr<cAbstractHistogram>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAbstractHistogram'", field);
    }
}

omnetpp::cValue cAbstractHistogramDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cAbstractHistogram *pp = omnetpp::fromAnyPtr<cAbstractHistogram>(object); (void)pp;
    switch (field) {
        case FIELD_binsAlreadySetUp: return pp->binsAlreadySetUp();
        case FIELD_underflowSumWeights: return pp->getUnderflowSumWeights();
        case FIELD_overflowSumWeights: return pp->getOverflowSumWeights();
        case FIELD_numBins: return pp->getNumBins();
        case FIELD_binInfo: return pp->internalGetBinInfo(i).str();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cAbstractHistogram' as cValue -- field index out of range?", field);
    }
}

void cAbstractHistogramDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractHistogram *pp = omnetpp::fromAnyPtr<cAbstractHistogram>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAbstractHistogram'", field);
    }
}

const char *cAbstractHistogramDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cAbstractHistogramDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cAbstractHistogram *pp = omnetpp::fromAnyPtr<cAbstractHistogram>(object); (void)pp;
    switch (field) {
        case FIELD_binInfo: return omnetpp::toAnyPtr(&pp->internalGetBinInfo(i)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cAbstractHistogramDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractHistogram *pp = omnetpp::fromAnyPtr<cAbstractHistogram>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAbstractHistogram'", field);
    }
}

class cHistogramDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_strategy,
    };
  public:
    cHistogramDescriptor();
    virtual ~cHistogramDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cHistogramDescriptor)

cHistogramDescriptor::cHistogramDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cHistogram)), "omnetpp::cAbstractHistogram")
{
    propertyNames = nullptr;
}

cHistogramDescriptor::~cHistogramDescriptor()
{
    delete[] propertyNames;
}

bool cHistogramDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cHistogram *>(obj)!=nullptr;
}

const char **cHistogramDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cHistogramDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cHistogramDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cHistogramDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISREPLACEABLE,    // FIELD_strategy
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cHistogramDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "strategy",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cHistogramDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "strategy") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cHistogramDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cIHistogramStrategy",    // FIELD_strategy
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cHistogramDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_strategy: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cHistogramDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_strategy:
            if (!strcmp(propertyName, "group")) return "histogram";
            if (!strcmp(propertyName, "hint")) return "Determines when and how bins are created";
            return nullptr;
        default: return nullptr;
    }
}

int cHistogramDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cHistogram *pp = omnetpp::fromAnyPtr<cHistogram>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cHistogramDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cHistogram *pp = omnetpp::fromAnyPtr<cHistogram>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cHistogram'", field);
    }
}

const char *cHistogramDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cHistogram *pp = omnetpp::fromAnyPtr<cHistogram>(object); (void)pp;
    switch (field) {
        case FIELD_strategy: { const cIHistogramStrategy * value = pp->getStrategy(); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cHistogramDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cHistogram *pp = omnetpp::fromAnyPtr<cHistogram>(object); (void)pp;
    switch (field) {
        case FIELD_strategy: { auto obj = pp->getStrategy(); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cHistogramDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cHistogram *pp = omnetpp::fromAnyPtr<cHistogram>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cHistogram'", field);
    }
}

omnetpp::cValue cHistogramDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cHistogram *pp = omnetpp::fromAnyPtr<cHistogram>(object); (void)pp;
    switch (field) {
        case FIELD_strategy: return omnetpp::toAnyPtr(pp->getStrategy()); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cHistogram' as cValue -- field index out of range?", field);
    }
}

void cHistogramDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cHistogram *pp = omnetpp::fromAnyPtr<cHistogram>(object); (void)pp;
    switch (field) {
        case FIELD_strategy: pp->setStrategy(omnetpp::fromAnyPtr<cIHistogramStrategy>(value.pointerValue())); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cHistogram'", field);
    }
}

const char *cHistogramDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_strategy: return omnetpp::opp_typename(typeid(cIHistogramStrategy));
        default: return nullptr;
    };
}

omnetpp::any_ptr cHistogramDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cHistogram *pp = omnetpp::fromAnyPtr<cHistogram>(object); (void)pp;
    switch (field) {
        case FIELD_strategy: return omnetpp::toAnyPtr(pp->getStrategy()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cHistogramDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cHistogram *pp = omnetpp::fromAnyPtr<cHistogram>(object); (void)pp;
    switch (field) {
        case FIELD_strategy: pp->setStrategy(omnetpp::fromAnyPtr<cIHistogramStrategy>(ptr)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cHistogram'", field);
    }
}

class cIHistogramStrategyDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cIHistogramStrategyDescriptor();
    virtual ~cIHistogramStrategyDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cIHistogramStrategyDescriptor)

cIHistogramStrategyDescriptor::cIHistogramStrategyDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cIHistogramStrategy)), "omnetpp::cObject")
{
    propertyNames = nullptr;
}

cIHistogramStrategyDescriptor::~cIHistogramStrategyDescriptor()
{
    delete[] propertyNames;
}

bool cIHistogramStrategyDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cIHistogramStrategy *>(obj)!=nullptr;
}

const char **cIHistogramStrategyDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cIHistogramStrategyDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cIHistogramStrategyDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cIHistogramStrategyDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cIHistogramStrategyDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cIHistogramStrategyDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cIHistogramStrategyDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cIHistogramStrategyDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cIHistogramStrategyDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cIHistogramStrategyDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cIHistogramStrategy *pp = omnetpp::fromAnyPtr<cIHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cIHistogramStrategyDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cIHistogramStrategy *pp = omnetpp::fromAnyPtr<cIHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cIHistogramStrategy'", field);
    }
}

const char *cIHistogramStrategyDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cIHistogramStrategy *pp = omnetpp::fromAnyPtr<cIHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cIHistogramStrategyDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cIHistogramStrategy *pp = omnetpp::fromAnyPtr<cIHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cIHistogramStrategyDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cIHistogramStrategy *pp = omnetpp::fromAnyPtr<cIHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cIHistogramStrategy'", field);
    }
}

omnetpp::cValue cIHistogramStrategyDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cIHistogramStrategy *pp = omnetpp::fromAnyPtr<cIHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cIHistogramStrategy' as cValue -- field index out of range?", field);
    }
}

void cIHistogramStrategyDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cIHistogramStrategy *pp = omnetpp::fromAnyPtr<cIHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cIHistogramStrategy'", field);
    }
}

const char *cIHistogramStrategyDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cIHistogramStrategyDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cIHistogramStrategy *pp = omnetpp::fromAnyPtr<cIHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cIHistogramStrategyDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cIHistogramStrategy *pp = omnetpp::fromAnyPtr<cIHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cIHistogramStrategy'", field);
    }
}

class cFixedRangeHistogramStrategyDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_lowerLimit,
        FIELD_upperLimit,
        FIELD_binSize,
        FIELD_mode,
    };
  public:
    cFixedRangeHistogramStrategyDescriptor();
    virtual ~cFixedRangeHistogramStrategyDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cFixedRangeHistogramStrategyDescriptor)

cFixedRangeHistogramStrategyDescriptor::cFixedRangeHistogramStrategyDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cFixedRangeHistogramStrategy)), "omnetpp::cIHistogramStrategy")
{
    propertyNames = nullptr;
}

cFixedRangeHistogramStrategyDescriptor::~cFixedRangeHistogramStrategyDescriptor()
{
    delete[] propertyNames;
}

bool cFixedRangeHistogramStrategyDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cFixedRangeHistogramStrategy *>(obj)!=nullptr;
}

const char **cFixedRangeHistogramStrategyDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cFixedRangeHistogramStrategyDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cFixedRangeHistogramStrategyDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 4+base->getFieldCount() : 4;
}

unsigned int cFixedRangeHistogramStrategyDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_lowerLimit
        FD_ISEDITABLE,    // FIELD_upperLimit
        FD_ISEDITABLE,    // FIELD_binSize
        FD_ISEDITABLE,    // FIELD_mode
    };
    return (field >= 0 && field < 4) ? fieldTypeFlags[field] : 0;
}

const char *cFixedRangeHistogramStrategyDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "lowerLimit",
        "upperLimit",
        "binSize",
        "mode",
    };
    return (field >= 0 && field < 4) ? fieldNames[field] : nullptr;
}

int cFixedRangeHistogramStrategyDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "lowerLimit") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "upperLimit") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "binSize") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "mode") == 0) return baseIndex + 3;
    return base ? base->findField(fieldName) : -1;
}

const char *cFixedRangeHistogramStrategyDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_lowerLimit
        "double",    // FIELD_upperLimit
        "double",    // FIELD_binSize
        "int",    // FIELD_mode
    };
    return (field >= 0 && field < 4) ? fieldTypeStrings[field] : nullptr;
}

const char **cFixedRangeHistogramStrategyDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_lowerLimit: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_upperLimit: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_mode: {
            static const char *names[] = { "enum", "enum",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cFixedRangeHistogramStrategyDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_lowerLimit:
            if (!strcmp(propertyName, "hint")) return "Histogram range lower endpoint";
            return nullptr;
        case FIELD_upperLimit:
            if (!strcmp(propertyName, "hint")) return "Histogram range upper endpoint";
            return nullptr;
        case FIELD_mode:
            if (!strcmp(propertyName, "enum")) return "cHistogram::Mode";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cHistogram::Mode";
            return nullptr;
        default: return nullptr;
    }
}

int cFixedRangeHistogramStrategyDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cFixedRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cFixedRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cFixedRangeHistogramStrategyDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cFixedRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cFixedRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cFixedRangeHistogramStrategy'", field);
    }
}

const char *cFixedRangeHistogramStrategyDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cFixedRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cFixedRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cFixedRangeHistogramStrategyDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cFixedRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cFixedRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        case FIELD_lowerLimit: return double2string(pp->getLowerLimit());
        case FIELD_upperLimit: return double2string(pp->getUpperLimit());
        case FIELD_binSize: return double2string(pp->getBinSize());
        case FIELD_mode: return enum2string(pp->getMode(), "omnetpp::cHistogram::Mode");
        default: return "";
    }
}

void cFixedRangeHistogramStrategyDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cFixedRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cFixedRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        case FIELD_lowerLimit: pp->setLowerLimit(string2double(value)); break;
        case FIELD_upperLimit: pp->setUpperLimit(string2double(value)); break;
        case FIELD_binSize: pp->setBinSize(string2double(value)); break;
        case FIELD_mode: pp->setMode((omnetpp::cHistogram::Mode)string2enum(value, "omnetpp::cHistogram::Mode")); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cFixedRangeHistogramStrategy'", field);
    }
}

omnetpp::cValue cFixedRangeHistogramStrategyDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cFixedRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cFixedRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        case FIELD_lowerLimit: return pp->getLowerLimit();
        case FIELD_upperLimit: return pp->getUpperLimit();
        case FIELD_binSize: return pp->getBinSize();
        case FIELD_mode: return pp->getMode();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cFixedRangeHistogramStrategy' as cValue -- field index out of range?", field);
    }
}

void cFixedRangeHistogramStrategyDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cFixedRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cFixedRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        case FIELD_lowerLimit: pp->setLowerLimit(value.doubleValue()); break;
        case FIELD_upperLimit: pp->setUpperLimit(value.doubleValue()); break;
        case FIELD_binSize: pp->setBinSize(value.doubleValue()); break;
        case FIELD_mode: pp->setMode((omnetpp::cHistogram::Mode)value.intValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cFixedRangeHistogramStrategy'", field);
    }
}

const char *cFixedRangeHistogramStrategyDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cFixedRangeHistogramStrategyDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cFixedRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cFixedRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cFixedRangeHistogramStrategyDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cFixedRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cFixedRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cFixedRangeHistogramStrategy'", field);
    }
}

class cPrecollectionBasedHistogramStrategyDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_numToPrecollect,
        FIELD_numToCollate,
        FIELD_rangeUnchangedThreshold,
    };
  public:
    cPrecollectionBasedHistogramStrategyDescriptor();
    virtual ~cPrecollectionBasedHistogramStrategyDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cPrecollectionBasedHistogramStrategyDescriptor)

cPrecollectionBasedHistogramStrategyDescriptor::cPrecollectionBasedHistogramStrategyDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cPrecollectionBasedHistogramStrategy)), "omnetpp::cIHistogramStrategy")
{
    propertyNames = nullptr;
}

cPrecollectionBasedHistogramStrategyDescriptor::~cPrecollectionBasedHistogramStrategyDescriptor()
{
    delete[] propertyNames;
}

bool cPrecollectionBasedHistogramStrategyDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cPrecollectionBasedHistogramStrategy *>(obj)!=nullptr;
}

const char **cPrecollectionBasedHistogramStrategyDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cPrecollectionBasedHistogramStrategyDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cPrecollectionBasedHistogramStrategyDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 3+base->getFieldCount() : 3;
}

unsigned int cPrecollectionBasedHistogramStrategyDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_numToPrecollect
        FD_ISEDITABLE,    // FIELD_numToCollate
        FD_ISEDITABLE,    // FIELD_rangeUnchangedThreshold
    };
    return (field >= 0 && field < 3) ? fieldTypeFlags[field] : 0;
}

const char *cPrecollectionBasedHistogramStrategyDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "numToPrecollect",
        "numToCollate",
        "rangeUnchangedThreshold",
    };
    return (field >= 0 && field < 3) ? fieldNames[field] : nullptr;
}

int cPrecollectionBasedHistogramStrategyDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "numToPrecollect") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "numToCollate") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "rangeUnchangedThreshold") == 0) return baseIndex + 2;
    return base ? base->findField(fieldName) : -1;
}

const char *cPrecollectionBasedHistogramStrategyDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "int",    // FIELD_numToPrecollect
        "int",    // FIELD_numToCollate
        "int",    // FIELD_rangeUnchangedThreshold
    };
    return (field >= 0 && field < 3) ? fieldTypeStrings[field] : nullptr;
}

const char **cPrecollectionBasedHistogramStrategyDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cPrecollectionBasedHistogramStrategyDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cPrecollectionBasedHistogramStrategyDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cPrecollectionBasedHistogramStrategy *pp = omnetpp::fromAnyPtr<cPrecollectionBasedHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cPrecollectionBasedHistogramStrategyDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cPrecollectionBasedHistogramStrategy *pp = omnetpp::fromAnyPtr<cPrecollectionBasedHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cPrecollectionBasedHistogramStrategy'", field);
    }
}

const char *cPrecollectionBasedHistogramStrategyDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cPrecollectionBasedHistogramStrategy *pp = omnetpp::fromAnyPtr<cPrecollectionBasedHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cPrecollectionBasedHistogramStrategyDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cPrecollectionBasedHistogramStrategy *pp = omnetpp::fromAnyPtr<cPrecollectionBasedHistogramStrategy>(object); (void)pp;
    switch (field) {
        case FIELD_numToPrecollect: return long2string(pp->getNumToPrecollect());
        case FIELD_numToCollate: return long2string(pp->getNumToCollate());
        case FIELD_rangeUnchangedThreshold: return long2string(pp->getRangeUnchangedThreshold());
        default: return "";
    }
}

void cPrecollectionBasedHistogramStrategyDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPrecollectionBasedHistogramStrategy *pp = omnetpp::fromAnyPtr<cPrecollectionBasedHistogramStrategy>(object); (void)pp;
    switch (field) {
        case FIELD_numToPrecollect: pp->setNumToPrecollect(string2long(value)); break;
        case FIELD_numToCollate: pp->setNumToCollate(string2long(value)); break;
        case FIELD_rangeUnchangedThreshold: pp->setRangeUnchangedThreshold(string2long(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPrecollectionBasedHistogramStrategy'", field);
    }
}

omnetpp::cValue cPrecollectionBasedHistogramStrategyDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cPrecollectionBasedHistogramStrategy *pp = omnetpp::fromAnyPtr<cPrecollectionBasedHistogramStrategy>(object); (void)pp;
    switch (field) {
        case FIELD_numToPrecollect: return pp->getNumToPrecollect();
        case FIELD_numToCollate: return pp->getNumToCollate();
        case FIELD_rangeUnchangedThreshold: return pp->getRangeUnchangedThreshold();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cPrecollectionBasedHistogramStrategy' as cValue -- field index out of range?", field);
    }
}

void cPrecollectionBasedHistogramStrategyDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPrecollectionBasedHistogramStrategy *pp = omnetpp::fromAnyPtr<cPrecollectionBasedHistogramStrategy>(object); (void)pp;
    switch (field) {
        case FIELD_numToPrecollect: pp->setNumToPrecollect(omnetpp::checked_int_cast<int>(value.intValue())); break;
        case FIELD_numToCollate: pp->setNumToCollate(omnetpp::checked_int_cast<int>(value.intValue())); break;
        case FIELD_rangeUnchangedThreshold: pp->setRangeUnchangedThreshold(omnetpp::checked_int_cast<int>(value.intValue())); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPrecollectionBasedHistogramStrategy'", field);
    }
}

const char *cPrecollectionBasedHistogramStrategyDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cPrecollectionBasedHistogramStrategyDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cPrecollectionBasedHistogramStrategy *pp = omnetpp::fromAnyPtr<cPrecollectionBasedHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cPrecollectionBasedHistogramStrategyDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cPrecollectionBasedHistogramStrategy *pp = omnetpp::fromAnyPtr<cPrecollectionBasedHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPrecollectionBasedHistogramStrategy'", field);
    }
}

class cDefaultHistogramStrategyDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_numBinsHint,
    };
  public:
    cDefaultHistogramStrategyDescriptor();
    virtual ~cDefaultHistogramStrategyDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cDefaultHistogramStrategyDescriptor)

cDefaultHistogramStrategyDescriptor::cDefaultHistogramStrategyDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cDefaultHistogramStrategy)), "omnetpp::cPrecollectionBasedHistogramStrategy")
{
    propertyNames = nullptr;
}

cDefaultHistogramStrategyDescriptor::~cDefaultHistogramStrategyDescriptor()
{
    delete[] propertyNames;
}

bool cDefaultHistogramStrategyDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cDefaultHistogramStrategy *>(obj)!=nullptr;
}

const char **cDefaultHistogramStrategyDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cDefaultHistogramStrategyDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cDefaultHistogramStrategyDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cDefaultHistogramStrategyDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_numBinsHint
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cDefaultHistogramStrategyDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "numBinsHint",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cDefaultHistogramStrategyDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "numBinsHint") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cDefaultHistogramStrategyDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "int",    // FIELD_numBinsHint
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cDefaultHistogramStrategyDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_numBinsHint: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cDefaultHistogramStrategyDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_numBinsHint:
            if (!strcmp(propertyName, "hint")) return "Desired number of bins";
            return nullptr;
        default: return nullptr;
    }
}

int cDefaultHistogramStrategyDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cDefaultHistogramStrategy *pp = omnetpp::fromAnyPtr<cDefaultHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cDefaultHistogramStrategyDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cDefaultHistogramStrategy *pp = omnetpp::fromAnyPtr<cDefaultHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cDefaultHistogramStrategy'", field);
    }
}

const char *cDefaultHistogramStrategyDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cDefaultHistogramStrategy *pp = omnetpp::fromAnyPtr<cDefaultHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cDefaultHistogramStrategyDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cDefaultHistogramStrategy *pp = omnetpp::fromAnyPtr<cDefaultHistogramStrategy>(object); (void)pp;
    switch (field) {
        case FIELD_numBinsHint: return long2string(pp->getNumBinsHint());
        default: return "";
    }
}

void cDefaultHistogramStrategyDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cDefaultHistogramStrategy *pp = omnetpp::fromAnyPtr<cDefaultHistogramStrategy>(object); (void)pp;
    switch (field) {
        case FIELD_numBinsHint: pp->setNumBinsHint(string2long(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cDefaultHistogramStrategy'", field);
    }
}

omnetpp::cValue cDefaultHistogramStrategyDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cDefaultHistogramStrategy *pp = omnetpp::fromAnyPtr<cDefaultHistogramStrategy>(object); (void)pp;
    switch (field) {
        case FIELD_numBinsHint: return pp->getNumBinsHint();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cDefaultHistogramStrategy' as cValue -- field index out of range?", field);
    }
}

void cDefaultHistogramStrategyDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cDefaultHistogramStrategy *pp = omnetpp::fromAnyPtr<cDefaultHistogramStrategy>(object); (void)pp;
    switch (field) {
        case FIELD_numBinsHint: pp->setNumBinsHint(omnetpp::checked_int_cast<int>(value.intValue())); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cDefaultHistogramStrategy'", field);
    }
}

const char *cDefaultHistogramStrategyDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cDefaultHistogramStrategyDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cDefaultHistogramStrategy *pp = omnetpp::fromAnyPtr<cDefaultHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cDefaultHistogramStrategyDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cDefaultHistogramStrategy *pp = omnetpp::fromAnyPtr<cDefaultHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cDefaultHistogramStrategy'", field);
    }
}

class cAutoRangeHistogramStrategyDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_lowerLimitHint,
        FIELD_upperLimitHint,
        FIELD_rangeExtensionFactor,
        FIELD_mode,
        FIELD_binSizeHint,
        FIELD_binSizeRounding,
        FIELD_numBinsHint,
        FIELD_autoExtend,
        FIELD_binMerging,
        FIELD_maxNumBins,
    };
  public:
    cAutoRangeHistogramStrategyDescriptor();
    virtual ~cAutoRangeHistogramStrategyDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cAutoRangeHistogramStrategyDescriptor)

cAutoRangeHistogramStrategyDescriptor::cAutoRangeHistogramStrategyDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cAutoRangeHistogramStrategy)), "omnetpp::cPrecollectionBasedHistogramStrategy")
{
    propertyNames = nullptr;
}

cAutoRangeHistogramStrategyDescriptor::~cAutoRangeHistogramStrategyDescriptor()
{
    delete[] propertyNames;
}

bool cAutoRangeHistogramStrategyDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cAutoRangeHistogramStrategy *>(obj)!=nullptr;
}

const char **cAutoRangeHistogramStrategyDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cAutoRangeHistogramStrategyDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cAutoRangeHistogramStrategyDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 10+base->getFieldCount() : 10;
}

unsigned int cAutoRangeHistogramStrategyDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_lowerLimitHint
        FD_ISEDITABLE,    // FIELD_upperLimitHint
        FD_ISEDITABLE,    // FIELD_rangeExtensionFactor
        FD_ISEDITABLE,    // FIELD_mode
        FD_ISEDITABLE,    // FIELD_binSizeHint
        FD_ISEDITABLE,    // FIELD_binSizeRounding
        FD_ISEDITABLE,    // FIELD_numBinsHint
        FD_ISEDITABLE,    // FIELD_autoExtend
        FD_ISEDITABLE,    // FIELD_binMerging
        FD_ISEDITABLE,    // FIELD_maxNumBins
    };
    return (field >= 0 && field < 10) ? fieldTypeFlags[field] : 0;
}

const char *cAutoRangeHistogramStrategyDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "lowerLimitHint",
        "upperLimitHint",
        "rangeExtensionFactor",
        "mode",
        "binSizeHint",
        "binSizeRounding",
        "numBinsHint",
        "autoExtend",
        "binMerging",
        "maxNumBins",
    };
    return (field >= 0 && field < 10) ? fieldNames[field] : nullptr;
}

int cAutoRangeHistogramStrategyDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "lowerLimitHint") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "upperLimitHint") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "rangeExtensionFactor") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "mode") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "binSizeHint") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "binSizeRounding") == 0) return baseIndex + 5;
    if (strcmp(fieldName, "numBinsHint") == 0) return baseIndex + 6;
    if (strcmp(fieldName, "autoExtend") == 0) return baseIndex + 7;
    if (strcmp(fieldName, "binMerging") == 0) return baseIndex + 8;
    if (strcmp(fieldName, "maxNumBins") == 0) return baseIndex + 9;
    return base ? base->findField(fieldName) : -1;
}

const char *cAutoRangeHistogramStrategyDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_lowerLimitHint
        "double",    // FIELD_upperLimitHint
        "double",    // FIELD_rangeExtensionFactor
        "int",    // FIELD_mode
        "double",    // FIELD_binSizeHint
        "bool",    // FIELD_binSizeRounding
        "int",    // FIELD_numBinsHint
        "bool",    // FIELD_autoExtend
        "bool",    // FIELD_binMerging
        "int",    // FIELD_maxNumBins
    };
    return (field >= 0 && field < 10) ? fieldTypeStrings[field] : nullptr;
}

const char **cAutoRangeHistogramStrategyDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_lowerLimitHint: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_upperLimitHint: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_mode: {
            static const char *names[] = { "enum", "enum",  nullptr };
            return names;
        }
        case FIELD_binSizeHint: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_numBinsHint: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cAutoRangeHistogramStrategyDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_lowerLimitHint:
            if (!strcmp(propertyName, "hint")) return "Histogram range lower endpoint";
            return nullptr;
        case FIELD_upperLimitHint:
            if (!strcmp(propertyName, "hint")) return "Histogram range upper endpoint";
            return nullptr;
        case FIELD_mode:
            if (!strcmp(propertyName, "enum")) return "cHistogram::Mode";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cHistogram::Mode";
            return nullptr;
        case FIELD_binSizeHint:
            if (!strcmp(propertyName, "hint")) return "Requested bin size";
            return nullptr;
        case FIELD_numBinsHint:
            if (!strcmp(propertyName, "hint")) return "Desired number of bins";
            return nullptr;
        default: return nullptr;
    }
}

int cAutoRangeHistogramStrategyDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cAutoRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cAutoRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cAutoRangeHistogramStrategyDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cAutoRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cAutoRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cAutoRangeHistogramStrategy'", field);
    }
}

const char *cAutoRangeHistogramStrategyDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cAutoRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cAutoRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cAutoRangeHistogramStrategyDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cAutoRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cAutoRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        case FIELD_lowerLimitHint: return double2string(pp->getLowerLimitHint());
        case FIELD_upperLimitHint: return double2string(pp->getUpperLimitHint());
        case FIELD_rangeExtensionFactor: return double2string(pp->getRangeExtensionFactor());
        case FIELD_mode: return enum2string(pp->getMode(), "omnetpp::cHistogram::Mode");
        case FIELD_binSizeHint: return double2string(pp->getBinSizeHint());
        case FIELD_binSizeRounding: return bool2string(pp->getBinSizeRounding());
        case FIELD_numBinsHint: return long2string(pp->getNumBinsHint());
        case FIELD_autoExtend: return bool2string(pp->getAutoExtend());
        case FIELD_binMerging: return bool2string(pp->getBinMerging());
        case FIELD_maxNumBins: return long2string(pp->getMaxNumBins());
        default: return "";
    }
}

void cAutoRangeHistogramStrategyDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cAutoRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cAutoRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        case FIELD_lowerLimitHint: pp->setLowerLimitHint(string2double(value)); break;
        case FIELD_upperLimitHint: pp->setUpperLimitHint(string2double(value)); break;
        case FIELD_rangeExtensionFactor: pp->setRangeExtensionFactor(string2double(value)); break;
        case FIELD_mode: pp->setMode((omnetpp::cHistogram::Mode)string2enum(value, "omnetpp::cHistogram::Mode")); break;
        case FIELD_binSizeHint: pp->setBinSizeHint(string2double(value)); break;
        case FIELD_binSizeRounding: pp->setBinSizeRounding(string2bool(value)); break;
        case FIELD_numBinsHint: pp->setNumBinsHint(string2long(value)); break;
        case FIELD_autoExtend: pp->setAutoExtend(string2bool(value)); break;
        case FIELD_binMerging: pp->setBinMerging(string2bool(value)); break;
        case FIELD_maxNumBins: pp->setMaxNumBins(string2long(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAutoRangeHistogramStrategy'", field);
    }
}

omnetpp::cValue cAutoRangeHistogramStrategyDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cAutoRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cAutoRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        case FIELD_lowerLimitHint: return pp->getLowerLimitHint();
        case FIELD_upperLimitHint: return pp->getUpperLimitHint();
        case FIELD_rangeExtensionFactor: return pp->getRangeExtensionFactor();
        case FIELD_mode: return pp->getMode();
        case FIELD_binSizeHint: return pp->getBinSizeHint();
        case FIELD_binSizeRounding: return pp->getBinSizeRounding();
        case FIELD_numBinsHint: return pp->getNumBinsHint();
        case FIELD_autoExtend: return pp->getAutoExtend();
        case FIELD_binMerging: return pp->getBinMerging();
        case FIELD_maxNumBins: return pp->getMaxNumBins();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cAutoRangeHistogramStrategy' as cValue -- field index out of range?", field);
    }
}

void cAutoRangeHistogramStrategyDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cAutoRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cAutoRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        case FIELD_lowerLimitHint: pp->setLowerLimitHint(value.doubleValue()); break;
        case FIELD_upperLimitHint: pp->setUpperLimitHint(value.doubleValue()); break;
        case FIELD_rangeExtensionFactor: pp->setRangeExtensionFactor(value.doubleValue()); break;
        case FIELD_mode: pp->setMode((omnetpp::cHistogram::Mode)value.intValue()); break;
        case FIELD_binSizeHint: pp->setBinSizeHint(value.doubleValue()); break;
        case FIELD_binSizeRounding: pp->setBinSizeRounding(value.boolValue()); break;
        case FIELD_numBinsHint: pp->setNumBinsHint(omnetpp::checked_int_cast<int>(value.intValue())); break;
        case FIELD_autoExtend: pp->setAutoExtend(value.boolValue()); break;
        case FIELD_binMerging: pp->setBinMerging(value.boolValue()); break;
        case FIELD_maxNumBins: pp->setMaxNumBins(omnetpp::checked_int_cast<int>(value.intValue())); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAutoRangeHistogramStrategy'", field);
    }
}

const char *cAutoRangeHistogramStrategyDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cAutoRangeHistogramStrategyDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cAutoRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cAutoRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cAutoRangeHistogramStrategyDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cAutoRangeHistogramStrategy *pp = omnetpp::fromAnyPtr<cAutoRangeHistogramStrategy>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAutoRangeHistogramStrategy'", field);
    }
}

class cPrecollectionBasedDensityEstDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cPrecollectionBasedDensityEstDescriptor();
    virtual ~cPrecollectionBasedDensityEstDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cPrecollectionBasedDensityEstDescriptor)

cPrecollectionBasedDensityEstDescriptor::cPrecollectionBasedDensityEstDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cPrecollectionBasedDensityEst)), "omnetpp::cAbstractHistogram")
{
    propertyNames = nullptr;
}

cPrecollectionBasedDensityEstDescriptor::~cPrecollectionBasedDensityEstDescriptor()
{
    delete[] propertyNames;
}

bool cPrecollectionBasedDensityEstDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cPrecollectionBasedDensityEst *>(obj)!=nullptr;
}

const char **cPrecollectionBasedDensityEstDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cPrecollectionBasedDensityEstDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cPrecollectionBasedDensityEstDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cPrecollectionBasedDensityEstDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cPrecollectionBasedDensityEstDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cPrecollectionBasedDensityEstDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cPrecollectionBasedDensityEstDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cPrecollectionBasedDensityEstDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cPrecollectionBasedDensityEstDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cPrecollectionBasedDensityEstDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cPrecollectionBasedDensityEst *pp = omnetpp::fromAnyPtr<cPrecollectionBasedDensityEst>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cPrecollectionBasedDensityEstDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cPrecollectionBasedDensityEst *pp = omnetpp::fromAnyPtr<cPrecollectionBasedDensityEst>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cPrecollectionBasedDensityEst'", field);
    }
}

const char *cPrecollectionBasedDensityEstDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cPrecollectionBasedDensityEst *pp = omnetpp::fromAnyPtr<cPrecollectionBasedDensityEst>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cPrecollectionBasedDensityEstDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cPrecollectionBasedDensityEst *pp = omnetpp::fromAnyPtr<cPrecollectionBasedDensityEst>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cPrecollectionBasedDensityEstDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPrecollectionBasedDensityEst *pp = omnetpp::fromAnyPtr<cPrecollectionBasedDensityEst>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPrecollectionBasedDensityEst'", field);
    }
}

omnetpp::cValue cPrecollectionBasedDensityEstDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cPrecollectionBasedDensityEst *pp = omnetpp::fromAnyPtr<cPrecollectionBasedDensityEst>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cPrecollectionBasedDensityEst' as cValue -- field index out of range?", field);
    }
}

void cPrecollectionBasedDensityEstDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPrecollectionBasedDensityEst *pp = omnetpp::fromAnyPtr<cPrecollectionBasedDensityEst>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPrecollectionBasedDensityEst'", field);
    }
}

const char *cPrecollectionBasedDensityEstDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cPrecollectionBasedDensityEstDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cPrecollectionBasedDensityEst *pp = omnetpp::fromAnyPtr<cPrecollectionBasedDensityEst>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cPrecollectionBasedDensityEstDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cPrecollectionBasedDensityEst *pp = omnetpp::fromAnyPtr<cPrecollectionBasedDensityEst>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPrecollectionBasedDensityEst'", field);
    }
}

class cKSplitDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cKSplitDescriptor();
    virtual ~cKSplitDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cKSplitDescriptor)

cKSplitDescriptor::cKSplitDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cKSplit)), "omnetpp::cPrecollectionBasedDensityEst")
{
    propertyNames = nullptr;
}

cKSplitDescriptor::~cKSplitDescriptor()
{
    delete[] propertyNames;
}

bool cKSplitDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cKSplit *>(obj)!=nullptr;
}

const char **cKSplitDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cKSplitDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cKSplitDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cKSplitDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cKSplitDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cKSplitDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cKSplitDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cKSplitDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cKSplitDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cKSplitDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cKSplit *pp = omnetpp::fromAnyPtr<cKSplit>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cKSplitDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cKSplit *pp = omnetpp::fromAnyPtr<cKSplit>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cKSplit'", field);
    }
}

const char *cKSplitDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cKSplit *pp = omnetpp::fromAnyPtr<cKSplit>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cKSplitDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cKSplit *pp = omnetpp::fromAnyPtr<cKSplit>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cKSplitDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cKSplit *pp = omnetpp::fromAnyPtr<cKSplit>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cKSplit'", field);
    }
}

omnetpp::cValue cKSplitDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cKSplit *pp = omnetpp::fromAnyPtr<cKSplit>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cKSplit' as cValue -- field index out of range?", field);
    }
}

void cKSplitDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cKSplit *pp = omnetpp::fromAnyPtr<cKSplit>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cKSplit'", field);
    }
}

const char *cKSplitDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cKSplitDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cKSplit *pp = omnetpp::fromAnyPtr<cKSplit>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cKSplitDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cKSplit *pp = omnetpp::fromAnyPtr<cKSplit>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cKSplit'", field);
    }
}

class cPSquareDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cPSquareDescriptor();
    virtual ~cPSquareDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cPSquareDescriptor)

cPSquareDescriptor::cPSquareDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cPSquare)), "omnetpp::cAbstractHistogram")
{
    propertyNames = nullptr;
}

cPSquareDescriptor::~cPSquareDescriptor()
{
    delete[] propertyNames;
}

bool cPSquareDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cPSquare *>(obj)!=nullptr;
}

const char **cPSquareDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cPSquareDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cPSquareDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cPSquareDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cPSquareDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cPSquareDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cPSquareDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cPSquareDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cPSquareDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cPSquareDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cPSquare *pp = omnetpp::fromAnyPtr<cPSquare>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cPSquareDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cPSquare *pp = omnetpp::fromAnyPtr<cPSquare>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cPSquare'", field);
    }
}

const char *cPSquareDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cPSquare *pp = omnetpp::fromAnyPtr<cPSquare>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cPSquareDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cPSquare *pp = omnetpp::fromAnyPtr<cPSquare>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cPSquareDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPSquare *pp = omnetpp::fromAnyPtr<cPSquare>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPSquare'", field);
    }
}

omnetpp::cValue cPSquareDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cPSquare *pp = omnetpp::fromAnyPtr<cPSquare>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cPSquare' as cValue -- field index out of range?", field);
    }
}

void cPSquareDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPSquare *pp = omnetpp::fromAnyPtr<cPSquare>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPSquare'", field);
    }
}

const char *cPSquareDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cPSquareDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cPSquare *pp = omnetpp::fromAnyPtr<cPSquare>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cPSquareDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cPSquare *pp = omnetpp::fromAnyPtr<cPSquare>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPSquare'", field);
    }
}

class cExpressionDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_str,
    };
  public:
    cExpressionDescriptor();
    virtual ~cExpressionDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cExpressionDescriptor)

cExpressionDescriptor::cExpressionDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cExpression)), "omnetpp::cObject")
{
    propertyNames = nullptr;
}

cExpressionDescriptor::~cExpressionDescriptor()
{
    delete[] propertyNames;
}

bool cExpressionDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cExpression *>(obj)!=nullptr;
}

const char **cExpressionDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cExpressionDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cExpressionDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cExpressionDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_str
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cExpressionDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "str",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cExpressionDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "str") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cExpressionDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "string",    // FIELD_str
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cExpressionDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_str: {
            static const char *names[] = { "readonly", "getter",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cExpressionDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_str:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "getter")) return "str";
            return nullptr;
        default: return nullptr;
    }
}

int cExpressionDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cExpression *pp = omnetpp::fromAnyPtr<cExpression>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cExpressionDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cExpression *pp = omnetpp::fromAnyPtr<cExpression>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cExpression'", field);
    }
}

const char *cExpressionDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cExpression *pp = omnetpp::fromAnyPtr<cExpression>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cExpressionDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cExpression *pp = omnetpp::fromAnyPtr<cExpression>(object); (void)pp;
    switch (field) {
        case FIELD_str: return oppstring2string(pp->str());
        default: return "";
    }
}

void cExpressionDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cExpression *pp = omnetpp::fromAnyPtr<cExpression>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cExpression'", field);
    }
}

omnetpp::cValue cExpressionDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cExpression *pp = omnetpp::fromAnyPtr<cExpression>(object); (void)pp;
    switch (field) {
        case FIELD_str: return pp->str();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cExpression' as cValue -- field index out of range?", field);
    }
}

void cExpressionDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cExpression *pp = omnetpp::fromAnyPtr<cExpression>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cExpression'", field);
    }
}

const char *cExpressionDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cExpressionDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cExpression *pp = omnetpp::fromAnyPtr<cExpression>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cExpressionDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cExpression *pp = omnetpp::fromAnyPtr<cExpression>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cExpression'", field);
    }
}

class cValueDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_type,
        FIELD_containedObject,
    };
  public:
    cValueDescriptor();
    virtual ~cValueDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cValueDescriptor)

cValueDescriptor::cValueDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cValue)), "")
{
    propertyNames = nullptr;
}

cValueDescriptor::~cValueDescriptor()
{
    delete[] propertyNames;
}

bool cValueDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cValue *>(obj)!=nullptr;
}

const char **cValueDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "toString",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cValueDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "toString")) return ".str()";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cValueDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cValueDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_type
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_containedObject
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cValueDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "type",
        "containedObject",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cValueDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "type") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "containedObject") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cValueDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "int",    // FIELD_type
        "omnetpp::cObject",    // FIELD_containedObject
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cValueDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_type: {
            static const char *names[] = { "readonly", "enum", "hint", "enum",  nullptr };
            return names;
        }
        case FIELD_containedObject: {
            static const char *names[] = { "readonly", "getter", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cValueDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_type:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "enum")) return "cValue::Type";
            if (!strcmp(propertyName, "hint")) return "Value type";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cValue::Type";
            return nullptr;
        case FIELD_containedObject:
            if (!strcmp(propertyName, "readonly")) return "";
            if (!strcmp(propertyName, "getter")) return "cValue::getContainedObject($)";
            if (!strcmp(propertyName, "hint")) return "Only of type==OBJECT";
            return nullptr;
        default: return nullptr;
    }
}

int cValueDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cValue *pp = omnetpp::fromAnyPtr<cValue>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cValueDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cValue *pp = omnetpp::fromAnyPtr<cValue>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cValue'", field);
    }
}

const char *cValueDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cValue *pp = omnetpp::fromAnyPtr<cValue>(object); (void)pp;
    switch (field) {
        case FIELD_containedObject: { const cObject * value = cValue::getContainedObject(pp); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cValueDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cValue *pp = omnetpp::fromAnyPtr<cValue>(object); (void)pp;
    switch (field) {
        case FIELD_type: return enum2string(pp->getType(), "omnetpp::cValue::Type");
        case FIELD_containedObject: { auto obj = cValue::getContainedObject(pp); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cValueDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cValue *pp = omnetpp::fromAnyPtr<cValue>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cValue'", field);
    }
}

omnetpp::cValue cValueDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cValue *pp = omnetpp::fromAnyPtr<cValue>(object); (void)pp;
    switch (field) {
        case FIELD_type: return pp->getType();
        case FIELD_containedObject: return omnetpp::toAnyPtr(cValue::getContainedObject(pp)); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cValue' as cValue -- field index out of range?", field);
    }
}

void cValueDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cValue *pp = omnetpp::fromAnyPtr<cValue>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cValue'", field);
    }
}

const char *cValueDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_containedObject: return omnetpp::opp_typename(typeid(cObject));
        default: return nullptr;
    };
}

omnetpp::any_ptr cValueDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cValue *pp = omnetpp::fromAnyPtr<cValue>(object); (void)pp;
    switch (field) {
        case FIELD_containedObject: return omnetpp::toAnyPtr(cValue::getContainedObject(pp)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cValueDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cValue *pp = omnetpp::fromAnyPtr<cValue>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cValue'", field);
    }
}

class cValueArrayDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_elements,
    };
  public:
    cValueArrayDescriptor();
    virtual ~cValueArrayDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cValueArrayDescriptor)

cValueArrayDescriptor::cValueArrayDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cValueArray)), "omnetpp::cOwnedObject")
{
    propertyNames = nullptr;
}

cValueArrayDescriptor::~cValueArrayDescriptor()
{
    delete[] propertyNames;
}

bool cValueArrayDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cValueArray *>(obj)!=nullptr;
}

const char **cValueArrayDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cValueArrayDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cValueArrayDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cValueArrayDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISARRAY | FD_ISCOMPOUND,    // FIELD_elements
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cValueArrayDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "elements",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cValueArrayDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "elements") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cValueArrayDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cValue",    // FIELD_elements
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cValueArrayDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_elements: {
            static const char *names[] = { "getter", "setter", "sizeGetter",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cValueArrayDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_elements:
            if (!strcmp(propertyName, "getter")) return "get";
            if (!strcmp(propertyName, "setter")) return "set";
            if (!strcmp(propertyName, "sizeGetter")) return "size";
            return nullptr;
        default: return nullptr;
    }
}

int cValueArrayDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cValueArray *pp = omnetpp::fromAnyPtr<cValueArray>(object); (void)pp;
    switch (field) {
        case FIELD_elements: return pp->size();
        default: return 0;
    }
}

void cValueArrayDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cValueArray *pp = omnetpp::fromAnyPtr<cValueArray>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cValueArray'", field);
    }
}

const char *cValueArrayDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cValueArray *pp = omnetpp::fromAnyPtr<cValueArray>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cValueArrayDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cValueArray *pp = omnetpp::fromAnyPtr<cValueArray>(object); (void)pp;
    switch (field) {
        case FIELD_elements: return pp->get(i).str();
        default: return "";
    }
}

void cValueArrayDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cValueArray *pp = omnetpp::fromAnyPtr<cValueArray>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cValueArray'", field);
    }
}

omnetpp::cValue cValueArrayDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cValueArray *pp = omnetpp::fromAnyPtr<cValueArray>(object); (void)pp;
    switch (field) {
        case FIELD_elements: return omnetpp::toAnyPtr(&pp->get(i)); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cValueArray' as cValue -- field index out of range?", field);
    }
}

void cValueArrayDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cValueArray *pp = omnetpp::fromAnyPtr<cValueArray>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cValueArray'", field);
    }
}

const char *cValueArrayDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_elements: return omnetpp::opp_typename(typeid(cValue));
        default: return nullptr;
    };
}

omnetpp::any_ptr cValueArrayDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cValueArray *pp = omnetpp::fromAnyPtr<cValueArray>(object); (void)pp;
    switch (field) {
        case FIELD_elements: return omnetpp::toAnyPtr(&pp->get(i)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cValueArrayDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cValueArray *pp = omnetpp::fromAnyPtr<cValueArray>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cValueArray'", field);
    }
}

class cValueMap__EntryDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_first,
        FIELD_second,
    };
  public:
    cValueMap__EntryDescriptor();
    virtual ~cValueMap__EntryDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cValueMap__EntryDescriptor)

cValueMap__EntryDescriptor::cValueMap__EntryDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cValueMap::Entry)), "")
{
    propertyNames = nullptr;
}

cValueMap__EntryDescriptor::~cValueMap__EntryDescriptor()
{
    delete[] propertyNames;
}

bool cValueMap__EntryDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cValueMap::Entry *>(obj)!=nullptr;
}

const char **cValueMap__EntryDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "toString",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cValueMap__EntryDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "toString")) return "cValueMap::entryToStr($)";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cValueMap__EntryDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cValueMap__EntryDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_first
        FD_ISCOMPOUND,    // FIELD_second
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cValueMap__EntryDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "first",
        "second",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cValueMap__EntryDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "first") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "second") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cValueMap__EntryDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "string",    // FIELD_first
        "omnetpp::cValue",    // FIELD_second
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cValueMap__EntryDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_first: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_second: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cValueMap__EntryDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_first:
            if (!strcmp(propertyName, "hint")) return "Key";
            return nullptr;
        case FIELD_second:
            if (!strcmp(propertyName, "hint")) return "Value";
            return nullptr;
        default: return nullptr;
    }
}

int cValueMap__EntryDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cValueMap::Entry *pp = omnetpp::fromAnyPtr<cValueMap::Entry>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cValueMap__EntryDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cValueMap::Entry *pp = omnetpp::fromAnyPtr<cValueMap::Entry>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cValueMap::Entry'", field);
    }
}

const char *cValueMap__EntryDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cValueMap::Entry *pp = omnetpp::fromAnyPtr<cValueMap::Entry>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cValueMap__EntryDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cValueMap::Entry *pp = omnetpp::fromAnyPtr<cValueMap::Entry>(object); (void)pp;
    switch (field) {
        case FIELD_first: return oppstring2string(pp->first);
        case FIELD_second: return pp->second.str();
        default: return "";
    }
}

void cValueMap__EntryDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cValueMap::Entry *pp = omnetpp::fromAnyPtr<cValueMap::Entry>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cValueMap::Entry'", field);
    }
}

omnetpp::cValue cValueMap__EntryDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cValueMap::Entry *pp = omnetpp::fromAnyPtr<cValueMap::Entry>(object); (void)pp;
    switch (field) {
        case FIELD_first: return pp->first;
        case FIELD_second: return omnetpp::toAnyPtr(&pp->second); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cValueMap::Entry' as cValue -- field index out of range?", field);
    }
}

void cValueMap__EntryDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cValueMap::Entry *pp = omnetpp::fromAnyPtr<cValueMap::Entry>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cValueMap::Entry'", field);
    }
}

const char *cValueMap__EntryDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_second: return omnetpp::opp_typename(typeid(cValue));
        default: return nullptr;
    };
}

omnetpp::any_ptr cValueMap__EntryDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cValueMap::Entry *pp = omnetpp::fromAnyPtr<cValueMap::Entry>(object); (void)pp;
    switch (field) {
        case FIELD_second: return omnetpp::toAnyPtr(&pp->second); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cValueMap__EntryDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cValueMap::Entry *pp = omnetpp::fromAnyPtr<cValueMap::Entry>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cValueMap::Entry'", field);
    }
}

class cValueMapDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_entries,
    };
  public:
    cValueMapDescriptor();
    virtual ~cValueMapDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cValueMapDescriptor)

cValueMapDescriptor::cValueMapDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cValueMap)), "omnetpp::cOwnedObject")
{
    propertyNames = nullptr;
}

cValueMapDescriptor::~cValueMapDescriptor()
{
    delete[] propertyNames;
}

bool cValueMapDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cValueMap *>(obj)!=nullptr;
}

const char **cValueMapDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cValueMapDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cValueMapDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cValueMapDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISARRAY | FD_ISCOMPOUND,    // FIELD_entries
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cValueMapDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "entries",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cValueMapDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "entries") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cValueMapDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cValueMap::Entry",    // FIELD_entries
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cValueMapDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_entries: {
            static const char *names[] = { "sizeGetter", "getter", "toValue",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cValueMapDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_entries:
            if (!strcmp(propertyName, "sizeGetter")) return "size";
            if (!strcmp(propertyName, "getter")) return "getEntry";
            if (!strcmp(propertyName, "toValue")) return "toAnyPtr(&($))";
            return nullptr;
        default: return nullptr;
    }
}

int cValueMapDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cValueMap *pp = omnetpp::fromAnyPtr<cValueMap>(object); (void)pp;
    switch (field) {
        case FIELD_entries: return pp->size();
        default: return 0;
    }
}

void cValueMapDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cValueMap *pp = omnetpp::fromAnyPtr<cValueMap>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cValueMap'", field);
    }
}

const char *cValueMapDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cValueMap *pp = omnetpp::fromAnyPtr<cValueMap>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cValueMapDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cValueMap *pp = omnetpp::fromAnyPtr<cValueMap>(object); (void)pp;
    switch (field) {
        case FIELD_entries: return cValueMap::entryToStr(pp->getEntry(i));
        default: return "";
    }
}

void cValueMapDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cValueMap *pp = omnetpp::fromAnyPtr<cValueMap>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cValueMap'", field);
    }
}

omnetpp::cValue cValueMapDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cValueMap *pp = omnetpp::fromAnyPtr<cValueMap>(object); (void)pp;
    switch (field) {
        case FIELD_entries: return toAnyPtr(&(pp->getEntry(i)));
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cValueMap' as cValue -- field index out of range?", field);
    }
}

void cValueMapDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cValueMap *pp = omnetpp::fromAnyPtr<cValueMap>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cValueMap'", field);
    }
}

const char *cValueMapDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_entries: return omnetpp::opp_typename(typeid(cValueMap::Entry));
        default: return nullptr;
    };
}

omnetpp::any_ptr cValueMapDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cValueMap *pp = omnetpp::fromAnyPtr<cValueMap>(object); (void)pp;
    switch (field) {
        case FIELD_entries: return omnetpp::toAnyPtr(&pp->getEntry(i)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cValueMapDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cValueMap *pp = omnetpp::fromAnyPtr<cValueMap>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cValueMap'", field);
    }
}

class cFSMDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_state,
        FIELD_stateName,
    };
  public:
    cFSMDescriptor();
    virtual ~cFSMDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cFSMDescriptor)

cFSMDescriptor::cFSMDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cFSM)), "omnetpp::cOwnedObject")
{
    propertyNames = nullptr;
}

cFSMDescriptor::~cFSMDescriptor()
{
    delete[] propertyNames;
}

bool cFSMDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cFSM *>(obj)!=nullptr;
}

const char **cFSMDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cFSMDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cFSMDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cFSMDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_state
        0,    // FIELD_stateName
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cFSMDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "state",
        "stateName",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cFSMDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "state") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "stateName") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cFSMDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "int",    // FIELD_state
        "string",    // FIELD_stateName
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cFSMDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_state: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_stateName: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cFSMDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_state:
            if (!strcmp(propertyName, "hint")) return "Numeric code of the state the FSM is currently in";
            return nullptr;
        case FIELD_stateName:
            if (!strcmp(propertyName, "hint")) return "Name of the current FSM state";
            return nullptr;
        default: return nullptr;
    }
}

int cFSMDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cFSM *pp = omnetpp::fromAnyPtr<cFSM>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cFSMDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cFSM *pp = omnetpp::fromAnyPtr<cFSM>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cFSM'", field);
    }
}

const char *cFSMDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cFSM *pp = omnetpp::fromAnyPtr<cFSM>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cFSMDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cFSM *pp = omnetpp::fromAnyPtr<cFSM>(object); (void)pp;
    switch (field) {
        case FIELD_state: return long2string(pp->getState());
        case FIELD_stateName: return oppstring2string(pp->getStateName());
        default: return "";
    }
}

void cFSMDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cFSM *pp = omnetpp::fromAnyPtr<cFSM>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cFSM'", field);
    }
}

omnetpp::cValue cFSMDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cFSM *pp = omnetpp::fromAnyPtr<cFSM>(object); (void)pp;
    switch (field) {
        case FIELD_state: return pp->getState();
        case FIELD_stateName: return pp->getStateName();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cFSM' as cValue -- field index out of range?", field);
    }
}

void cFSMDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cFSM *pp = omnetpp::fromAnyPtr<cFSM>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cFSM'", field);
    }
}

const char *cFSMDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cFSMDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cFSM *pp = omnetpp::fromAnyPtr<cFSM>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cFSMDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cFSM *pp = omnetpp::fromAnyPtr<cFSM>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cFSM'", field);
    }
}

class cNedMathFunctionDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_category,
        FIELD_description,
        FIELD_numArgs,
    };
  public:
    cNedMathFunctionDescriptor();
    virtual ~cNedMathFunctionDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cNedMathFunctionDescriptor)

cNedMathFunctionDescriptor::cNedMathFunctionDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cNedMathFunction)), "omnetpp::cNoncopyableOwnedObject")
{
    propertyNames = nullptr;
}

cNedMathFunctionDescriptor::~cNedMathFunctionDescriptor()
{
    delete[] propertyNames;
}

bool cNedMathFunctionDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cNedMathFunction *>(obj)!=nullptr;
}

const char **cNedMathFunctionDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cNedMathFunctionDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cNedMathFunctionDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 3+base->getFieldCount() : 3;
}

unsigned int cNedMathFunctionDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_category
        0,    // FIELD_description
        0,    // FIELD_numArgs
    };
    return (field >= 0 && field < 3) ? fieldTypeFlags[field] : 0;
}

const char *cNedMathFunctionDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "category",
        "description",
        "numArgs",
    };
    return (field >= 0 && field < 3) ? fieldNames[field] : nullptr;
}

int cNedMathFunctionDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "category") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "description") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "numArgs") == 0) return baseIndex + 2;
    return base ? base->findField(fieldName) : -1;
}

const char *cNedMathFunctionDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "string",    // FIELD_category
        "string",    // FIELD_description
        "int",    // FIELD_numArgs
    };
    return (field >= 0 && field < 3) ? fieldTypeStrings[field] : nullptr;
}

const char **cNedMathFunctionDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_category: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_numArgs: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cNedMathFunctionDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_category:
            if (!strcmp(propertyName, "hint")) return "Function category";
            return nullptr;
        case FIELD_numArgs:
            if (!strcmp(propertyName, "hint")) return "Number of \"double\" parameters this function takes";
            return nullptr;
        default: return nullptr;
    }
}

int cNedMathFunctionDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cNedMathFunction *pp = omnetpp::fromAnyPtr<cNedMathFunction>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cNedMathFunctionDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cNedMathFunction *pp = omnetpp::fromAnyPtr<cNedMathFunction>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cNedMathFunction'", field);
    }
}

const char *cNedMathFunctionDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cNedMathFunction *pp = omnetpp::fromAnyPtr<cNedMathFunction>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cNedMathFunctionDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cNedMathFunction *pp = omnetpp::fromAnyPtr<cNedMathFunction>(object); (void)pp;
    switch (field) {
        case FIELD_category: return oppstring2string(pp->getCategory());
        case FIELD_description: return oppstring2string(pp->getDescription());
        case FIELD_numArgs: return long2string(pp->getNumArgs());
        default: return "";
    }
}

void cNedMathFunctionDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cNedMathFunction *pp = omnetpp::fromAnyPtr<cNedMathFunction>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNedMathFunction'", field);
    }
}

omnetpp::cValue cNedMathFunctionDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cNedMathFunction *pp = omnetpp::fromAnyPtr<cNedMathFunction>(object); (void)pp;
    switch (field) {
        case FIELD_category: return pp->getCategory();
        case FIELD_description: return pp->getDescription();
        case FIELD_numArgs: return pp->getNumArgs();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cNedMathFunction' as cValue -- field index out of range?", field);
    }
}

void cNedMathFunctionDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cNedMathFunction *pp = omnetpp::fromAnyPtr<cNedMathFunction>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNedMathFunction'", field);
    }
}

const char *cNedMathFunctionDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cNedMathFunctionDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cNedMathFunction *pp = omnetpp::fromAnyPtr<cNedMathFunction>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cNedMathFunctionDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cNedMathFunction *pp = omnetpp::fromAnyPtr<cNedMathFunction>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNedMathFunction'", field);
    }
}

class cNedFunctionDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_signature,
        FIELD_category,
        FIELD_description,
        FIELD_returnType,
        FIELD_argType,
        FIELD_minArgs,
        FIELD_maxArgs,
    };
  public:
    cNedFunctionDescriptor();
    virtual ~cNedFunctionDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cNedFunctionDescriptor)

cNedFunctionDescriptor::cNedFunctionDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cNedFunction)), "omnetpp::cNoncopyableOwnedObject")
{
    propertyNames = nullptr;
}

cNedFunctionDescriptor::~cNedFunctionDescriptor()
{
    delete[] propertyNames;
}

bool cNedFunctionDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cNedFunction *>(obj)!=nullptr;
}

const char **cNedFunctionDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cNedFunctionDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cNedFunctionDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 7+base->getFieldCount() : 7;
}

unsigned int cNedFunctionDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_signature
        0,    // FIELD_category
        0,    // FIELD_description
        0,    // FIELD_returnType
        FD_ISARRAY,    // FIELD_argType
        0,    // FIELD_minArgs
        0,    // FIELD_maxArgs
    };
    return (field >= 0 && field < 7) ? fieldTypeFlags[field] : 0;
}

const char *cNedFunctionDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "signature",
        "category",
        "description",
        "returnType",
        "argType",
        "minArgs",
        "maxArgs",
    };
    return (field >= 0 && field < 7) ? fieldNames[field] : nullptr;
}

int cNedFunctionDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "signature") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "category") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "description") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "returnType") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "argType") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "minArgs") == 0) return baseIndex + 5;
    if (strcmp(fieldName, "maxArgs") == 0) return baseIndex + 6;
    return base ? base->findField(fieldName) : -1;
}

const char *cNedFunctionDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "string",    // FIELD_signature
        "string",    // FIELD_category
        "string",    // FIELD_description
        "char",    // FIELD_returnType
        "char",    // FIELD_argType
        "int",    // FIELD_minArgs
        "int",    // FIELD_maxArgs
    };
    return (field >= 0 && field < 7) ? fieldTypeStrings[field] : nullptr;
}

const char **cNedFunctionDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_signature: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_category: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_argType: {
            static const char *names[] = { "sizeGetter",  nullptr };
            return names;
        }
        case FIELD_minArgs: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_maxArgs: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cNedFunctionDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_signature:
            if (!strcmp(propertyName, "hint")) return "Argument types and return value";
            return nullptr;
        case FIELD_category:
            if (!strcmp(propertyName, "hint")) return "Function category";
            return nullptr;
        case FIELD_argType:
            if (!strcmp(propertyName, "sizeGetter")) return "getMaxArgs";
            return nullptr;
        case FIELD_minArgs:
            if (!strcmp(propertyName, "hint")) return "Number of mandatory arguments";
            return nullptr;
        case FIELD_maxArgs:
            if (!strcmp(propertyName, "hint")) return "Maximum number of arguments";
            return nullptr;
        default: return nullptr;
    }
}

int cNedFunctionDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cNedFunction *pp = omnetpp::fromAnyPtr<cNedFunction>(object); (void)pp;
    switch (field) {
        case FIELD_argType: return pp->getMaxArgs();
        default: return 0;
    }
}

void cNedFunctionDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cNedFunction *pp = omnetpp::fromAnyPtr<cNedFunction>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cNedFunction'", field);
    }
}

const char *cNedFunctionDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cNedFunction *pp = omnetpp::fromAnyPtr<cNedFunction>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cNedFunctionDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cNedFunction *pp = omnetpp::fromAnyPtr<cNedFunction>(object); (void)pp;
    switch (field) {
        case FIELD_signature: return oppstring2string(pp->getSignature());
        case FIELD_category: return oppstring2string(pp->getCategory());
        case FIELD_description: return oppstring2string(pp->getDescription());
        case FIELD_returnType: return long2string(pp->getReturnType());
        case FIELD_argType: return long2string(pp->getArgType(i));
        case FIELD_minArgs: return long2string(pp->getMinArgs());
        case FIELD_maxArgs: return long2string(pp->getMaxArgs());
        default: return "";
    }
}

void cNedFunctionDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cNedFunction *pp = omnetpp::fromAnyPtr<cNedFunction>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNedFunction'", field);
    }
}

omnetpp::cValue cNedFunctionDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cNedFunction *pp = omnetpp::fromAnyPtr<cNedFunction>(object); (void)pp;
    switch (field) {
        case FIELD_signature: return pp->getSignature();
        case FIELD_category: return pp->getCategory();
        case FIELD_description: return pp->getDescription();
        case FIELD_returnType: return pp->getReturnType();
        case FIELD_argType: return pp->getArgType(i);
        case FIELD_minArgs: return pp->getMinArgs();
        case FIELD_maxArgs: return pp->getMaxArgs();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cNedFunction' as cValue -- field index out of range?", field);
    }
}

void cNedFunctionDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cNedFunction *pp = omnetpp::fromAnyPtr<cNedFunction>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNedFunction'", field);
    }
}

const char *cNedFunctionDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cNedFunctionDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cNedFunction *pp = omnetpp::fromAnyPtr<cNedFunction>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cNedFunctionDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cNedFunction *pp = omnetpp::fromAnyPtr<cNedFunction>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNedFunction'", field);
    }
}

class cOutVectorDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_isEnabled,
        FIELD_valuesReceived,
        FIELD_valuesStored,
    };
  public:
    cOutVectorDescriptor();
    virtual ~cOutVectorDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cOutVectorDescriptor)

cOutVectorDescriptor::cOutVectorDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cOutVector)), "omnetpp::cNoncopyableOwnedObject")
{
    propertyNames = nullptr;
}

cOutVectorDescriptor::~cOutVectorDescriptor()
{
    delete[] propertyNames;
}

bool cOutVectorDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cOutVector *>(obj)!=nullptr;
}

const char **cOutVectorDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "icon",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cOutVectorDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "icon")) return "outvector";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cOutVectorDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 3+base->getFieldCount() : 3;
}

unsigned int cOutVectorDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_isEnabled
        0,    // FIELD_valuesReceived
        0,    // FIELD_valuesStored
    };
    return (field >= 0 && field < 3) ? fieldTypeFlags[field] : 0;
}

const char *cOutVectorDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "isEnabled",
        "valuesReceived",
        "valuesStored",
    };
    return (field >= 0 && field < 3) ? fieldNames[field] : nullptr;
}

int cOutVectorDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "isEnabled") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "valuesReceived") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "valuesStored") == 0) return baseIndex + 2;
    return base ? base->findField(fieldName) : -1;
}

const char *cOutVectorDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "bool",    // FIELD_isEnabled
        "long",    // FIELD_valuesReceived
        "long",    // FIELD_valuesStored
    };
    return (field >= 0 && field < 3) ? fieldTypeStrings[field] : nullptr;
}

const char **cOutVectorDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_isEnabled: {
            static const char *names[] = { "getter", "setter", "editable", "hint",  nullptr };
            return names;
        }
        case FIELD_valuesReceived: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_valuesStored: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cOutVectorDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_isEnabled:
            if (!strcmp(propertyName, "getter")) return "isEnabled";
            if (!strcmp(propertyName, "setter")) return "setEnabled";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "hint")) return "If disabled, values passed to this object to record are simply discarded";
            return nullptr;
        case FIELD_valuesReceived:
            if (!strcmp(propertyName, "hint")) return "Number of values passed to this object to record";
            return nullptr;
        case FIELD_valuesStored:
            if (!strcmp(propertyName, "hint")) return "Number of values actually stored on the disk";
            return nullptr;
        default: return nullptr;
    }
}

int cOutVectorDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cOutVector *pp = omnetpp::fromAnyPtr<cOutVector>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cOutVectorDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cOutVector *pp = omnetpp::fromAnyPtr<cOutVector>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cOutVector'", field);
    }
}

const char *cOutVectorDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cOutVector *pp = omnetpp::fromAnyPtr<cOutVector>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cOutVectorDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cOutVector *pp = omnetpp::fromAnyPtr<cOutVector>(object); (void)pp;
    switch (field) {
        case FIELD_isEnabled: return bool2string(pp->isEnabled());
        case FIELD_valuesReceived: return long2string(pp->getValuesReceived());
        case FIELD_valuesStored: return long2string(pp->getValuesStored());
        default: return "";
    }
}

void cOutVectorDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cOutVector *pp = omnetpp::fromAnyPtr<cOutVector>(object); (void)pp;
    switch (field) {
        case FIELD_isEnabled: pp->setEnabled(string2bool(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cOutVector'", field);
    }
}

omnetpp::cValue cOutVectorDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cOutVector *pp = omnetpp::fromAnyPtr<cOutVector>(object); (void)pp;
    switch (field) {
        case FIELD_isEnabled: return pp->isEnabled();
        case FIELD_valuesReceived: return (omnetpp::intval_t)(pp->getValuesReceived());
        case FIELD_valuesStored: return (omnetpp::intval_t)(pp->getValuesStored());
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cOutVector' as cValue -- field index out of range?", field);
    }
}

void cOutVectorDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cOutVector *pp = omnetpp::fromAnyPtr<cOutVector>(object); (void)pp;
    switch (field) {
        case FIELD_isEnabled: pp->setEnabled(value.boolValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cOutVector'", field);
    }
}

const char *cOutVectorDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cOutVectorDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cOutVector *pp = omnetpp::fromAnyPtr<cOutVector>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cOutVectorDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cOutVector *pp = omnetpp::fromAnyPtr<cOutVector>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cOutVector'", field);
    }
}

class cParDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_value,
        FIELD_type,
        FIELD_unit,
        FIELD_isNumeric,
        FIELD_isVolatile,
        FIELD_isMutable,
        FIELD_isExpression,
        FIELD_isShared,
    };
  public:
    cParDescriptor();
    virtual ~cParDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cParDescriptor)

cParDescriptor::cParDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cPar)), "omnetpp::cObject")
{
    propertyNames = nullptr;
}

cParDescriptor::~cParDescriptor()
{
    delete[] propertyNames;
}

bool cParDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cPar *>(obj)!=nullptr;
}

const char **cParDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "icon", "fromString",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cParDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "icon")) return "param";
    if (!strcmp(propertyName, "fromString")) return "parse";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cParDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 8+base->getFieldCount() : 8;
}

unsigned int cParDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_value
        0,    // FIELD_type
        0,    // FIELD_unit
        0,    // FIELD_isNumeric
        0,    // FIELD_isVolatile
        0,    // FIELD_isMutable
        0,    // FIELD_isExpression
        0,    // FIELD_isShared
    };
    return (field >= 0 && field < 8) ? fieldTypeFlags[field] : 0;
}

const char *cParDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "value",
        "type",
        "unit",
        "isNumeric",
        "isVolatile",
        "isMutable",
        "isExpression",
        "isShared",
    };
    return (field >= 0 && field < 8) ? fieldNames[field] : nullptr;
}

int cParDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "value") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "type") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "unit") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "isNumeric") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "isVolatile") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "isMutable") == 0) return baseIndex + 5;
    if (strcmp(fieldName, "isExpression") == 0) return baseIndex + 6;
    if (strcmp(fieldName, "isShared") == 0) return baseIndex + 7;
    return base ? base->findField(fieldName) : -1;
}

const char *cParDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "string",    // FIELD_value
        "char",    // FIELD_type
        "string",    // FIELD_unit
        "bool",    // FIELD_isNumeric
        "bool",    // FIELD_isVolatile
        "bool",    // FIELD_isMutable
        "bool",    // FIELD_isExpression
        "bool",    // FIELD_isShared
    };
    return (field >= 0 && field < 8) ? fieldTypeStrings[field] : nullptr;
}

const char **cParDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_value: {
            static const char *names[] = { "getter", "setter", "editable",  nullptr };
            return names;
        }
        case FIELD_type: {
            static const char *names[] = { "enum", "hint", "enum",  nullptr };
            return names;
        }
        case FIELD_unit: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_isNumeric: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isVolatile: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isMutable: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isExpression: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isShared: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cParDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_value:
            if (!strcmp(propertyName, "getter")) return "str";
            if (!strcmp(propertyName, "setter")) return "parse";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_type:
            if (!strcmp(propertyName, "enum")) return "cPar::Type";
            if (!strcmp(propertyName, "hint")) return "Parameter type";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cPar::Type";
            return nullptr;
        case FIELD_unit:
            if (!strcmp(propertyName, "hint")) return "For long and double types only";
            return nullptr;
        case FIELD_isNumeric:
            if (!strcmp(propertyName, "getter")) return "isNumeric";
            if (!strcmp(propertyName, "group")) return "flags";
            if (!strcmp(propertyName, "hint")) return "Whether parameter type is numeric, i.e. double or long";
            return nullptr;
        case FIELD_isVolatile:
            if (!strcmp(propertyName, "getter")) return "isVolatile";
            if (!strcmp(propertyName, "group")) return "flags";
            if (!strcmp(propertyName, "hint")) return "Whether parameter was declared volatile in the NED file";
            return nullptr;
        case FIELD_isMutable:
            if (!strcmp(propertyName, "getter")) return "isMutable";
            if (!strcmp(propertyName, "group")) return "flags";
            if (!strcmp(propertyName, "hint")) return "Whether parameter setting the parameter value at runtime is supported";
            return nullptr;
        case FIELD_isExpression:
            if (!strcmp(propertyName, "getter")) return "isExpression";
            if (!strcmp(propertyName, "group")) return "flags";
            if (!strcmp(propertyName, "hint")) return "Whether parameter value is a constant or an expression";
            return nullptr;
        case FIELD_isShared:
            if (!strcmp(propertyName, "getter")) return "isShared";
            if (!strcmp(propertyName, "group")) return "flags";
            if (!strcmp(propertyName, "hint")) return "Whether storage could be optimized by several modules sharing the same parameter value object";
            return nullptr;
        default: return nullptr;
    }
}

int cParDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cPar *pp = omnetpp::fromAnyPtr<cPar>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cParDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cPar *pp = omnetpp::fromAnyPtr<cPar>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cPar'", field);
    }
}

const char *cParDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cPar *pp = omnetpp::fromAnyPtr<cPar>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cParDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cPar *pp = omnetpp::fromAnyPtr<cPar>(object); (void)pp;
    switch (field) {
        case FIELD_value: return oppstring2string(pp->str());
        case FIELD_type: return enum2string(pp->getType(), "omnetpp::cPar::Type");
        case FIELD_unit: return oppstring2string(pp->getUnit());
        case FIELD_isNumeric: return bool2string(pp->isNumeric());
        case FIELD_isVolatile: return bool2string(pp->isVolatile());
        case FIELD_isMutable: return bool2string(pp->isMutable());
        case FIELD_isExpression: return bool2string(pp->isExpression());
        case FIELD_isShared: return bool2string(pp->isShared());
        default: return "";
    }
}

void cParDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPar *pp = omnetpp::fromAnyPtr<cPar>(object); (void)pp;
    switch (field) {
        case FIELD_value: pp->parse((value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPar'", field);
    }
}

omnetpp::cValue cParDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cPar *pp = omnetpp::fromAnyPtr<cPar>(object); (void)pp;
    switch (field) {
        case FIELD_value: return pp->str();
        case FIELD_type: return pp->getType();
        case FIELD_unit: return pp->getUnit();
        case FIELD_isNumeric: return pp->isNumeric();
        case FIELD_isVolatile: return pp->isVolatile();
        case FIELD_isMutable: return pp->isMutable();
        case FIELD_isExpression: return pp->isExpression();
        case FIELD_isShared: return pp->isShared();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cPar' as cValue -- field index out of range?", field);
    }
}

void cParDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPar *pp = omnetpp::fromAnyPtr<cPar>(object); (void)pp;
    switch (field) {
        case FIELD_value: pp->parse(value.stringValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPar'", field);
    }
}

const char *cParDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cParDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cPar *pp = omnetpp::fromAnyPtr<cPar>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cParDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cPar *pp = omnetpp::fromAnyPtr<cPar>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPar'", field);
    }
}

class cMsgParDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_value,
        FIELD_type,
        FIELD_isNumeric,
        FIELD_isConstant,
    };
  public:
    cMsgParDescriptor();
    virtual ~cMsgParDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cMsgParDescriptor)

cMsgParDescriptor::cMsgParDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cMsgPar)), "omnetpp::cOwnedObject")
{
    propertyNames = nullptr;
}

cMsgParDescriptor::~cMsgParDescriptor()
{
    delete[] propertyNames;
}

bool cMsgParDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cMsgPar *>(obj)!=nullptr;
}

const char **cMsgParDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cMsgParDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cMsgParDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 4+base->getFieldCount() : 4;
}

unsigned int cMsgParDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_value
        0,    // FIELD_type
        0,    // FIELD_isNumeric
        0,    // FIELD_isConstant
    };
    return (field >= 0 && field < 4) ? fieldTypeFlags[field] : 0;
}

const char *cMsgParDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "value",
        "type",
        "isNumeric",
        "isConstant",
    };
    return (field >= 0 && field < 4) ? fieldNames[field] : nullptr;
}

int cMsgParDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "value") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "type") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "isNumeric") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "isConstant") == 0) return baseIndex + 3;
    return base ? base->findField(fieldName) : -1;
}

const char *cMsgParDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "string",    // FIELD_value
        "char",    // FIELD_type
        "bool",    // FIELD_isNumeric
        "bool",    // FIELD_isConstant
    };
    return (field >= 0 && field < 4) ? fieldTypeStrings[field] : nullptr;
}

const char **cMsgParDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_value: {
            static const char *names[] = { "getter", "setter", "editable", "hint",  nullptr };
            return names;
        }
        case FIELD_type: {
            static const char *names[] = { "enum", "hint", "enum",  nullptr };
            return names;
        }
        case FIELD_isNumeric: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        case FIELD_isConstant: {
            static const char *names[] = { "getter", "group", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cMsgParDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_value:
            if (!strcmp(propertyName, "getter")) return "str";
            if (!strcmp(propertyName, "setter")) return "parse";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "hint")) return "Parameter value";
            return nullptr;
        case FIELD_type:
            if (!strcmp(propertyName, "enum")) return "cPar::Type";
            if (!strcmp(propertyName, "hint")) return "Parameter type";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cPar::Type";
            return nullptr;
        case FIELD_isNumeric:
            if (!strcmp(propertyName, "getter")) return "isNumeric";
            if (!strcmp(propertyName, "group")) return "flags";
            if (!strcmp(propertyName, "hint")) return "Whether parameter is of numeric type";
            return nullptr;
        case FIELD_isConstant:
            if (!strcmp(propertyName, "getter")) return "isConstant";
            if (!strcmp(propertyName, "group")) return "flags";
            if (!strcmp(propertyName, "hint")) return "Whether the parameter has a constant value";
            return nullptr;
        default: return nullptr;
    }
}

int cMsgParDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cMsgPar *pp = omnetpp::fromAnyPtr<cMsgPar>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cMsgParDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cMsgPar *pp = omnetpp::fromAnyPtr<cMsgPar>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cMsgPar'", field);
    }
}

const char *cMsgParDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cMsgPar *pp = omnetpp::fromAnyPtr<cMsgPar>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cMsgParDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cMsgPar *pp = omnetpp::fromAnyPtr<cMsgPar>(object); (void)pp;
    switch (field) {
        case FIELD_value: return oppstring2string(pp->str());
        case FIELD_type: return enum2string(pp->getType(), "omnetpp::cPar::Type");
        case FIELD_isNumeric: return bool2string(pp->isNumeric());
        case FIELD_isConstant: return bool2string(pp->isConstant());
        default: return "";
    }
}

void cMsgParDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cMsgPar *pp = omnetpp::fromAnyPtr<cMsgPar>(object); (void)pp;
    switch (field) {
        case FIELD_value: pp->parse((value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cMsgPar'", field);
    }
}

omnetpp::cValue cMsgParDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cMsgPar *pp = omnetpp::fromAnyPtr<cMsgPar>(object); (void)pp;
    switch (field) {
        case FIELD_value: return pp->str();
        case FIELD_type: return pp->getType();
        case FIELD_isNumeric: return pp->isNumeric();
        case FIELD_isConstant: return pp->isConstant();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cMsgPar' as cValue -- field index out of range?", field);
    }
}

void cMsgParDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cMsgPar *pp = omnetpp::fromAnyPtr<cMsgPar>(object); (void)pp;
    switch (field) {
        case FIELD_value: pp->parse(value.stringValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cMsgPar'", field);
    }
}

const char *cMsgParDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cMsgParDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cMsgPar *pp = omnetpp::fromAnyPtr<cMsgPar>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cMsgParDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cMsgPar *pp = omnetpp::fromAnyPtr<cMsgPar>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cMsgPar'", field);
    }
}

class cFutureEventSetDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_length,
        FIELD_events,
    };
  public:
    cFutureEventSetDescriptor();
    virtual ~cFutureEventSetDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cFutureEventSetDescriptor)

cFutureEventSetDescriptor::cFutureEventSetDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cFutureEventSet)), "omnetpp::cOwnedObject")
{
    propertyNames = nullptr;
}

cFutureEventSetDescriptor::~cFutureEventSetDescriptor()
{
    delete[] propertyNames;
}

bool cFutureEventSetDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cFutureEventSet *>(obj)!=nullptr;
}

const char **cFutureEventSetDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "icon",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cFutureEventSetDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "icon")) return "container";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cFutureEventSetDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cFutureEventSetDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_length
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_events
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cFutureEventSetDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "length",
        "events",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cFutureEventSetDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "length") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "events") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cFutureEventSetDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "int",    // FIELD_length
        "omnetpp::cEvent",    // FIELD_events
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cFutureEventSetDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_length: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_events: {
            static const char *names[] = { "getter", "sizeGetter", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cFutureEventSetDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_length:
            if (!strcmp(propertyName, "hint")) return "Number of items contained";
            return nullptr;
        case FIELD_events:
            if (!strcmp(propertyName, "getter")) return "get";
            if (!strcmp(propertyName, "sizeGetter")) return "getLength";
            if (!strcmp(propertyName, "hint")) return "Events and self-messages and currently scheduled, and messages currently in transit";
            return nullptr;
        default: return nullptr;
    }
}

int cFutureEventSetDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cFutureEventSet *pp = omnetpp::fromAnyPtr<cFutureEventSet>(object); (void)pp;
    switch (field) {
        case FIELD_events: return pp->getLength();
        default: return 0;
    }
}

void cFutureEventSetDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cFutureEventSet *pp = omnetpp::fromAnyPtr<cFutureEventSet>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cFutureEventSet'", field);
    }
}

const char *cFutureEventSetDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cFutureEventSet *pp = omnetpp::fromAnyPtr<cFutureEventSet>(object); (void)pp;
    switch (field) {
        case FIELD_events: { const cEvent * value = pp->get(i); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cFutureEventSetDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cFutureEventSet *pp = omnetpp::fromAnyPtr<cFutureEventSet>(object); (void)pp;
    switch (field) {
        case FIELD_length: return long2string(pp->getLength());
        case FIELD_events: { auto obj = pp->get(i); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cFutureEventSetDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cFutureEventSet *pp = omnetpp::fromAnyPtr<cFutureEventSet>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cFutureEventSet'", field);
    }
}

omnetpp::cValue cFutureEventSetDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cFutureEventSet *pp = omnetpp::fromAnyPtr<cFutureEventSet>(object); (void)pp;
    switch (field) {
        case FIELD_length: return pp->getLength();
        case FIELD_events: return omnetpp::toAnyPtr(pp->get(i)); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cFutureEventSet' as cValue -- field index out of range?", field);
    }
}

void cFutureEventSetDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cFutureEventSet *pp = omnetpp::fromAnyPtr<cFutureEventSet>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cFutureEventSet'", field);
    }
}

const char *cFutureEventSetDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_events: return omnetpp::opp_typename(typeid(cEvent));
        default: return nullptr;
    };
}

omnetpp::any_ptr cFutureEventSetDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cFutureEventSet *pp = omnetpp::fromAnyPtr<cFutureEventSet>(object); (void)pp;
    switch (field) {
        case FIELD_events: return omnetpp::toAnyPtr(pp->get(i)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cFutureEventSetDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cFutureEventSet *pp = omnetpp::fromAnyPtr<cFutureEventSet>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cFutureEventSet'", field);
    }
}

class cEventHeapDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cEventHeapDescriptor();
    virtual ~cEventHeapDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cEventHeapDescriptor)

cEventHeapDescriptor::cEventHeapDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cEventHeap)), "omnetpp::cFutureEventSet")
{
    propertyNames = nullptr;
}

cEventHeapDescriptor::~cEventHeapDescriptor()
{
    delete[] propertyNames;
}

bool cEventHeapDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cEventHeap *>(obj)!=nullptr;
}

const char **cEventHeapDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cEventHeapDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cEventHeapDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cEventHeapDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cEventHeapDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cEventHeapDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cEventHeapDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cEventHeapDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cEventHeapDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cEventHeapDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cEventHeap *pp = omnetpp::fromAnyPtr<cEventHeap>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cEventHeapDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cEventHeap *pp = omnetpp::fromAnyPtr<cEventHeap>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cEventHeap'", field);
    }
}

const char *cEventHeapDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cEventHeap *pp = omnetpp::fromAnyPtr<cEventHeap>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cEventHeapDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cEventHeap *pp = omnetpp::fromAnyPtr<cEventHeap>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cEventHeapDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cEventHeap *pp = omnetpp::fromAnyPtr<cEventHeap>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cEventHeap'", field);
    }
}

omnetpp::cValue cEventHeapDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cEventHeap *pp = omnetpp::fromAnyPtr<cEventHeap>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cEventHeap' as cValue -- field index out of range?", field);
    }
}

void cEventHeapDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cEventHeap *pp = omnetpp::fromAnyPtr<cEventHeap>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cEventHeap'", field);
    }
}

const char *cEventHeapDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cEventHeapDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cEventHeap *pp = omnetpp::fromAnyPtr<cEventHeap>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cEventHeapDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cEventHeap *pp = omnetpp::fromAnyPtr<cEventHeap>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cEventHeap'", field);
    }
}

class cQueueDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_takeOwnership,
        FIELD_length,
        FIELD_contents,
    };
  public:
    cQueueDescriptor();
    virtual ~cQueueDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cQueueDescriptor)

cQueueDescriptor::cQueueDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cQueue)), "omnetpp::cOwnedObject")
{
    propertyNames = nullptr;
}

cQueueDescriptor::~cQueueDescriptor()
{
    delete[] propertyNames;
}

bool cQueueDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cQueue *>(obj)!=nullptr;
}

const char **cQueueDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "icon",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cQueueDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "icon")) return "queue";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cQueueDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 3+base->getFieldCount() : 3;
}

unsigned int cQueueDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_takeOwnership
        0,    // FIELD_length
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_contents
    };
    return (field >= 0 && field < 3) ? fieldTypeFlags[field] : 0;
}

const char *cQueueDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "takeOwnership",
        "length",
        "contents",
    };
    return (field >= 0 && field < 3) ? fieldNames[field] : nullptr;
}

int cQueueDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "takeOwnership") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "length") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "contents") == 0) return baseIndex + 2;
    return base ? base->findField(fieldName) : -1;
}

const char *cQueueDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "bool",    // FIELD_takeOwnership
        "int",    // FIELD_length
        "omnetpp::cObject",    // FIELD_contents
    };
    return (field >= 0 && field < 3) ? fieldTypeStrings[field] : nullptr;
}

const char **cQueueDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_takeOwnership: {
            static const char *names[] = { "group", "editable", "hint",  nullptr };
            return names;
        }
        case FIELD_length: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_contents: {
            static const char *names[] = { "getter", "sizeGetter", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cQueueDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_takeOwnership:
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "hint")) return "Whether the queue should own the objects inserted into it";
            return nullptr;
        case FIELD_length:
            if (!strcmp(propertyName, "hint")) return "Number of items in the queue";
            return nullptr;
        case FIELD_contents:
            if (!strcmp(propertyName, "getter")) return "get";
            if (!strcmp(propertyName, "sizeGetter")) return "getLength";
            if (!strcmp(propertyName, "hint")) return "Queue contents";
            return nullptr;
        default: return nullptr;
    }
}

int cQueueDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cQueue *pp = omnetpp::fromAnyPtr<cQueue>(object); (void)pp;
    switch (field) {
        case FIELD_contents: return pp->getLength();
        default: return 0;
    }
}

void cQueueDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cQueue *pp = omnetpp::fromAnyPtr<cQueue>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cQueue'", field);
    }
}

const char *cQueueDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cQueue *pp = omnetpp::fromAnyPtr<cQueue>(object); (void)pp;
    switch (field) {
        case FIELD_contents: { const cObject * value = pp->get(i); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cQueueDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cQueue *pp = omnetpp::fromAnyPtr<cQueue>(object); (void)pp;
    switch (field) {
        case FIELD_takeOwnership: return bool2string(pp->getTakeOwnership());
        case FIELD_length: return long2string(pp->getLength());
        case FIELD_contents: { auto obj = pp->get(i); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cQueueDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cQueue *pp = omnetpp::fromAnyPtr<cQueue>(object); (void)pp;
    switch (field) {
        case FIELD_takeOwnership: pp->setTakeOwnership(string2bool(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cQueue'", field);
    }
}

omnetpp::cValue cQueueDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cQueue *pp = omnetpp::fromAnyPtr<cQueue>(object); (void)pp;
    switch (field) {
        case FIELD_takeOwnership: return pp->getTakeOwnership();
        case FIELD_length: return pp->getLength();
        case FIELD_contents: return omnetpp::toAnyPtr(pp->get(i)); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cQueue' as cValue -- field index out of range?", field);
    }
}

void cQueueDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cQueue *pp = omnetpp::fromAnyPtr<cQueue>(object); (void)pp;
    switch (field) {
        case FIELD_takeOwnership: pp->setTakeOwnership(value.boolValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cQueue'", field);
    }
}

const char *cQueueDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_contents: return omnetpp::opp_typename(typeid(cObject));
        default: return nullptr;
    };
}

omnetpp::any_ptr cQueueDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cQueue *pp = omnetpp::fromAnyPtr<cQueue>(object); (void)pp;
    switch (field) {
        case FIELD_contents: return omnetpp::toAnyPtr(pp->get(i)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cQueueDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cQueue *pp = omnetpp::fromAnyPtr<cQueue>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cQueue'", field);
    }
}

class cPacketQueueDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_bitLength,
        FIELD_byteLength,
    };
  public:
    cPacketQueueDescriptor();
    virtual ~cPacketQueueDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cPacketQueueDescriptor)

cPacketQueueDescriptor::cPacketQueueDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cPacketQueue)), "omnetpp::cQueue")
{
    propertyNames = nullptr;
}

cPacketQueueDescriptor::~cPacketQueueDescriptor()
{
    delete[] propertyNames;
}

bool cPacketQueueDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cPacketQueue *>(obj)!=nullptr;
}

const char **cPacketQueueDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cPacketQueueDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cPacketQueueDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cPacketQueueDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_bitLength
        0,    // FIELD_byteLength
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cPacketQueueDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "bitLength",
        "byteLength",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cPacketQueueDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "bitLength") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "byteLength") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cPacketQueueDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "int64_t",    // FIELD_bitLength
        "int64_t",    // FIELD_byteLength
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cPacketQueueDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_bitLength: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_byteLength: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cPacketQueueDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_bitLength:
            if (!strcmp(propertyName, "hint")) return "Total size of messages in the queue";
            return nullptr;
        case FIELD_byteLength:
            if (!strcmp(propertyName, "hint")) return "Total size of messages in the queue, in bytes";
            return nullptr;
        default: return nullptr;
    }
}

int cPacketQueueDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cPacketQueue *pp = omnetpp::fromAnyPtr<cPacketQueue>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cPacketQueueDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cPacketQueue *pp = omnetpp::fromAnyPtr<cPacketQueue>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cPacketQueue'", field);
    }
}

const char *cPacketQueueDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cPacketQueue *pp = omnetpp::fromAnyPtr<cPacketQueue>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cPacketQueueDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cPacketQueue *pp = omnetpp::fromAnyPtr<cPacketQueue>(object); (void)pp;
    switch (field) {
        case FIELD_bitLength: return int642string(pp->getBitLength());
        case FIELD_byteLength: return int642string(pp->getByteLength());
        default: return "";
    }
}

void cPacketQueueDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPacketQueue *pp = omnetpp::fromAnyPtr<cPacketQueue>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPacketQueue'", field);
    }
}

omnetpp::cValue cPacketQueueDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cPacketQueue *pp = omnetpp::fromAnyPtr<cPacketQueue>(object); (void)pp;
    switch (field) {
        case FIELD_bitLength: return pp->getBitLength();
        case FIELD_byteLength: return pp->getByteLength();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cPacketQueue' as cValue -- field index out of range?", field);
    }
}

void cPacketQueueDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPacketQueue *pp = omnetpp::fromAnyPtr<cPacketQueue>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPacketQueue'", field);
    }
}

const char *cPacketQueueDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cPacketQueueDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cPacketQueue *pp = omnetpp::fromAnyPtr<cPacketQueue>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cPacketQueueDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cPacketQueue *pp = omnetpp::fromAnyPtr<cPacketQueue>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPacketQueue'", field);
    }
}

class cHasherDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_hash,
    };
  public:
    cHasherDescriptor();
    virtual ~cHasherDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cHasherDescriptor)

cHasherDescriptor::cHasherDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cHasher)), "")
{
    propertyNames = nullptr;
}

cHasherDescriptor::~cHasherDescriptor()
{
    delete[] propertyNames;
}

bool cHasherDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cHasher *>(obj)!=nullptr;
}

const char **cHasherDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "polymorphic",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cHasherDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "polymorphic")) return "false";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cHasherDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cHasherDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_hash
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cHasherDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "hash",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cHasherDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "hash") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cHasherDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "string",    // FIELD_hash
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cHasherDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_hash: {
            static const char *names[] = { "getter", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cHasherDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_hash:
            if (!strcmp(propertyName, "getter")) return "str";
            if (!strcmp(propertyName, "hint")) return "The current hash value";
            return nullptr;
        default: return nullptr;
    }
}

int cHasherDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cHasher *pp = omnetpp::fromAnyPtr<cHasher>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cHasherDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cHasher *pp = omnetpp::fromAnyPtr<cHasher>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cHasher'", field);
    }
}

const char *cHasherDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cHasher *pp = omnetpp::fromAnyPtr<cHasher>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cHasherDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cHasher *pp = omnetpp::fromAnyPtr<cHasher>(object); (void)pp;
    switch (field) {
        case FIELD_hash: return oppstring2string(pp->str());
        default: return "";
    }
}

void cHasherDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cHasher *pp = omnetpp::fromAnyPtr<cHasher>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cHasher'", field);
    }
}

omnetpp::cValue cHasherDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cHasher *pp = omnetpp::fromAnyPtr<cHasher>(object); (void)pp;
    switch (field) {
        case FIELD_hash: return pp->str();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cHasher' as cValue -- field index out of range?", field);
    }
}

void cHasherDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cHasher *pp = omnetpp::fromAnyPtr<cHasher>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cHasher'", field);
    }
}

const char *cHasherDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cHasherDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cHasher *pp = omnetpp::fromAnyPtr<cHasher>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cHasherDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cHasher *pp = omnetpp::fromAnyPtr<cHasher>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cHasher'", field);
    }
}

class cFingerprintCalculatorDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cFingerprintCalculatorDescriptor();
    virtual ~cFingerprintCalculatorDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cFingerprintCalculatorDescriptor)

cFingerprintCalculatorDescriptor::cFingerprintCalculatorDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cFingerprintCalculator)), "omnetpp::cObject")
{
    propertyNames = nullptr;
}

cFingerprintCalculatorDescriptor::~cFingerprintCalculatorDescriptor()
{
    delete[] propertyNames;
}

bool cFingerprintCalculatorDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cFingerprintCalculator *>(obj)!=nullptr;
}

const char **cFingerprintCalculatorDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cFingerprintCalculatorDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cFingerprintCalculatorDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cFingerprintCalculatorDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cFingerprintCalculatorDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cFingerprintCalculatorDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cFingerprintCalculatorDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cFingerprintCalculatorDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cFingerprintCalculatorDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cFingerprintCalculatorDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cFingerprintCalculator *pp = omnetpp::fromAnyPtr<cFingerprintCalculator>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cFingerprintCalculatorDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cFingerprintCalculator *pp = omnetpp::fromAnyPtr<cFingerprintCalculator>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cFingerprintCalculator'", field);
    }
}

const char *cFingerprintCalculatorDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cFingerprintCalculator *pp = omnetpp::fromAnyPtr<cFingerprintCalculator>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cFingerprintCalculatorDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cFingerprintCalculator *pp = omnetpp::fromAnyPtr<cFingerprintCalculator>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cFingerprintCalculatorDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cFingerprintCalculator *pp = omnetpp::fromAnyPtr<cFingerprintCalculator>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cFingerprintCalculator'", field);
    }
}

omnetpp::cValue cFingerprintCalculatorDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cFingerprintCalculator *pp = omnetpp::fromAnyPtr<cFingerprintCalculator>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cFingerprintCalculator' as cValue -- field index out of range?", field);
    }
}

void cFingerprintCalculatorDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cFingerprintCalculator *pp = omnetpp::fromAnyPtr<cFingerprintCalculator>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cFingerprintCalculator'", field);
    }
}

const char *cFingerprintCalculatorDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cFingerprintCalculatorDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cFingerprintCalculator *pp = omnetpp::fromAnyPtr<cFingerprintCalculator>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cFingerprintCalculatorDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cFingerprintCalculator *pp = omnetpp::fromAnyPtr<cFingerprintCalculator>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cFingerprintCalculator'", field);
    }
}

class cSimulationDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_simTime,
        FIELD_eventNumber,
        FIELD_fes,
        FIELD_lastComponentId,
        FIELD_systemModule,
        FIELD_component,
        FIELD_fingerprintCalculator,
    };
  public:
    cSimulationDescriptor();
    virtual ~cSimulationDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cSimulationDescriptor)

cSimulationDescriptor::cSimulationDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cSimulation)), "omnetpp::cNamedObject")
{
    propertyNames = nullptr;
}

cSimulationDescriptor::~cSimulationDescriptor()
{
    delete[] propertyNames;
}

bool cSimulationDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cSimulation *>(obj)!=nullptr;
}

const char **cSimulationDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "icon",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cSimulationDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "icon")) return "container";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cSimulationDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 7+base->getFieldCount() : 7;
}

unsigned int cSimulationDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_simTime
        0,    // FIELD_eventNumber
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_fes
        0,    // FIELD_lastComponentId
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_systemModule
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_component
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_fingerprintCalculator
    };
    return (field >= 0 && field < 7) ? fieldTypeFlags[field] : 0;
}

const char *cSimulationDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "simTime",
        "eventNumber",
        "fes",
        "lastComponentId",
        "systemModule",
        "component",
        "fingerprintCalculator",
    };
    return (field >= 0 && field < 7) ? fieldNames[field] : nullptr;
}

int cSimulationDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "simTime") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "eventNumber") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "fes") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "lastComponentId") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "systemModule") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "component") == 0) return baseIndex + 5;
    if (strcmp(fieldName, "fingerprintCalculator") == 0) return baseIndex + 6;
    return base ? base->findField(fieldName) : -1;
}

const char *cSimulationDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::simtime_t",    // FIELD_simTime
        "int64_t",    // FIELD_eventNumber
        "omnetpp::cFutureEventSet",    // FIELD_fes
        "int",    // FIELD_lastComponentId
        "omnetpp::cModule",    // FIELD_systemModule
        "omnetpp::cComponent",    // FIELD_component
        "omnetpp::cFingerprintCalculator",    // FIELD_fingerprintCalculator
    };
    return (field >= 0 && field < 7) ? fieldTypeStrings[field] : nullptr;
}

const char **cSimulationDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_simTime: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_eventNumber: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_fes: {
            static const char *names[] = { "getter", "label", "hint",  nullptr };
            return names;
        }
        case FIELD_lastComponentId: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_systemModule: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_component: {
            static const char *names[] = { "sizeGetter", "group", "label", "hint",  nullptr };
            return names;
        }
        case FIELD_fingerprintCalculator: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cSimulationDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_simTime:
            if (!strcmp(propertyName, "hint")) return "The current simulation time in seconds";
            return nullptr;
        case FIELD_eventNumber:
            if (!strcmp(propertyName, "hint")) return "The current event number -- counts from 0 up";
            return nullptr;
        case FIELD_fes:
            if (!strcmp(propertyName, "getter")) return "getFES";
            if (!strcmp(propertyName, "label")) return "futureEvents";
            if (!strcmp(propertyName, "hint")) return "Self-messages scheduled, and messages in transit";
            return nullptr;
        case FIELD_lastComponentId:
            if (!strcmp(propertyName, "group")) return "components";
            if (!strcmp(propertyName, "hint")) return "The largest component ID issued so far";
            return nullptr;
        case FIELD_systemModule:
            if (!strcmp(propertyName, "group")) return "components";
            if (!strcmp(propertyName, "hint")) return "The top-level module";
            return nullptr;
        case FIELD_component:
            if (!strcmp(propertyName, "sizeGetter")) return "getLastComponentId";
            if (!strcmp(propertyName, "group")) return "components";
            if (!strcmp(propertyName, "label")) return "components";
            if (!strcmp(propertyName, "hint")) return "List of components indexed by component ID";
            return nullptr;
        case FIELD_fingerprintCalculator:
            if (!strcmp(propertyName, "hint")) return "Used for computing simulation fingerprint";
            return nullptr;
        default: return nullptr;
    }
}

int cSimulationDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cSimulation *pp = omnetpp::fromAnyPtr<cSimulation>(object); (void)pp;
    switch (field) {
        case FIELD_component: return pp->getLastComponentId();
        default: return 0;
    }
}

void cSimulationDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cSimulation *pp = omnetpp::fromAnyPtr<cSimulation>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cSimulation'", field);
    }
}

const char *cSimulationDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cSimulation *pp = omnetpp::fromAnyPtr<cSimulation>(object); (void)pp;
    switch (field) {
        case FIELD_fes: { const cFutureEventSet * value = pp->getFES(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_systemModule: { const cModule * value = pp->getSystemModule(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_component: { const cComponent * value = pp->getComponent(i); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_fingerprintCalculator: { const cFingerprintCalculator * value = pp->getFingerprintCalculator(); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cSimulationDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cSimulation *pp = omnetpp::fromAnyPtr<cSimulation>(object); (void)pp;
    switch (field) {
        case FIELD_simTime: return simtime2string(pp->getSimTime());
        case FIELD_eventNumber: return int642string(pp->getEventNumber());
        case FIELD_fes: { auto obj = pp->getFES(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_lastComponentId: return long2string(pp->getLastComponentId());
        case FIELD_systemModule: { auto obj = pp->getSystemModule(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_component: { auto obj = pp->getComponent(i); return obj == nullptr ? "" : obj->str(); }
        case FIELD_fingerprintCalculator: { auto obj = pp->getFingerprintCalculator(); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cSimulationDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cSimulation *pp = omnetpp::fromAnyPtr<cSimulation>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cSimulation'", field);
    }
}

omnetpp::cValue cSimulationDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cSimulation *pp = omnetpp::fromAnyPtr<cSimulation>(object); (void)pp;
    switch (field) {
        case FIELD_simTime: return pp->getSimTime().dbl();
        case FIELD_eventNumber: return pp->getEventNumber();
        case FIELD_fes: return omnetpp::toAnyPtr(pp->getFES()); break;
        case FIELD_lastComponentId: return pp->getLastComponentId();
        case FIELD_systemModule: return omnetpp::toAnyPtr(pp->getSystemModule()); break;
        case FIELD_component: return omnetpp::toAnyPtr(pp->getComponent(i)); break;
        case FIELD_fingerprintCalculator: return omnetpp::toAnyPtr(pp->getFingerprintCalculator()); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cSimulation' as cValue -- field index out of range?", field);
    }
}

void cSimulationDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cSimulation *pp = omnetpp::fromAnyPtr<cSimulation>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cSimulation'", field);
    }
}

const char *cSimulationDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_fes: return omnetpp::opp_typename(typeid(cFutureEventSet));
        case FIELD_systemModule: return omnetpp::opp_typename(typeid(cModule));
        case FIELD_component: return omnetpp::opp_typename(typeid(cComponent));
        case FIELD_fingerprintCalculator: return omnetpp::opp_typename(typeid(cFingerprintCalculator));
        default: return nullptr;
    };
}

omnetpp::any_ptr cSimulationDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cSimulation *pp = omnetpp::fromAnyPtr<cSimulation>(object); (void)pp;
    switch (field) {
        case FIELD_fes: return omnetpp::toAnyPtr(pp->getFES()); break;
        case FIELD_systemModule: return omnetpp::toAnyPtr(pp->getSystemModule()); break;
        case FIELD_component: return omnetpp::toAnyPtr(pp->getComponent(i)); break;
        case FIELD_fingerprintCalculator: return omnetpp::toAnyPtr(pp->getFingerprintCalculator()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cSimulationDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cSimulation *pp = omnetpp::fromAnyPtr<cSimulation>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cSimulation'", field);
    }
}

class cSchedulerDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cSchedulerDescriptor();
    virtual ~cSchedulerDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cSchedulerDescriptor)

cSchedulerDescriptor::cSchedulerDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cScheduler)), "omnetpp::cObject")
{
    propertyNames = nullptr;
}

cSchedulerDescriptor::~cSchedulerDescriptor()
{
    delete[] propertyNames;
}

bool cSchedulerDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cScheduler *>(obj)!=nullptr;
}

const char **cSchedulerDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cSchedulerDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cSchedulerDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cSchedulerDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cSchedulerDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cSchedulerDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cSchedulerDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cSchedulerDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cSchedulerDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cSchedulerDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cScheduler *pp = omnetpp::fromAnyPtr<cScheduler>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cSchedulerDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cScheduler *pp = omnetpp::fromAnyPtr<cScheduler>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cScheduler'", field);
    }
}

const char *cSchedulerDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cScheduler *pp = omnetpp::fromAnyPtr<cScheduler>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cSchedulerDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cScheduler *pp = omnetpp::fromAnyPtr<cScheduler>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cSchedulerDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cScheduler *pp = omnetpp::fromAnyPtr<cScheduler>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cScheduler'", field);
    }
}

omnetpp::cValue cSchedulerDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cScheduler *pp = omnetpp::fromAnyPtr<cScheduler>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cScheduler' as cValue -- field index out of range?", field);
    }
}

void cSchedulerDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cScheduler *pp = omnetpp::fromAnyPtr<cScheduler>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cScheduler'", field);
    }
}

const char *cSchedulerDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cSchedulerDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cScheduler *pp = omnetpp::fromAnyPtr<cScheduler>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cSchedulerDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cScheduler *pp = omnetpp::fromAnyPtr<cScheduler>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cScheduler'", field);
    }
}

class cSequentialSchedulerDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cSequentialSchedulerDescriptor();
    virtual ~cSequentialSchedulerDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cSequentialSchedulerDescriptor)

cSequentialSchedulerDescriptor::cSequentialSchedulerDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cSequentialScheduler)), "omnetpp::cScheduler")
{
    propertyNames = nullptr;
}

cSequentialSchedulerDescriptor::~cSequentialSchedulerDescriptor()
{
    delete[] propertyNames;
}

bool cSequentialSchedulerDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cSequentialScheduler *>(obj)!=nullptr;
}

const char **cSequentialSchedulerDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cSequentialSchedulerDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cSequentialSchedulerDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cSequentialSchedulerDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cSequentialSchedulerDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cSequentialSchedulerDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cSequentialSchedulerDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cSequentialSchedulerDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cSequentialSchedulerDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cSequentialSchedulerDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cSequentialScheduler *pp = omnetpp::fromAnyPtr<cSequentialScheduler>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cSequentialSchedulerDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cSequentialScheduler *pp = omnetpp::fromAnyPtr<cSequentialScheduler>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cSequentialScheduler'", field);
    }
}

const char *cSequentialSchedulerDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cSequentialScheduler *pp = omnetpp::fromAnyPtr<cSequentialScheduler>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cSequentialSchedulerDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cSequentialScheduler *pp = omnetpp::fromAnyPtr<cSequentialScheduler>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cSequentialSchedulerDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cSequentialScheduler *pp = omnetpp::fromAnyPtr<cSequentialScheduler>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cSequentialScheduler'", field);
    }
}

omnetpp::cValue cSequentialSchedulerDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cSequentialScheduler *pp = omnetpp::fromAnyPtr<cSequentialScheduler>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cSequentialScheduler' as cValue -- field index out of range?", field);
    }
}

void cSequentialSchedulerDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cSequentialScheduler *pp = omnetpp::fromAnyPtr<cSequentialScheduler>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cSequentialScheduler'", field);
    }
}

const char *cSequentialSchedulerDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cSequentialSchedulerDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cSequentialScheduler *pp = omnetpp::fromAnyPtr<cSequentialScheduler>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cSequentialSchedulerDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cSequentialScheduler *pp = omnetpp::fromAnyPtr<cSequentialScheduler>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cSequentialScheduler'", field);
    }
}

class cRealTimeSchedulerDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cRealTimeSchedulerDescriptor();
    virtual ~cRealTimeSchedulerDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cRealTimeSchedulerDescriptor)

cRealTimeSchedulerDescriptor::cRealTimeSchedulerDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cRealTimeScheduler)), "omnetpp::cScheduler")
{
    propertyNames = nullptr;
}

cRealTimeSchedulerDescriptor::~cRealTimeSchedulerDescriptor()
{
    delete[] propertyNames;
}

bool cRealTimeSchedulerDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cRealTimeScheduler *>(obj)!=nullptr;
}

const char **cRealTimeSchedulerDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cRealTimeSchedulerDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cRealTimeSchedulerDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cRealTimeSchedulerDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cRealTimeSchedulerDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cRealTimeSchedulerDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cRealTimeSchedulerDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cRealTimeSchedulerDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cRealTimeSchedulerDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cRealTimeSchedulerDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cRealTimeScheduler *pp = omnetpp::fromAnyPtr<cRealTimeScheduler>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cRealTimeSchedulerDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cRealTimeScheduler *pp = omnetpp::fromAnyPtr<cRealTimeScheduler>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cRealTimeScheduler'", field);
    }
}

const char *cRealTimeSchedulerDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cRealTimeScheduler *pp = omnetpp::fromAnyPtr<cRealTimeScheduler>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cRealTimeSchedulerDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cRealTimeScheduler *pp = omnetpp::fromAnyPtr<cRealTimeScheduler>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cRealTimeSchedulerDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cRealTimeScheduler *pp = omnetpp::fromAnyPtr<cRealTimeScheduler>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRealTimeScheduler'", field);
    }
}

omnetpp::cValue cRealTimeSchedulerDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cRealTimeScheduler *pp = omnetpp::fromAnyPtr<cRealTimeScheduler>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cRealTimeScheduler' as cValue -- field index out of range?", field);
    }
}

void cRealTimeSchedulerDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cRealTimeScheduler *pp = omnetpp::fromAnyPtr<cRealTimeScheduler>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRealTimeScheduler'", field);
    }
}

const char *cRealTimeSchedulerDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cRealTimeSchedulerDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cRealTimeScheduler *pp = omnetpp::fromAnyPtr<cRealTimeScheduler>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cRealTimeSchedulerDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cRealTimeScheduler *pp = omnetpp::fromAnyPtr<cRealTimeScheduler>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRealTimeScheduler'", field);
    }
}

class cTopology__NodeDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_moduleId,
        FIELD_module,
        FIELD_weight,
        FIELD_enabled,
        FIELD_inLink,
        FIELD_outLink,
        FIELD_distanceToTarget,
        FIELD_path,
    };
  public:
    cTopology__NodeDescriptor();
    virtual ~cTopology__NodeDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cTopology__NodeDescriptor)

cTopology__NodeDescriptor::cTopology__NodeDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cTopology::Node)), "")
{
    propertyNames = nullptr;
}

cTopology__NodeDescriptor::~cTopology__NodeDescriptor()
{
    delete[] propertyNames;
}

bool cTopology__NodeDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cTopology::Node *>(obj)!=nullptr;
}

const char **cTopology__NodeDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "polymorphic",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cTopology__NodeDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "polymorphic")) return "false";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cTopology__NodeDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 8+base->getFieldCount() : 8;
}

unsigned int cTopology__NodeDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_moduleId
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_module
        0,    // FIELD_weight
        0,    // FIELD_enabled
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER,    // FIELD_inLink
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER,    // FIELD_outLink
        0,    // FIELD_distanceToTarget
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER,    // FIELD_path
    };
    return (field >= 0 && field < 8) ? fieldTypeFlags[field] : 0;
}

const char *cTopology__NodeDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "moduleId",
        "module",
        "weight",
        "enabled",
        "inLink",
        "outLink",
        "distanceToTarget",
        "path",
    };
    return (field >= 0 && field < 8) ? fieldNames[field] : nullptr;
}

int cTopology__NodeDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "moduleId") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "module") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "weight") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "enabled") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "inLink") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "outLink") == 0) return baseIndex + 5;
    if (strcmp(fieldName, "distanceToTarget") == 0) return baseIndex + 6;
    if (strcmp(fieldName, "path") == 0) return baseIndex + 7;
    return base ? base->findField(fieldName) : -1;
}

const char *cTopology__NodeDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "int",    // FIELD_moduleId
        "omnetpp::cModule",    // FIELD_module
        "double",    // FIELD_weight
        "bool",    // FIELD_enabled
        "omnetpp::cTopology::LinkIn",    // FIELD_inLink
        "omnetpp::cTopology::LinkOut",    // FIELD_outLink
        "double",    // FIELD_distanceToTarget
        "omnetpp::cTopology::LinkOut",    // FIELD_path
    };
    return (field >= 0 && field < 8) ? fieldTypeStrings[field] : nullptr;
}

const char **cTopology__NodeDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_moduleId: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_module: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_weight: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_enabled: {
            static const char *names[] = { "getter", "hint",  nullptr };
            return names;
        }
        case FIELD_inLink: {
            static const char *names[] = { "getter", "sizeGetter", "hint",  nullptr };
            return names;
        }
        case FIELD_outLink: {
            static const char *names[] = { "getter", "sizeGetter", "hint",  nullptr };
            return names;
        }
        case FIELD_distanceToTarget: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_path: {
            static const char *names[] = { "sizeGetter", "group", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cTopology__NodeDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_moduleId:
            if (!strcmp(propertyName, "hint")) return "ID of the module this node corresponds to";
            return nullptr;
        case FIELD_module:
            if (!strcmp(propertyName, "hint")) return "The module this node corresponds to";
            return nullptr;
        case FIELD_weight:
            if (!strcmp(propertyName, "hint")) return "Node weight -- affects graph algorithms such as shortest path";
            return nullptr;
        case FIELD_enabled:
            if (!strcmp(propertyName, "getter")) return "isEnabled";
            if (!strcmp(propertyName, "hint")) return "Node state -- affects graph algorithms such as shortest path";
            return nullptr;
        case FIELD_inLink:
            if (!strcmp(propertyName, "getter")) return "getLinkIn";
            if (!strcmp(propertyName, "sizeGetter")) return "getNumInLinks";
            if (!strcmp(propertyName, "hint")) return "Incoming links of this graph node";
            return nullptr;
        case FIELD_outLink:
            if (!strcmp(propertyName, "getter")) return "getLinkOut";
            if (!strcmp(propertyName, "sizeGetter")) return "getNumOutLinks";
            if (!strcmp(propertyName, "hint")) return "Outgoing links of this graph node";
            return nullptr;
        case FIELD_distanceToTarget:
            if (!strcmp(propertyName, "group")) return "shortest path";
            if (!strcmp(propertyName, "hint")) return "After running a shortest path algorithm: distance to the target node";
            return nullptr;
        case FIELD_path:
            if (!strcmp(propertyName, "sizeGetter")) return "getNumPaths";
            if (!strcmp(propertyName, "group")) return "shortest path";
            if (!strcmp(propertyName, "hint")) return "The next link of the shortest path or paths towards the target node";
            return nullptr;
        default: return nullptr;
    }
}

int cTopology__NodeDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cTopology::Node *pp = omnetpp::fromAnyPtr<cTopology::Node>(object); (void)pp;
    switch (field) {
        case FIELD_inLink: return pp->getNumInLinks();
        case FIELD_outLink: return pp->getNumOutLinks();
        case FIELD_path: return pp->getNumPaths();
        default: return 0;
    }
}

void cTopology__NodeDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology::Node *pp = omnetpp::fromAnyPtr<cTopology::Node>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cTopology::Node'", field);
    }
}

const char *cTopology__NodeDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cTopology::Node *pp = omnetpp::fromAnyPtr<cTopology::Node>(object); (void)pp;
    switch (field) {
        case FIELD_module: { const cModule * value = pp->getModule(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_inLink: { const cTopology::LinkIn * value = pp->getLinkIn(i); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_outLink: { const cTopology::LinkOut * value = pp->getLinkOut(i); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_path: { const cTopology::LinkOut * value = pp->getPath(i); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cTopology__NodeDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cTopology::Node *pp = omnetpp::fromAnyPtr<cTopology::Node>(object); (void)pp;
    switch (field) {
        case FIELD_moduleId: return long2string(pp->getModuleId());
        case FIELD_module: { auto obj = pp->getModule(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_weight: return double2string(pp->getWeight());
        case FIELD_enabled: return bool2string(pp->isEnabled());
        case FIELD_inLink: return "";
        case FIELD_outLink: return "";
        case FIELD_distanceToTarget: return double2string(pp->getDistanceToTarget());
        case FIELD_path: return "";
        default: return "";
    }
}

void cTopology__NodeDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology::Node *pp = omnetpp::fromAnyPtr<cTopology::Node>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTopology::Node'", field);
    }
}

omnetpp::cValue cTopology__NodeDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cTopology::Node *pp = omnetpp::fromAnyPtr<cTopology::Node>(object); (void)pp;
    switch (field) {
        case FIELD_moduleId: return pp->getModuleId();
        case FIELD_module: return omnetpp::toAnyPtr(pp->getModule()); break;
        case FIELD_weight: return pp->getWeight();
        case FIELD_enabled: return pp->isEnabled();
        case FIELD_inLink: return omnetpp::toAnyPtr(pp->getLinkIn(i)); break;
        case FIELD_outLink: return omnetpp::toAnyPtr(pp->getLinkOut(i)); break;
        case FIELD_distanceToTarget: return pp->getDistanceToTarget();
        case FIELD_path: return omnetpp::toAnyPtr(pp->getPath(i)); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cTopology::Node' as cValue -- field index out of range?", field);
    }
}

void cTopology__NodeDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology::Node *pp = omnetpp::fromAnyPtr<cTopology::Node>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTopology::Node'", field);
    }
}

const char *cTopology__NodeDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_module: return omnetpp::opp_typename(typeid(cModule));
        case FIELD_inLink: return omnetpp::opp_typename(typeid(cTopology::LinkIn));
        case FIELD_outLink: return omnetpp::opp_typename(typeid(cTopology::LinkOut));
        case FIELD_path: return omnetpp::opp_typename(typeid(cTopology::LinkOut));
        default: return nullptr;
    };
}

omnetpp::any_ptr cTopology__NodeDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cTopology::Node *pp = omnetpp::fromAnyPtr<cTopology::Node>(object); (void)pp;
    switch (field) {
        case FIELD_module: return omnetpp::toAnyPtr(pp->getModule()); break;
        case FIELD_inLink: return omnetpp::toAnyPtr(pp->getLinkIn(i)); break;
        case FIELD_outLink: return omnetpp::toAnyPtr(pp->getLinkOut(i)); break;
        case FIELD_path: return omnetpp::toAnyPtr(pp->getPath(i)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cTopology__NodeDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology::Node *pp = omnetpp::fromAnyPtr<cTopology::Node>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTopology::Node'", field);
    }
}

class cTopology__LinkDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_weight,
        FIELD_enabled,
    };
  public:
    cTopology__LinkDescriptor();
    virtual ~cTopology__LinkDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cTopology__LinkDescriptor)

cTopology__LinkDescriptor::cTopology__LinkDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cTopology::Link)), "")
{
    propertyNames = nullptr;
}

cTopology__LinkDescriptor::~cTopology__LinkDescriptor()
{
    delete[] propertyNames;
}

bool cTopology__LinkDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cTopology::Link *>(obj)!=nullptr;
}

const char **cTopology__LinkDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "polymorphic",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cTopology__LinkDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "polymorphic")) return "false";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cTopology__LinkDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cTopology__LinkDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_weight
        0,    // FIELD_enabled
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cTopology__LinkDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "weight",
        "enabled",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cTopology__LinkDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "weight") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "enabled") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cTopology__LinkDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_weight
        "bool",    // FIELD_enabled
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cTopology__LinkDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_weight: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_enabled: {
            static const char *names[] = { "getter", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cTopology__LinkDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_weight:
            if (!strcmp(propertyName, "hint")) return "Link weight -- affects graph algorithms such as shortest path";
            return nullptr;
        case FIELD_enabled:
            if (!strcmp(propertyName, "getter")) return "isEnabled";
            if (!strcmp(propertyName, "hint")) return "Link state -- affects graph algorithms such as shortest path";
            return nullptr;
        default: return nullptr;
    }
}

int cTopology__LinkDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cTopology::Link *pp = omnetpp::fromAnyPtr<cTopology::Link>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cTopology__LinkDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology::Link *pp = omnetpp::fromAnyPtr<cTopology::Link>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cTopology::Link'", field);
    }
}

const char *cTopology__LinkDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cTopology::Link *pp = omnetpp::fromAnyPtr<cTopology::Link>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cTopology__LinkDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cTopology::Link *pp = omnetpp::fromAnyPtr<cTopology::Link>(object); (void)pp;
    switch (field) {
        case FIELD_weight: return double2string(pp->getWeight());
        case FIELD_enabled: return bool2string(pp->isEnabled());
        default: return "";
    }
}

void cTopology__LinkDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology::Link *pp = omnetpp::fromAnyPtr<cTopology::Link>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTopology::Link'", field);
    }
}

omnetpp::cValue cTopology__LinkDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cTopology::Link *pp = omnetpp::fromAnyPtr<cTopology::Link>(object); (void)pp;
    switch (field) {
        case FIELD_weight: return pp->getWeight();
        case FIELD_enabled: return pp->isEnabled();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cTopology::Link' as cValue -- field index out of range?", field);
    }
}

void cTopology__LinkDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology::Link *pp = omnetpp::fromAnyPtr<cTopology::Link>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTopology::Link'", field);
    }
}

const char *cTopology__LinkDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cTopology__LinkDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cTopology::Link *pp = omnetpp::fromAnyPtr<cTopology::Link>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cTopology__LinkDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology::Link *pp = omnetpp::fromAnyPtr<cTopology::Link>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTopology::Link'", field);
    }
}

class cTopology__LinkInDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_remoteNode,
        FIELD_remoteGate,
        FIELD_localGate,
    };
  public:
    cTopology__LinkInDescriptor();
    virtual ~cTopology__LinkInDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cTopology__LinkInDescriptor)

cTopology__LinkInDescriptor::cTopology__LinkInDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cTopology::LinkIn)), "omnetpp::cTopology::Link")
{
    propertyNames = nullptr;
}

cTopology__LinkInDescriptor::~cTopology__LinkInDescriptor()
{
    delete[] propertyNames;
}

bool cTopology__LinkInDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cTopology::LinkIn *>(obj)!=nullptr;
}

const char **cTopology__LinkInDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "polymorphic",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cTopology__LinkInDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "polymorphic")) return "false";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cTopology__LinkInDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 3+base->getFieldCount() : 3;
}

unsigned int cTopology__LinkInDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISCOMPOUND | FD_ISPOINTER,    // FIELD_remoteNode
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_remoteGate
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_localGate
    };
    return (field >= 0 && field < 3) ? fieldTypeFlags[field] : 0;
}

const char *cTopology__LinkInDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "remoteNode",
        "remoteGate",
        "localGate",
    };
    return (field >= 0 && field < 3) ? fieldNames[field] : nullptr;
}

int cTopology__LinkInDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "remoteNode") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "remoteGate") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "localGate") == 0) return baseIndex + 2;
    return base ? base->findField(fieldName) : -1;
}

const char *cTopology__LinkInDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cTopology::Node",    // FIELD_remoteNode
        "omnetpp::cGate",    // FIELD_remoteGate
        "omnetpp::cGate",    // FIELD_localGate
    };
    return (field >= 0 && field < 3) ? fieldTypeStrings[field] : nullptr;
}

const char **cTopology__LinkInDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_remoteNode: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_remoteGate: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_localGate: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cTopology__LinkInDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_remoteNode:
            if (!strcmp(propertyName, "hint")) return "The node at the remote end of this connection";
            return nullptr;
        case FIELD_remoteGate:
            if (!strcmp(propertyName, "hint")) return "The gate at the remote end of this connection";
            return nullptr;
        case FIELD_localGate:
            if (!strcmp(propertyName, "hint")) return "The gate at the local end of this connection";
            return nullptr;
        default: return nullptr;
    }
}

int cTopology__LinkInDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cTopology::LinkIn *pp = omnetpp::fromAnyPtr<cTopology::LinkIn>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cTopology__LinkInDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology::LinkIn *pp = omnetpp::fromAnyPtr<cTopology::LinkIn>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cTopology::LinkIn'", field);
    }
}

const char *cTopology__LinkInDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cTopology::LinkIn *pp = omnetpp::fromAnyPtr<cTopology::LinkIn>(object); (void)pp;
    switch (field) {
        case FIELD_remoteNode: { const cTopology::Node * value = pp->getRemoteNode(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_remoteGate: { const cGate * value = pp->getRemoteGate(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_localGate: { const cGate * value = pp->getLocalGate(); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cTopology__LinkInDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cTopology::LinkIn *pp = omnetpp::fromAnyPtr<cTopology::LinkIn>(object); (void)pp;
    switch (field) {
        case FIELD_remoteNode: return "";
        case FIELD_remoteGate: { auto obj = pp->getRemoteGate(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_localGate: { auto obj = pp->getLocalGate(); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cTopology__LinkInDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology::LinkIn *pp = omnetpp::fromAnyPtr<cTopology::LinkIn>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTopology::LinkIn'", field);
    }
}

omnetpp::cValue cTopology__LinkInDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cTopology::LinkIn *pp = omnetpp::fromAnyPtr<cTopology::LinkIn>(object); (void)pp;
    switch (field) {
        case FIELD_remoteNode: return omnetpp::toAnyPtr(pp->getRemoteNode()); break;
        case FIELD_remoteGate: return omnetpp::toAnyPtr(pp->getRemoteGate()); break;
        case FIELD_localGate: return omnetpp::toAnyPtr(pp->getLocalGate()); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cTopology::LinkIn' as cValue -- field index out of range?", field);
    }
}

void cTopology__LinkInDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology::LinkIn *pp = omnetpp::fromAnyPtr<cTopology::LinkIn>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTopology::LinkIn'", field);
    }
}

const char *cTopology__LinkInDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_remoteNode: return omnetpp::opp_typename(typeid(cTopology::Node));
        case FIELD_remoteGate: return omnetpp::opp_typename(typeid(cGate));
        case FIELD_localGate: return omnetpp::opp_typename(typeid(cGate));
        default: return nullptr;
    };
}

omnetpp::any_ptr cTopology__LinkInDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cTopology::LinkIn *pp = omnetpp::fromAnyPtr<cTopology::LinkIn>(object); (void)pp;
    switch (field) {
        case FIELD_remoteNode: return omnetpp::toAnyPtr(pp->getRemoteNode()); break;
        case FIELD_remoteGate: return omnetpp::toAnyPtr(pp->getRemoteGate()); break;
        case FIELD_localGate: return omnetpp::toAnyPtr(pp->getLocalGate()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cTopology__LinkInDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology::LinkIn *pp = omnetpp::fromAnyPtr<cTopology::LinkIn>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTopology::LinkIn'", field);
    }
}

class cTopology__LinkOutDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_remoteNode,
        FIELD_remoteGate,
        FIELD_localGate,
    };
  public:
    cTopology__LinkOutDescriptor();
    virtual ~cTopology__LinkOutDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cTopology__LinkOutDescriptor)

cTopology__LinkOutDescriptor::cTopology__LinkOutDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cTopology::LinkOut)), "omnetpp::cTopology::Link")
{
    propertyNames = nullptr;
}

cTopology__LinkOutDescriptor::~cTopology__LinkOutDescriptor()
{
    delete[] propertyNames;
}

bool cTopology__LinkOutDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cTopology::LinkOut *>(obj)!=nullptr;
}

const char **cTopology__LinkOutDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "polymorphic",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cTopology__LinkOutDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "polymorphic")) return "false";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cTopology__LinkOutDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 3+base->getFieldCount() : 3;
}

unsigned int cTopology__LinkOutDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISCOMPOUND | FD_ISPOINTER,    // FIELD_remoteNode
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_remoteGate
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_localGate
    };
    return (field >= 0 && field < 3) ? fieldTypeFlags[field] : 0;
}

const char *cTopology__LinkOutDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "remoteNode",
        "remoteGate",
        "localGate",
    };
    return (field >= 0 && field < 3) ? fieldNames[field] : nullptr;
}

int cTopology__LinkOutDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "remoteNode") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "remoteGate") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "localGate") == 0) return baseIndex + 2;
    return base ? base->findField(fieldName) : -1;
}

const char *cTopology__LinkOutDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cTopology::Node",    // FIELD_remoteNode
        "omnetpp::cGate",    // FIELD_remoteGate
        "omnetpp::cGate",    // FIELD_localGate
    };
    return (field >= 0 && field < 3) ? fieldTypeStrings[field] : nullptr;
}

const char **cTopology__LinkOutDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_remoteNode: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_remoteGate: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_localGate: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cTopology__LinkOutDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_remoteNode:
            if (!strcmp(propertyName, "hint")) return "The node at the remote end of this connection";
            return nullptr;
        case FIELD_remoteGate:
            if (!strcmp(propertyName, "hint")) return "The gate at the remote end of this connection";
            return nullptr;
        case FIELD_localGate:
            if (!strcmp(propertyName, "hint")) return "The gate at the local end of this connection";
            return nullptr;
        default: return nullptr;
    }
}

int cTopology__LinkOutDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cTopology::LinkOut *pp = omnetpp::fromAnyPtr<cTopology::LinkOut>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cTopology__LinkOutDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology::LinkOut *pp = omnetpp::fromAnyPtr<cTopology::LinkOut>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cTopology::LinkOut'", field);
    }
}

const char *cTopology__LinkOutDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cTopology::LinkOut *pp = omnetpp::fromAnyPtr<cTopology::LinkOut>(object); (void)pp;
    switch (field) {
        case FIELD_remoteNode: { const cTopology::Node * value = pp->getRemoteNode(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_remoteGate: { const cGate * value = pp->getRemoteGate(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_localGate: { const cGate * value = pp->getLocalGate(); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cTopology__LinkOutDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cTopology::LinkOut *pp = omnetpp::fromAnyPtr<cTopology::LinkOut>(object); (void)pp;
    switch (field) {
        case FIELD_remoteNode: return "";
        case FIELD_remoteGate: { auto obj = pp->getRemoteGate(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_localGate: { auto obj = pp->getLocalGate(); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cTopology__LinkOutDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology::LinkOut *pp = omnetpp::fromAnyPtr<cTopology::LinkOut>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTopology::LinkOut'", field);
    }
}

omnetpp::cValue cTopology__LinkOutDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cTopology::LinkOut *pp = omnetpp::fromAnyPtr<cTopology::LinkOut>(object); (void)pp;
    switch (field) {
        case FIELD_remoteNode: return omnetpp::toAnyPtr(pp->getRemoteNode()); break;
        case FIELD_remoteGate: return omnetpp::toAnyPtr(pp->getRemoteGate()); break;
        case FIELD_localGate: return omnetpp::toAnyPtr(pp->getLocalGate()); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cTopology::LinkOut' as cValue -- field index out of range?", field);
    }
}

void cTopology__LinkOutDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology::LinkOut *pp = omnetpp::fromAnyPtr<cTopology::LinkOut>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTopology::LinkOut'", field);
    }
}

const char *cTopology__LinkOutDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_remoteNode: return omnetpp::opp_typename(typeid(cTopology::Node));
        case FIELD_remoteGate: return omnetpp::opp_typename(typeid(cGate));
        case FIELD_localGate: return omnetpp::opp_typename(typeid(cGate));
        default: return nullptr;
    };
}

omnetpp::any_ptr cTopology__LinkOutDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cTopology::LinkOut *pp = omnetpp::fromAnyPtr<cTopology::LinkOut>(object); (void)pp;
    switch (field) {
        case FIELD_remoteNode: return omnetpp::toAnyPtr(pp->getRemoteNode()); break;
        case FIELD_remoteGate: return omnetpp::toAnyPtr(pp->getRemoteGate()); break;
        case FIELD_localGate: return omnetpp::toAnyPtr(pp->getLocalGate()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cTopology__LinkOutDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology::LinkOut *pp = omnetpp::fromAnyPtr<cTopology::LinkOut>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTopology::LinkOut'", field);
    }
}

class cTopologyDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_numNodes,
        FIELD_node,
    };
  public:
    cTopologyDescriptor();
    virtual ~cTopologyDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cTopologyDescriptor)

cTopologyDescriptor::cTopologyDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cTopology)), "omnetpp::cOwnedObject")
{
    propertyNames = nullptr;
}

cTopologyDescriptor::~cTopologyDescriptor()
{
    delete[] propertyNames;
}

bool cTopologyDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cTopology *>(obj)!=nullptr;
}

const char **cTopologyDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cTopologyDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cTopologyDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cTopologyDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_numNodes
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER,    // FIELD_node
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cTopologyDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "numNodes",
        "node",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cTopologyDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "numNodes") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "node") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cTopologyDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "int",    // FIELD_numNodes
        "omnetpp::cTopology::Node",    // FIELD_node
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cTopologyDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_numNodes: {
            static const char *names[] = { "group", "hint",  nullptr };
            return names;
        }
        case FIELD_node: {
            static const char *names[] = { "sizeGetter", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cTopologyDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_numNodes:
            if (!strcmp(propertyName, "group")) return "fields";
            if (!strcmp(propertyName, "hint")) return "Number of nodes in this topology object";
            return nullptr;
        case FIELD_node:
            if (!strcmp(propertyName, "sizeGetter")) return "getNumNodes";
            if (!strcmp(propertyName, "hint")) return "List of nodes in this topology object";
            return nullptr;
        default: return nullptr;
    }
}

int cTopologyDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cTopology *pp = omnetpp::fromAnyPtr<cTopology>(object); (void)pp;
    switch (field) {
        case FIELD_node: return pp->getNumNodes();
        default: return 0;
    }
}

void cTopologyDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology *pp = omnetpp::fromAnyPtr<cTopology>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cTopology'", field);
    }
}

const char *cTopologyDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cTopology *pp = omnetpp::fromAnyPtr<cTopology>(object); (void)pp;
    switch (field) {
        case FIELD_node: { const cTopology::Node * value = pp->getNode(i); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cTopologyDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cTopology *pp = omnetpp::fromAnyPtr<cTopology>(object); (void)pp;
    switch (field) {
        case FIELD_numNodes: return long2string(pp->getNumNodes());
        case FIELD_node: return "";
        default: return "";
    }
}

void cTopologyDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology *pp = omnetpp::fromAnyPtr<cTopology>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTopology'", field);
    }
}

omnetpp::cValue cTopologyDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cTopology *pp = omnetpp::fromAnyPtr<cTopology>(object); (void)pp;
    switch (field) {
        case FIELD_numNodes: return pp->getNumNodes();
        case FIELD_node: return omnetpp::toAnyPtr(pp->getNode(i)); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cTopology' as cValue -- field index out of range?", field);
    }
}

void cTopologyDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology *pp = omnetpp::fromAnyPtr<cTopology>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTopology'", field);
    }
}

const char *cTopologyDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_node: return omnetpp::opp_typename(typeid(cTopology::Node));
        default: return nullptr;
    };
}

omnetpp::any_ptr cTopologyDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cTopology *pp = omnetpp::fromAnyPtr<cTopology>(object); (void)pp;
    switch (field) {
        case FIELD_node: return omnetpp::toAnyPtr(pp->getNode(i)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cTopologyDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cTopology *pp = omnetpp::fromAnyPtr<cTopology>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTopology'", field);
    }
}

class cXMLElementDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_tagName,
        FIELD_nodeValue,
        FIELD_sourceLocation,
        FIELD_attributes,
        FIELD_children,
        FIELD_xml,
    };
  public:
    cXMLElementDescriptor();
    virtual ~cXMLElementDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cXMLElementDescriptor)

cXMLElementDescriptor::cXMLElementDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cXMLElement)), "omnetpp::cObject")
{
    propertyNames = nullptr;
}

cXMLElementDescriptor::~cXMLElementDescriptor()
{
    delete[] propertyNames;
}

bool cXMLElementDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cXMLElement *>(obj)!=nullptr;
}

const char **cXMLElementDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cXMLElementDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cXMLElementDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 6+base->getFieldCount() : 6;
}

unsigned int cXMLElementDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_tagName
        0,    // FIELD_nodeValue
        0,    // FIELD_sourceLocation
        FD_ISARRAY,    // FIELD_attributes
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_children
        0,    // FIELD_xml
    };
    return (field >= 0 && field < 6) ? fieldTypeFlags[field] : 0;
}

const char *cXMLElementDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "tagName",
        "nodeValue",
        "sourceLocation",
        "attributes",
        "children",
        "xml",
    };
    return (field >= 0 && field < 6) ? fieldNames[field] : nullptr;
}

int cXMLElementDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "tagName") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "nodeValue") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "sourceLocation") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "attributes") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "children") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "xml") == 0) return baseIndex + 5;
    return base ? base->findField(fieldName) : -1;
}

const char *cXMLElementDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "string",    // FIELD_tagName
        "string",    // FIELD_nodeValue
        "string",    // FIELD_sourceLocation
        "string",    // FIELD_attributes
        "omnetpp::cXMLElement",    // FIELD_children
        "string",    // FIELD_xml
    };
    return (field >= 0 && field < 6) ? fieldTypeStrings[field] : nullptr;
}

const char **cXMLElementDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_tagName: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_nodeValue: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_sourceLocation: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        case FIELD_attributes: {
            static const char *names[] = { "getter", "sizeGetter", "hint",  nullptr };
            return names;
        }
        case FIELD_children: {
            static const char *names[] = { "getter", "sizeGetter", "hint",  nullptr };
            return names;
        }
        case FIELD_xml: {
            static const char *names[] = { "getter", "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cXMLElementDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_tagName:
            if (!strcmp(propertyName, "hint")) return "XML element tag";
            return nullptr;
        case FIELD_nodeValue:
            if (!strcmp(propertyName, "hint")) return "Contents of text node inside this XML element";
            return nullptr;
        case FIELD_sourceLocation:
            if (!strcmp(propertyName, "hint")) return "Location this XML element was parsed from";
            return nullptr;
        case FIELD_attributes:
            if (!strcmp(propertyName, "getter")) return "getAttrDesc";
            if (!strcmp(propertyName, "sizeGetter")) return "getNumAttrs";
            if (!strcmp(propertyName, "hint")) return "Attributes";
            return nullptr;
        case FIELD_children:
            if (!strcmp(propertyName, "getter")) return "getChild";
            if (!strcmp(propertyName, "sizeGetter")) return "getNumChildren";
            if (!strcmp(propertyName, "hint")) return "Child elements";
            return nullptr;
        case FIELD_xml:
            if (!strcmp(propertyName, "getter")) return "getXML";
            if (!strcmp(propertyName, "hint")) return "Element tree as XML fragment";
            return nullptr;
        default: return nullptr;
    }
}

int cXMLElementDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cXMLElement *pp = omnetpp::fromAnyPtr<cXMLElement>(object); (void)pp;
    switch (field) {
        case FIELD_attributes: return pp->getNumAttrs();
        case FIELD_children: return pp->getNumChildren();
        default: return 0;
    }
}

void cXMLElementDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cXMLElement *pp = omnetpp::fromAnyPtr<cXMLElement>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cXMLElement'", field);
    }
}

const char *cXMLElementDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cXMLElement *pp = omnetpp::fromAnyPtr<cXMLElement>(object); (void)pp;
    switch (field) {
        case FIELD_children: { const cXMLElement * value = pp->getChild(i); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cXMLElementDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cXMLElement *pp = omnetpp::fromAnyPtr<cXMLElement>(object); (void)pp;
    switch (field) {
        case FIELD_tagName: return oppstring2string(pp->getTagName());
        case FIELD_nodeValue: return oppstring2string(pp->getNodeValue());
        case FIELD_sourceLocation: return oppstring2string(pp->getSourceLocation());
        case FIELD_attributes: return oppstring2string(pp->getAttrDesc(i));
        case FIELD_children: { auto obj = pp->getChild(i); return obj == nullptr ? "" : obj->str(); }
        case FIELD_xml: return oppstring2string(pp->getXML());
        default: return "";
    }
}

void cXMLElementDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cXMLElement *pp = omnetpp::fromAnyPtr<cXMLElement>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cXMLElement'", field);
    }
}

omnetpp::cValue cXMLElementDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cXMLElement *pp = omnetpp::fromAnyPtr<cXMLElement>(object); (void)pp;
    switch (field) {
        case FIELD_tagName: return pp->getTagName();
        case FIELD_nodeValue: return pp->getNodeValue();
        case FIELD_sourceLocation: return pp->getSourceLocation();
        case FIELD_attributes: return pp->getAttrDesc(i);
        case FIELD_children: return omnetpp::toAnyPtr(pp->getChild(i)); break;
        case FIELD_xml: return pp->getXML();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cXMLElement' as cValue -- field index out of range?", field);
    }
}

void cXMLElementDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cXMLElement *pp = omnetpp::fromAnyPtr<cXMLElement>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cXMLElement'", field);
    }
}

const char *cXMLElementDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_children: return omnetpp::opp_typename(typeid(cXMLElement));
        default: return nullptr;
    };
}

omnetpp::any_ptr cXMLElementDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cXMLElement *pp = omnetpp::fromAnyPtr<cXMLElement>(object); (void)pp;
    switch (field) {
        case FIELD_children: return omnetpp::toAnyPtr(pp->getChild(i)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cXMLElementDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cXMLElement *pp = omnetpp::fromAnyPtr<cXMLElement>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cXMLElement'", field);
    }
}

class cFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_id,
        FIELD_visible,
        FIELD_zIndex,
        FIELD_tooltip,
        FIELD_associatedObject,
        FIELD_tags,
        FIELD_transform,
        FIELD_children,
    };
  public:
    cFigureDescriptor();
    virtual ~cFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cFigureDescriptor)

cFigureDescriptor::cFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cFigure)), "omnetpp::cOwnedObject")
{
    propertyNames = nullptr;
}

cFigureDescriptor::~cFigureDescriptor()
{
    delete[] propertyNames;
}

bool cFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cFigure *>(obj)!=nullptr;
}

const char **cFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 8+base->getFieldCount() : 8;
}

unsigned int cFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_id
        FD_ISEDITABLE,    // FIELD_visible
        FD_ISEDITABLE,    // FIELD_zIndex
        FD_ISEDITABLE,    // FIELD_tooltip
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_associatedObject
        FD_ISEDITABLE,    // FIELD_tags
        FD_ISEDITABLE,    // FIELD_transform
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_children
    };
    return (field >= 0 && field < 8) ? fieldTypeFlags[field] : 0;
}

const char *cFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "id",
        "visible",
        "zIndex",
        "tooltip",
        "associatedObject",
        "tags",
        "transform",
        "children",
    };
    return (field >= 0 && field < 8) ? fieldNames[field] : nullptr;
}

int cFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "id") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "visible") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "zIndex") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "tooltip") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "associatedObject") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "tags") == 0) return baseIndex + 5;
    if (strcmp(fieldName, "transform") == 0) return baseIndex + 6;
    if (strcmp(fieldName, "children") == 0) return baseIndex + 7;
    return base ? base->findField(fieldName) : -1;
}

const char *cFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "int",    // FIELD_id
        "bool",    // FIELD_visible
        "double",    // FIELD_zIndex
        "string",    // FIELD_tooltip
        "omnetpp::cObject",    // FIELD_associatedObject
        "string",    // FIELD_tags
        "omnetpp::cFigure::Transform",    // FIELD_transform
        "omnetpp::cFigure",    // FIELD_children
    };
    return (field >= 0 && field < 8) ? fieldTypeStrings[field] : nullptr;
}

const char **cFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_id: {
            static const char *names[] = { "group",  nullptr };
            return names;
        }
        case FIELD_visible: {
            static const char *names[] = { "group", "getter", "editable",  nullptr };
            return names;
        }
        case FIELD_zIndex: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_tooltip: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_associatedObject: {
            static const char *names[] = { "group",  nullptr };
            return names;
        }
        case FIELD_tags: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_transform: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_children: {
            static const char *names[] = { "group", "getter", "sizeGetter",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_id:
            if (!strcmp(propertyName, "group")) return "figure";
            return nullptr;
        case FIELD_visible:
            if (!strcmp(propertyName, "group")) return "figure";
            if (!strcmp(propertyName, "getter")) return "isVisible";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_zIndex:
            if (!strcmp(propertyName, "group")) return "figure";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_tooltip:
            if (!strcmp(propertyName, "group")) return "figure";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_associatedObject:
            if (!strcmp(propertyName, "group")) return "figure";
            return nullptr;
        case FIELD_tags:
            if (!strcmp(propertyName, "group")) return "figure";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_transform:
            if (!strcmp(propertyName, "group")) return "figure";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_children:
            if (!strcmp(propertyName, "group")) return "figure";
            if (!strcmp(propertyName, "getter")) return "getFigure";
            if (!strcmp(propertyName, "sizeGetter")) return "getNumFigures";
            return nullptr;
        default: return nullptr;
    }
}

int cFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cFigure *pp = omnetpp::fromAnyPtr<cFigure>(object); (void)pp;
    switch (field) {
        case FIELD_children: return pp->getNumFigures();
        default: return 0;
    }
}

void cFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cFigure *pp = omnetpp::fromAnyPtr<cFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cFigure'", field);
    }
}

const char *cFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cFigure *pp = omnetpp::fromAnyPtr<cFigure>(object); (void)pp;
    switch (field) {
        case FIELD_associatedObject: { const cObject * value = pp->getAssociatedObject(); return omnetpp::opp_typename(typeid(*value)); }
        case FIELD_children: { const cFigure * value = pp->getFigure(i); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cFigure *pp = omnetpp::fromAnyPtr<cFigure>(object); (void)pp;
    switch (field) {
        case FIELD_id: return long2string(pp->getId());
        case FIELD_visible: return bool2string(pp->isVisible());
        case FIELD_zIndex: return double2string(pp->getZIndex());
        case FIELD_tooltip: return oppstring2string(pp->getTooltip());
        case FIELD_associatedObject: { auto obj = pp->getAssociatedObject(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_tags: return oppstring2string(pp->getTags());
        case FIELD_transform: return pp->getTransform().str();
        case FIELD_children: { auto obj = pp->getFigure(i); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cFigure *pp = omnetpp::fromAnyPtr<cFigure>(object); (void)pp;
    switch (field) {
        case FIELD_visible: pp->setVisible(string2bool(value)); break;
        case FIELD_zIndex: pp->setZIndex(string2double(value)); break;
        case FIELD_tooltip: pp->setTooltip((value)); break;
        case FIELD_tags: pp->setTags((value)); break;
        case FIELD_transform: pp->setTransform(cFigure::parseTransform(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cFigure'", field);
    }
}

omnetpp::cValue cFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cFigure *pp = omnetpp::fromAnyPtr<cFigure>(object); (void)pp;
    switch (field) {
        case FIELD_id: return pp->getId();
        case FIELD_visible: return pp->isVisible();
        case FIELD_zIndex: return pp->getZIndex();
        case FIELD_tooltip: return pp->getTooltip();
        case FIELD_associatedObject: return omnetpp::toAnyPtr(pp->getAssociatedObject()); break;
        case FIELD_tags: return pp->getTags();
        case FIELD_transform: return pp->getTransform().str();
        case FIELD_children: return omnetpp::toAnyPtr(pp->getFigure(i)); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cFigure' as cValue -- field index out of range?", field);
    }
}

void cFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cFigure *pp = omnetpp::fromAnyPtr<cFigure>(object); (void)pp;
    switch (field) {
        case FIELD_visible: pp->setVisible(value.boolValue()); break;
        case FIELD_zIndex: pp->setZIndex(value.doubleValue()); break;
        case FIELD_tooltip: pp->setTooltip(value.stringValue()); break;
        case FIELD_tags: pp->setTags(value.stringValue()); break;
        case FIELD_transform: pp->setTransform(cFigure::parseTransform(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cFigure'", field);
    }
}

const char *cFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_associatedObject: return omnetpp::opp_typename(typeid(cObject));
        case FIELD_children: return omnetpp::opp_typename(typeid(cFigure));
        default: return nullptr;
    };
}

omnetpp::any_ptr cFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cFigure *pp = omnetpp::fromAnyPtr<cFigure>(object); (void)pp;
    switch (field) {
        case FIELD_associatedObject: return omnetpp::toAnyPtr(pp->getAssociatedObject()); break;
        case FIELD_transform: return omnetpp::toAnyPtr(&pp->getTransform()); break;
        case FIELD_children: return omnetpp::toAnyPtr(pp->getFigure(i)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cFigure *pp = omnetpp::fromAnyPtr<cFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cFigure'", field);
    }
}

class cGroupFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cGroupFigureDescriptor();
    virtual ~cGroupFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cGroupFigureDescriptor)

cGroupFigureDescriptor::cGroupFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cGroupFigure)), "omnetpp::cFigure")
{
    propertyNames = nullptr;
}

cGroupFigureDescriptor::~cGroupFigureDescriptor()
{
    delete[] propertyNames;
}

bool cGroupFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cGroupFigure *>(obj)!=nullptr;
}

const char **cGroupFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cGroupFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cGroupFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cGroupFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cGroupFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cGroupFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cGroupFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cGroupFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cGroupFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cGroupFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cGroupFigure *pp = omnetpp::fromAnyPtr<cGroupFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cGroupFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cGroupFigure *pp = omnetpp::fromAnyPtr<cGroupFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cGroupFigure'", field);
    }
}

const char *cGroupFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cGroupFigure *pp = omnetpp::fromAnyPtr<cGroupFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cGroupFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cGroupFigure *pp = omnetpp::fromAnyPtr<cGroupFigure>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cGroupFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cGroupFigure *pp = omnetpp::fromAnyPtr<cGroupFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cGroupFigure'", field);
    }
}

omnetpp::cValue cGroupFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cGroupFigure *pp = omnetpp::fromAnyPtr<cGroupFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cGroupFigure' as cValue -- field index out of range?", field);
    }
}

void cGroupFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cGroupFigure *pp = omnetpp::fromAnyPtr<cGroupFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cGroupFigure'", field);
    }
}

const char *cGroupFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cGroupFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cGroupFigure *pp = omnetpp::fromAnyPtr<cGroupFigure>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cGroupFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cGroupFigure *pp = omnetpp::fromAnyPtr<cGroupFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cGroupFigure'", field);
    }
}

class cPanelFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_position,
        FIELD_anchorPoint,
    };
  public:
    cPanelFigureDescriptor();
    virtual ~cPanelFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cPanelFigureDescriptor)

cPanelFigureDescriptor::cPanelFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cPanelFigure)), "omnetpp::cFigure")
{
    propertyNames = nullptr;
}

cPanelFigureDescriptor::~cPanelFigureDescriptor()
{
    delete[] propertyNames;
}

bool cPanelFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cPanelFigure *>(obj)!=nullptr;
}

const char **cPanelFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cPanelFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cPanelFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cPanelFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_position
        FD_ISEDITABLE,    // FIELD_anchorPoint
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cPanelFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "position",
        "anchorPoint",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cPanelFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "position") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "anchorPoint") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cPanelFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cFigure::Point",    // FIELD_position
        "omnetpp::cFigure::Point",    // FIELD_anchorPoint
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cPanelFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_position: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_anchorPoint: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cPanelFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_position:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_anchorPoint:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        default: return nullptr;
    }
}

int cPanelFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cPanelFigure *pp = omnetpp::fromAnyPtr<cPanelFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cPanelFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cPanelFigure *pp = omnetpp::fromAnyPtr<cPanelFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cPanelFigure'", field);
    }
}

const char *cPanelFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cPanelFigure *pp = omnetpp::fromAnyPtr<cPanelFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cPanelFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cPanelFigure *pp = omnetpp::fromAnyPtr<cPanelFigure>(object); (void)pp;
    switch (field) {
        case FIELD_position: return pp->getPosition().str();
        case FIELD_anchorPoint: return pp->getAnchorPoint().str();
        default: return "";
    }
}

void cPanelFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPanelFigure *pp = omnetpp::fromAnyPtr<cPanelFigure>(object); (void)pp;
    switch (field) {
        case FIELD_position: pp->setPosition(cFigure::parsePoint(value)); break;
        case FIELD_anchorPoint: pp->setAnchorPoint(cFigure::parsePoint(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPanelFigure'", field);
    }
}

omnetpp::cValue cPanelFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cPanelFigure *pp = omnetpp::fromAnyPtr<cPanelFigure>(object); (void)pp;
    switch (field) {
        case FIELD_position: return pp->getPosition().str();
        case FIELD_anchorPoint: return pp->getAnchorPoint().str();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cPanelFigure' as cValue -- field index out of range?", field);
    }
}

void cPanelFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPanelFigure *pp = omnetpp::fromAnyPtr<cPanelFigure>(object); (void)pp;
    switch (field) {
        case FIELD_position: pp->setPosition(cFigure::parsePoint(value)); break;
        case FIELD_anchorPoint: pp->setAnchorPoint(cFigure::parsePoint(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPanelFigure'", field);
    }
}

const char *cPanelFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cPanelFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cPanelFigure *pp = omnetpp::fromAnyPtr<cPanelFigure>(object); (void)pp;
    switch (field) {
        case FIELD_position: return omnetpp::toAnyPtr(&pp->getPosition()); break;
        case FIELD_anchorPoint: return omnetpp::toAnyPtr(&pp->getAnchorPoint()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cPanelFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cPanelFigure *pp = omnetpp::fromAnyPtr<cPanelFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPanelFigure'", field);
    }
}

class cAbstractLineFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_lineColor,
        FIELD_lineStyle,
        FIELD_lineWidth,
        FIELD_lineOpacity,
        FIELD_capStyle,
        FIELD_startArrowhead,
        FIELD_endArrowhead,
        FIELD_zoomLineWidth,
    };
  public:
    cAbstractLineFigureDescriptor();
    virtual ~cAbstractLineFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cAbstractLineFigureDescriptor)

cAbstractLineFigureDescriptor::cAbstractLineFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cAbstractLineFigure)), "omnetpp::cFigure")
{
    propertyNames = nullptr;
}

cAbstractLineFigureDescriptor::~cAbstractLineFigureDescriptor()
{
    delete[] propertyNames;
}

bool cAbstractLineFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cAbstractLineFigure *>(obj)!=nullptr;
}

const char **cAbstractLineFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cAbstractLineFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cAbstractLineFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 8+base->getFieldCount() : 8;
}

unsigned int cAbstractLineFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_lineColor
        FD_ISEDITABLE,    // FIELD_lineStyle
        FD_ISEDITABLE,    // FIELD_lineWidth
        FD_ISEDITABLE,    // FIELD_lineOpacity
        FD_ISEDITABLE,    // FIELD_capStyle
        FD_ISEDITABLE,    // FIELD_startArrowhead
        FD_ISEDITABLE,    // FIELD_endArrowhead
        FD_ISEDITABLE,    // FIELD_zoomLineWidth
    };
    return (field >= 0 && field < 8) ? fieldTypeFlags[field] : 0;
}

const char *cAbstractLineFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "lineColor",
        "lineStyle",
        "lineWidth",
        "lineOpacity",
        "capStyle",
        "startArrowhead",
        "endArrowhead",
        "zoomLineWidth",
    };
    return (field >= 0 && field < 8) ? fieldNames[field] : nullptr;
}

int cAbstractLineFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "lineColor") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "lineStyle") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "lineWidth") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "lineOpacity") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "capStyle") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "startArrowhead") == 0) return baseIndex + 5;
    if (strcmp(fieldName, "endArrowhead") == 0) return baseIndex + 6;
    if (strcmp(fieldName, "zoomLineWidth") == 0) return baseIndex + 7;
    return base ? base->findField(fieldName) : -1;
}

const char *cAbstractLineFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cFigure::Color",    // FIELD_lineColor
        "int",    // FIELD_lineStyle
        "double",    // FIELD_lineWidth
        "double",    // FIELD_lineOpacity
        "int",    // FIELD_capStyle
        "int",    // FIELD_startArrowhead
        "int",    // FIELD_endArrowhead
        "bool",    // FIELD_zoomLineWidth
    };
    return (field >= 0 && field < 8) ? fieldTypeStrings[field] : nullptr;
}

const char **cAbstractLineFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_lineColor: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_lineStyle: {
            static const char *names[] = { "group", "editable", "enum", "enum",  nullptr };
            return names;
        }
        case FIELD_lineWidth: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_lineOpacity: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_capStyle: {
            static const char *names[] = { "group", "editable", "enum", "enum",  nullptr };
            return names;
        }
        case FIELD_startArrowhead: {
            static const char *names[] = { "group", "editable", "enum", "enum",  nullptr };
            return names;
        }
        case FIELD_endArrowhead: {
            static const char *names[] = { "group", "editable", "enum", "enum",  nullptr };
            return names;
        }
        case FIELD_zoomLineWidth: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cAbstractLineFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_lineColor:
            if (!strcmp(propertyName, "group")) return "line";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_lineStyle:
            if (!strcmp(propertyName, "group")) return "line";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "enum")) return "cFigure::LineStyle";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cFigure::LineStyle";
            return nullptr;
        case FIELD_lineWidth:
            if (!strcmp(propertyName, "group")) return "line";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_lineOpacity:
            if (!strcmp(propertyName, "group")) return "line";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_capStyle:
            if (!strcmp(propertyName, "group")) return "line";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "enum")) return "cFigure::CapStyle";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cFigure::CapStyle";
            return nullptr;
        case FIELD_startArrowhead:
            if (!strcmp(propertyName, "group")) return "line";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "enum")) return "cFigure::Arrowhead";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cFigure::Arrowhead";
            return nullptr;
        case FIELD_endArrowhead:
            if (!strcmp(propertyName, "group")) return "line";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "enum")) return "cFigure::Arrowhead";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cFigure::Arrowhead";
            return nullptr;
        case FIELD_zoomLineWidth:
            if (!strcmp(propertyName, "group")) return "line";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        default: return nullptr;
    }
}

int cAbstractLineFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cAbstractLineFigure *pp = omnetpp::fromAnyPtr<cAbstractLineFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cAbstractLineFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractLineFigure *pp = omnetpp::fromAnyPtr<cAbstractLineFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cAbstractLineFigure'", field);
    }
}

const char *cAbstractLineFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cAbstractLineFigure *pp = omnetpp::fromAnyPtr<cAbstractLineFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cAbstractLineFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cAbstractLineFigure *pp = omnetpp::fromAnyPtr<cAbstractLineFigure>(object); (void)pp;
    switch (field) {
        case FIELD_lineColor: return pp->getLineColor().str();
        case FIELD_lineStyle: return enum2string(pp->getLineStyle(), "omnetpp::cFigure::LineStyle");
        case FIELD_lineWidth: return double2string(pp->getLineWidth());
        case FIELD_lineOpacity: return double2string(pp->getLineOpacity());
        case FIELD_capStyle: return enum2string(pp->getCapStyle(), "omnetpp::cFigure::CapStyle");
        case FIELD_startArrowhead: return enum2string(pp->getStartArrowhead(), "omnetpp::cFigure::Arrowhead");
        case FIELD_endArrowhead: return enum2string(pp->getEndArrowhead(), "omnetpp::cFigure::Arrowhead");
        case FIELD_zoomLineWidth: return bool2string(pp->getZoomLineWidth());
        default: return "";
    }
}

void cAbstractLineFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractLineFigure *pp = omnetpp::fromAnyPtr<cAbstractLineFigure>(object); (void)pp;
    switch (field) {
        case FIELD_lineColor: pp->setLineColor(cFigure::parseColor(value)); break;
        case FIELD_lineStyle: pp->setLineStyle((omnetpp::cFigure::LineStyle)string2enum(value, "omnetpp::cFigure::LineStyle")); break;
        case FIELD_lineWidth: pp->setLineWidth(string2double(value)); break;
        case FIELD_lineOpacity: pp->setLineOpacity(string2double(value)); break;
        case FIELD_capStyle: pp->setCapStyle((omnetpp::cFigure::CapStyle)string2enum(value, "omnetpp::cFigure::CapStyle")); break;
        case FIELD_startArrowhead: pp->setStartArrowhead((omnetpp::cFigure::Arrowhead)string2enum(value, "omnetpp::cFigure::Arrowhead")); break;
        case FIELD_endArrowhead: pp->setEndArrowhead((omnetpp::cFigure::Arrowhead)string2enum(value, "omnetpp::cFigure::Arrowhead")); break;
        case FIELD_zoomLineWidth: pp->setZoomLineWidth(string2bool(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAbstractLineFigure'", field);
    }
}

omnetpp::cValue cAbstractLineFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cAbstractLineFigure *pp = omnetpp::fromAnyPtr<cAbstractLineFigure>(object); (void)pp;
    switch (field) {
        case FIELD_lineColor: return pp->getLineColor().str();
        case FIELD_lineStyle: return pp->getLineStyle();
        case FIELD_lineWidth: return pp->getLineWidth();
        case FIELD_lineOpacity: return pp->getLineOpacity();
        case FIELD_capStyle: return pp->getCapStyle();
        case FIELD_startArrowhead: return pp->getStartArrowhead();
        case FIELD_endArrowhead: return pp->getEndArrowhead();
        case FIELD_zoomLineWidth: return pp->getZoomLineWidth();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cAbstractLineFigure' as cValue -- field index out of range?", field);
    }
}

void cAbstractLineFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractLineFigure *pp = omnetpp::fromAnyPtr<cAbstractLineFigure>(object); (void)pp;
    switch (field) {
        case FIELD_lineColor: pp->setLineColor(cFigure::parseColor(value)); break;
        case FIELD_lineStyle: pp->setLineStyle((omnetpp::cFigure::LineStyle)value.intValue()); break;
        case FIELD_lineWidth: pp->setLineWidth(value.doubleValue()); break;
        case FIELD_lineOpacity: pp->setLineOpacity(value.doubleValue()); break;
        case FIELD_capStyle: pp->setCapStyle((omnetpp::cFigure::CapStyle)value.intValue()); break;
        case FIELD_startArrowhead: pp->setStartArrowhead((omnetpp::cFigure::Arrowhead)value.intValue()); break;
        case FIELD_endArrowhead: pp->setEndArrowhead((omnetpp::cFigure::Arrowhead)value.intValue()); break;
        case FIELD_zoomLineWidth: pp->setZoomLineWidth(value.boolValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAbstractLineFigure'", field);
    }
}

const char *cAbstractLineFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cAbstractLineFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cAbstractLineFigure *pp = omnetpp::fromAnyPtr<cAbstractLineFigure>(object); (void)pp;
    switch (field) {
        case FIELD_lineColor: return omnetpp::toAnyPtr(&pp->getLineColor()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cAbstractLineFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractLineFigure *pp = omnetpp::fromAnyPtr<cAbstractLineFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAbstractLineFigure'", field);
    }
}

class cLineFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_start,
        FIELD_end,
    };
  public:
    cLineFigureDescriptor();
    virtual ~cLineFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cLineFigureDescriptor)

cLineFigureDescriptor::cLineFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cLineFigure)), "omnetpp::cAbstractLineFigure")
{
    propertyNames = nullptr;
}

cLineFigureDescriptor::~cLineFigureDescriptor()
{
    delete[] propertyNames;
}

bool cLineFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cLineFigure *>(obj)!=nullptr;
}

const char **cLineFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cLineFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cLineFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int cLineFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_start
        FD_ISEDITABLE,    // FIELD_end
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *cLineFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "start",
        "end",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int cLineFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "start") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "end") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *cLineFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cFigure::Point",    // FIELD_start
        "omnetpp::cFigure::Point",    // FIELD_end
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **cLineFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_start: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_end: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cLineFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_start:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_end:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        default: return nullptr;
    }
}

int cLineFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cLineFigure *pp = omnetpp::fromAnyPtr<cLineFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cLineFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cLineFigure *pp = omnetpp::fromAnyPtr<cLineFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cLineFigure'", field);
    }
}

const char *cLineFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cLineFigure *pp = omnetpp::fromAnyPtr<cLineFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cLineFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cLineFigure *pp = omnetpp::fromAnyPtr<cLineFigure>(object); (void)pp;
    switch (field) {
        case FIELD_start: return pp->getStart().str();
        case FIELD_end: return pp->getEnd().str();
        default: return "";
    }
}

void cLineFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cLineFigure *pp = omnetpp::fromAnyPtr<cLineFigure>(object); (void)pp;
    switch (field) {
        case FIELD_start: pp->setStart(cFigure::parsePoint(value)); break;
        case FIELD_end: pp->setEnd(cFigure::parsePoint(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cLineFigure'", field);
    }
}

omnetpp::cValue cLineFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cLineFigure *pp = omnetpp::fromAnyPtr<cLineFigure>(object); (void)pp;
    switch (field) {
        case FIELD_start: return pp->getStart().str();
        case FIELD_end: return pp->getEnd().str();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cLineFigure' as cValue -- field index out of range?", field);
    }
}

void cLineFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cLineFigure *pp = omnetpp::fromAnyPtr<cLineFigure>(object); (void)pp;
    switch (field) {
        case FIELD_start: pp->setStart(cFigure::parsePoint(value)); break;
        case FIELD_end: pp->setEnd(cFigure::parsePoint(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cLineFigure'", field);
    }
}

const char *cLineFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cLineFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cLineFigure *pp = omnetpp::fromAnyPtr<cLineFigure>(object); (void)pp;
    switch (field) {
        case FIELD_start: return omnetpp::toAnyPtr(&pp->getStart()); break;
        case FIELD_end: return omnetpp::toAnyPtr(&pp->getEnd()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cLineFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cLineFigure *pp = omnetpp::fromAnyPtr<cLineFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cLineFigure'", field);
    }
}

class cArcFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_bounds,
        FIELD_startAngle,
        FIELD_endAngle,
    };
  public:
    cArcFigureDescriptor();
    virtual ~cArcFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cArcFigureDescriptor)

cArcFigureDescriptor::cArcFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cArcFigure)), "omnetpp::cAbstractLineFigure")
{
    propertyNames = nullptr;
}

cArcFigureDescriptor::~cArcFigureDescriptor()
{
    delete[] propertyNames;
}

bool cArcFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cArcFigure *>(obj)!=nullptr;
}

const char **cArcFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cArcFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cArcFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 3+base->getFieldCount() : 3;
}

unsigned int cArcFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_bounds
        FD_ISEDITABLE,    // FIELD_startAngle
        FD_ISEDITABLE,    // FIELD_endAngle
    };
    return (field >= 0 && field < 3) ? fieldTypeFlags[field] : 0;
}

const char *cArcFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "bounds",
        "startAngle",
        "endAngle",
    };
    return (field >= 0 && field < 3) ? fieldNames[field] : nullptr;
}

int cArcFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "bounds") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "startAngle") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "endAngle") == 0) return baseIndex + 2;
    return base ? base->findField(fieldName) : -1;
}

const char *cArcFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cFigure::Rectangle",    // FIELD_bounds
        "double",    // FIELD_startAngle
        "double",    // FIELD_endAngle
    };
    return (field >= 0 && field < 3) ? fieldTypeStrings[field] : nullptr;
}

const char **cArcFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_bounds: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_startAngle: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_endAngle: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cArcFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_bounds:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_startAngle:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_endAngle:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        default: return nullptr;
    }
}

int cArcFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cArcFigure *pp = omnetpp::fromAnyPtr<cArcFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cArcFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cArcFigure *pp = omnetpp::fromAnyPtr<cArcFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cArcFigure'", field);
    }
}

const char *cArcFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cArcFigure *pp = omnetpp::fromAnyPtr<cArcFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cArcFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cArcFigure *pp = omnetpp::fromAnyPtr<cArcFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: return pp->getBounds().str();
        case FIELD_startAngle: return double2string(pp->getStartAngle());
        case FIELD_endAngle: return double2string(pp->getEndAngle());
        default: return "";
    }
}

void cArcFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cArcFigure *pp = omnetpp::fromAnyPtr<cArcFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: pp->setBounds(cFigure::parseRectangle(value)); break;
        case FIELD_startAngle: pp->setStartAngle(string2double(value)); break;
        case FIELD_endAngle: pp->setEndAngle(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cArcFigure'", field);
    }
}

omnetpp::cValue cArcFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cArcFigure *pp = omnetpp::fromAnyPtr<cArcFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: return pp->getBounds().str();
        case FIELD_startAngle: return pp->getStartAngle();
        case FIELD_endAngle: return pp->getEndAngle();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cArcFigure' as cValue -- field index out of range?", field);
    }
}

void cArcFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cArcFigure *pp = omnetpp::fromAnyPtr<cArcFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: pp->setBounds(cFigure::parseRectangle(value)); break;
        case FIELD_startAngle: pp->setStartAngle(value.doubleValue()); break;
        case FIELD_endAngle: pp->setEndAngle(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cArcFigure'", field);
    }
}

const char *cArcFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cArcFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cArcFigure *pp = omnetpp::fromAnyPtr<cArcFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: return omnetpp::toAnyPtr(&pp->getBounds()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cArcFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cArcFigure *pp = omnetpp::fromAnyPtr<cArcFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cArcFigure'", field);
    }
}

class cPolylineFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_points,
        FIELD_smooth,
        FIELD_joinStyle,
    };
  public:
    cPolylineFigureDescriptor();
    virtual ~cPolylineFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cPolylineFigureDescriptor)

cPolylineFigureDescriptor::cPolylineFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cPolylineFigure)), "omnetpp::cAbstractLineFigure")
{
    propertyNames = nullptr;
}

cPolylineFigureDescriptor::~cPolylineFigureDescriptor()
{
    delete[] propertyNames;
}

bool cPolylineFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cPolylineFigure *>(obj)!=nullptr;
}

const char **cPolylineFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cPolylineFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cPolylineFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 3+base->getFieldCount() : 3;
}

unsigned int cPolylineFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISARRAY | FD_ISEDITABLE,    // FIELD_points
        FD_ISEDITABLE,    // FIELD_smooth
        FD_ISEDITABLE,    // FIELD_joinStyle
    };
    return (field >= 0 && field < 3) ? fieldTypeFlags[field] : 0;
}

const char *cPolylineFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "points",
        "smooth",
        "joinStyle",
    };
    return (field >= 0 && field < 3) ? fieldNames[field] : nullptr;
}

int cPolylineFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "points") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "smooth") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "joinStyle") == 0) return baseIndex + 2;
    return base ? base->findField(fieldName) : -1;
}

const char *cPolylineFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cFigure::Point",    // FIELD_points
        "bool",    // FIELD_smooth
        "int",    // FIELD_joinStyle
    };
    return (field >= 0 && field < 3) ? fieldTypeStrings[field] : nullptr;
}

const char **cPolylineFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_points: {
            static const char *names[] = { "group", "editable", "getter", "setter", "sizeGetter", "sizeSetter",  nullptr };
            return names;
        }
        case FIELD_smooth: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_joinStyle: {
            static const char *names[] = { "group", "editable", "enum", "enum",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cPolylineFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_points:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "getter")) return "getPoint";
            if (!strcmp(propertyName, "setter")) return "setPoint";
            if (!strcmp(propertyName, "sizeGetter")) return "getNumPoints";
            if (!strcmp(propertyName, "sizeSetter")) return "setNumPoints";
            return nullptr;
        case FIELD_smooth:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_joinStyle:
            if (!strcmp(propertyName, "group")) return "line";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "enum")) return "cFigure::JoinStyle";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cFigure::JoinStyle";
            return nullptr;
        default: return nullptr;
    }
}

int cPolylineFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cPolylineFigure *pp = omnetpp::fromAnyPtr<cPolylineFigure>(object); (void)pp;
    switch (field) {
        case FIELD_points: return pp->getNumPoints();
        default: return 0;
    }
}

void cPolylineFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cPolylineFigure *pp = omnetpp::fromAnyPtr<cPolylineFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cPolylineFigure'", field);
    }
}

const char *cPolylineFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cPolylineFigure *pp = omnetpp::fromAnyPtr<cPolylineFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cPolylineFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cPolylineFigure *pp = omnetpp::fromAnyPtr<cPolylineFigure>(object); (void)pp;
    switch (field) {
        case FIELD_points: return pp->getPoint(i).str();
        case FIELD_smooth: return bool2string(pp->getSmooth());
        case FIELD_joinStyle: return enum2string(pp->getJoinStyle(), "omnetpp::cFigure::JoinStyle");
        default: return "";
    }
}

void cPolylineFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPolylineFigure *pp = omnetpp::fromAnyPtr<cPolylineFigure>(object); (void)pp;
    switch (field) {
        case FIELD_points: pp->setPoint(i,cFigure::parsePoint(value)); break;
        case FIELD_smooth: pp->setSmooth(string2bool(value)); break;
        case FIELD_joinStyle: pp->setJoinStyle((omnetpp::cFigure::JoinStyle)string2enum(value, "omnetpp::cFigure::JoinStyle")); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPolylineFigure'", field);
    }
}

omnetpp::cValue cPolylineFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cPolylineFigure *pp = omnetpp::fromAnyPtr<cPolylineFigure>(object); (void)pp;
    switch (field) {
        case FIELD_points: return pp->getPoint(i).str();
        case FIELD_smooth: return pp->getSmooth();
        case FIELD_joinStyle: return pp->getJoinStyle();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cPolylineFigure' as cValue -- field index out of range?", field);
    }
}

void cPolylineFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPolylineFigure *pp = omnetpp::fromAnyPtr<cPolylineFigure>(object); (void)pp;
    switch (field) {
        case FIELD_points: pp->setPoint(i,cFigure::parsePoint(value)); break;
        case FIELD_smooth: pp->setSmooth(value.boolValue()); break;
        case FIELD_joinStyle: pp->setJoinStyle((omnetpp::cFigure::JoinStyle)value.intValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPolylineFigure'", field);
    }
}

const char *cPolylineFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cPolylineFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cPolylineFigure *pp = omnetpp::fromAnyPtr<cPolylineFigure>(object); (void)pp;
    switch (field) {
        case FIELD_points: return omnetpp::toAnyPtr(&pp->getPoint(i)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cPolylineFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cPolylineFigure *pp = omnetpp::fromAnyPtr<cPolylineFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPolylineFigure'", field);
    }
}

class cAbstractShapeFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_outlined,
        FIELD_filled,
        FIELD_lineColor,
        FIELD_fillColor,
        FIELD_lineStyle,
        FIELD_lineWidth,
        FIELD_lineOpacity,
        FIELD_fillOpacity,
        FIELD_zoomLineWidth,
    };
  public:
    cAbstractShapeFigureDescriptor();
    virtual ~cAbstractShapeFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cAbstractShapeFigureDescriptor)

cAbstractShapeFigureDescriptor::cAbstractShapeFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cAbstractShapeFigure)), "omnetpp::cFigure")
{
    propertyNames = nullptr;
}

cAbstractShapeFigureDescriptor::~cAbstractShapeFigureDescriptor()
{
    delete[] propertyNames;
}

bool cAbstractShapeFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cAbstractShapeFigure *>(obj)!=nullptr;
}

const char **cAbstractShapeFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cAbstractShapeFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cAbstractShapeFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 9+base->getFieldCount() : 9;
}

unsigned int cAbstractShapeFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_outlined
        FD_ISEDITABLE,    // FIELD_filled
        FD_ISEDITABLE,    // FIELD_lineColor
        FD_ISEDITABLE,    // FIELD_fillColor
        FD_ISEDITABLE,    // FIELD_lineStyle
        FD_ISEDITABLE,    // FIELD_lineWidth
        FD_ISEDITABLE,    // FIELD_lineOpacity
        FD_ISEDITABLE,    // FIELD_fillOpacity
        FD_ISEDITABLE,    // FIELD_zoomLineWidth
    };
    return (field >= 0 && field < 9) ? fieldTypeFlags[field] : 0;
}

const char *cAbstractShapeFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "outlined",
        "filled",
        "lineColor",
        "fillColor",
        "lineStyle",
        "lineWidth",
        "lineOpacity",
        "fillOpacity",
        "zoomLineWidth",
    };
    return (field >= 0 && field < 9) ? fieldNames[field] : nullptr;
}

int cAbstractShapeFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "outlined") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "filled") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "lineColor") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "fillColor") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "lineStyle") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "lineWidth") == 0) return baseIndex + 5;
    if (strcmp(fieldName, "lineOpacity") == 0) return baseIndex + 6;
    if (strcmp(fieldName, "fillOpacity") == 0) return baseIndex + 7;
    if (strcmp(fieldName, "zoomLineWidth") == 0) return baseIndex + 8;
    return base ? base->findField(fieldName) : -1;
}

const char *cAbstractShapeFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "bool",    // FIELD_outlined
        "bool",    // FIELD_filled
        "omnetpp::cFigure::Color",    // FIELD_lineColor
        "omnetpp::cFigure::Color",    // FIELD_fillColor
        "int",    // FIELD_lineStyle
        "double",    // FIELD_lineWidth
        "double",    // FIELD_lineOpacity
        "double",    // FIELD_fillOpacity
        "bool",    // FIELD_zoomLineWidth
    };
    return (field >= 0 && field < 9) ? fieldTypeStrings[field] : nullptr;
}

const char **cAbstractShapeFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_outlined: {
            static const char *names[] = { "group", "getter", "editable",  nullptr };
            return names;
        }
        case FIELD_filled: {
            static const char *names[] = { "group", "getter", "editable",  nullptr };
            return names;
        }
        case FIELD_lineColor: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_fillColor: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_lineStyle: {
            static const char *names[] = { "group", "editable", "enum", "enum",  nullptr };
            return names;
        }
        case FIELD_lineWidth: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_lineOpacity: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_fillOpacity: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_zoomLineWidth: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cAbstractShapeFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_outlined:
            if (!strcmp(propertyName, "group")) return "outline";
            if (!strcmp(propertyName, "getter")) return "isOutlined";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_filled:
            if (!strcmp(propertyName, "group")) return "fill";
            if (!strcmp(propertyName, "getter")) return "isFilled";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_lineColor:
            if (!strcmp(propertyName, "group")) return "outline";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_fillColor:
            if (!strcmp(propertyName, "group")) return "fill";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_lineStyle:
            if (!strcmp(propertyName, "group")) return "outline";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "enum")) return "cFigure::LineStyle";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cFigure::LineStyle";
            return nullptr;
        case FIELD_lineWidth:
            if (!strcmp(propertyName, "group")) return "outline";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_lineOpacity:
            if (!strcmp(propertyName, "group")) return "outline";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_fillOpacity:
            if (!strcmp(propertyName, "group")) return "fill";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_zoomLineWidth:
            if (!strcmp(propertyName, "group")) return "outline";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        default: return nullptr;
    }
}

int cAbstractShapeFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cAbstractShapeFigure *pp = omnetpp::fromAnyPtr<cAbstractShapeFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cAbstractShapeFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractShapeFigure *pp = omnetpp::fromAnyPtr<cAbstractShapeFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cAbstractShapeFigure'", field);
    }
}

const char *cAbstractShapeFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cAbstractShapeFigure *pp = omnetpp::fromAnyPtr<cAbstractShapeFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cAbstractShapeFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cAbstractShapeFigure *pp = omnetpp::fromAnyPtr<cAbstractShapeFigure>(object); (void)pp;
    switch (field) {
        case FIELD_outlined: return bool2string(pp->isOutlined());
        case FIELD_filled: return bool2string(pp->isFilled());
        case FIELD_lineColor: return pp->getLineColor().str();
        case FIELD_fillColor: return pp->getFillColor().str();
        case FIELD_lineStyle: return enum2string(pp->getLineStyle(), "omnetpp::cFigure::LineStyle");
        case FIELD_lineWidth: return double2string(pp->getLineWidth());
        case FIELD_lineOpacity: return double2string(pp->getLineOpacity());
        case FIELD_fillOpacity: return double2string(pp->getFillOpacity());
        case FIELD_zoomLineWidth: return bool2string(pp->getZoomLineWidth());
        default: return "";
    }
}

void cAbstractShapeFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractShapeFigure *pp = omnetpp::fromAnyPtr<cAbstractShapeFigure>(object); (void)pp;
    switch (field) {
        case FIELD_outlined: pp->setOutlined(string2bool(value)); break;
        case FIELD_filled: pp->setFilled(string2bool(value)); break;
        case FIELD_lineColor: pp->setLineColor(cFigure::parseColor(value)); break;
        case FIELD_fillColor: pp->setFillColor(cFigure::parseColor(value)); break;
        case FIELD_lineStyle: pp->setLineStyle((omnetpp::cFigure::LineStyle)string2enum(value, "omnetpp::cFigure::LineStyle")); break;
        case FIELD_lineWidth: pp->setLineWidth(string2double(value)); break;
        case FIELD_lineOpacity: pp->setLineOpacity(string2double(value)); break;
        case FIELD_fillOpacity: pp->setFillOpacity(string2double(value)); break;
        case FIELD_zoomLineWidth: pp->setZoomLineWidth(string2bool(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAbstractShapeFigure'", field);
    }
}

omnetpp::cValue cAbstractShapeFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cAbstractShapeFigure *pp = omnetpp::fromAnyPtr<cAbstractShapeFigure>(object); (void)pp;
    switch (field) {
        case FIELD_outlined: return pp->isOutlined();
        case FIELD_filled: return pp->isFilled();
        case FIELD_lineColor: return pp->getLineColor().str();
        case FIELD_fillColor: return pp->getFillColor().str();
        case FIELD_lineStyle: return pp->getLineStyle();
        case FIELD_lineWidth: return pp->getLineWidth();
        case FIELD_lineOpacity: return pp->getLineOpacity();
        case FIELD_fillOpacity: return pp->getFillOpacity();
        case FIELD_zoomLineWidth: return pp->getZoomLineWidth();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cAbstractShapeFigure' as cValue -- field index out of range?", field);
    }
}

void cAbstractShapeFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractShapeFigure *pp = omnetpp::fromAnyPtr<cAbstractShapeFigure>(object); (void)pp;
    switch (field) {
        case FIELD_outlined: pp->setOutlined(value.boolValue()); break;
        case FIELD_filled: pp->setFilled(value.boolValue()); break;
        case FIELD_lineColor: pp->setLineColor(cFigure::parseColor(value)); break;
        case FIELD_fillColor: pp->setFillColor(cFigure::parseColor(value)); break;
        case FIELD_lineStyle: pp->setLineStyle((omnetpp::cFigure::LineStyle)value.intValue()); break;
        case FIELD_lineWidth: pp->setLineWidth(value.doubleValue()); break;
        case FIELD_lineOpacity: pp->setLineOpacity(value.doubleValue()); break;
        case FIELD_fillOpacity: pp->setFillOpacity(value.doubleValue()); break;
        case FIELD_zoomLineWidth: pp->setZoomLineWidth(value.boolValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAbstractShapeFigure'", field);
    }
}

const char *cAbstractShapeFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cAbstractShapeFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cAbstractShapeFigure *pp = omnetpp::fromAnyPtr<cAbstractShapeFigure>(object); (void)pp;
    switch (field) {
        case FIELD_lineColor: return omnetpp::toAnyPtr(&pp->getLineColor()); break;
        case FIELD_fillColor: return omnetpp::toAnyPtr(&pp->getFillColor()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cAbstractShapeFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractShapeFigure *pp = omnetpp::fromAnyPtr<cAbstractShapeFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAbstractShapeFigure'", field);
    }
}

class cRectangleFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_bounds,
        FIELD_cornerRx,
        FIELD_cornerRy,
    };
  public:
    cRectangleFigureDescriptor();
    virtual ~cRectangleFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cRectangleFigureDescriptor)

cRectangleFigureDescriptor::cRectangleFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cRectangleFigure)), "omnetpp::cAbstractShapeFigure")
{
    propertyNames = nullptr;
}

cRectangleFigureDescriptor::~cRectangleFigureDescriptor()
{
    delete[] propertyNames;
}

bool cRectangleFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cRectangleFigure *>(obj)!=nullptr;
}

const char **cRectangleFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cRectangleFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cRectangleFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 3+base->getFieldCount() : 3;
}

unsigned int cRectangleFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_bounds
        FD_ISEDITABLE,    // FIELD_cornerRx
        FD_ISEDITABLE,    // FIELD_cornerRy
    };
    return (field >= 0 && field < 3) ? fieldTypeFlags[field] : 0;
}

const char *cRectangleFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "bounds",
        "cornerRx",
        "cornerRy",
    };
    return (field >= 0 && field < 3) ? fieldNames[field] : nullptr;
}

int cRectangleFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "bounds") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "cornerRx") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "cornerRy") == 0) return baseIndex + 2;
    return base ? base->findField(fieldName) : -1;
}

const char *cRectangleFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cFigure::Rectangle",    // FIELD_bounds
        "double",    // FIELD_cornerRx
        "double",    // FIELD_cornerRy
    };
    return (field >= 0 && field < 3) ? fieldTypeStrings[field] : nullptr;
}

const char **cRectangleFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_bounds: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_cornerRx: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_cornerRy: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cRectangleFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_bounds:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_cornerRx:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_cornerRy:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        default: return nullptr;
    }
}

int cRectangleFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cRectangleFigure *pp = omnetpp::fromAnyPtr<cRectangleFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cRectangleFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cRectangleFigure *pp = omnetpp::fromAnyPtr<cRectangleFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cRectangleFigure'", field);
    }
}

const char *cRectangleFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cRectangleFigure *pp = omnetpp::fromAnyPtr<cRectangleFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cRectangleFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cRectangleFigure *pp = omnetpp::fromAnyPtr<cRectangleFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: return pp->getBounds().str();
        case FIELD_cornerRx: return double2string(pp->getCornerRx());
        case FIELD_cornerRy: return double2string(pp->getCornerRy());
        default: return "";
    }
}

void cRectangleFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cRectangleFigure *pp = omnetpp::fromAnyPtr<cRectangleFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: pp->setBounds(cFigure::parseRectangle(value)); break;
        case FIELD_cornerRx: pp->setCornerRx(string2double(value)); break;
        case FIELD_cornerRy: pp->setCornerRy(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRectangleFigure'", field);
    }
}

omnetpp::cValue cRectangleFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cRectangleFigure *pp = omnetpp::fromAnyPtr<cRectangleFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: return pp->getBounds().str();
        case FIELD_cornerRx: return pp->getCornerRx();
        case FIELD_cornerRy: return pp->getCornerRy();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cRectangleFigure' as cValue -- field index out of range?", field);
    }
}

void cRectangleFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cRectangleFigure *pp = omnetpp::fromAnyPtr<cRectangleFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: pp->setBounds(cFigure::parseRectangle(value)); break;
        case FIELD_cornerRx: pp->setCornerRx(value.doubleValue()); break;
        case FIELD_cornerRy: pp->setCornerRy(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRectangleFigure'", field);
    }
}

const char *cRectangleFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cRectangleFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cRectangleFigure *pp = omnetpp::fromAnyPtr<cRectangleFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: return omnetpp::toAnyPtr(&pp->getBounds()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cRectangleFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cRectangleFigure *pp = omnetpp::fromAnyPtr<cRectangleFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRectangleFigure'", field);
    }
}

class cOvalFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_bounds,
    };
  public:
    cOvalFigureDescriptor();
    virtual ~cOvalFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cOvalFigureDescriptor)

cOvalFigureDescriptor::cOvalFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cOvalFigure)), "omnetpp::cAbstractShapeFigure")
{
    propertyNames = nullptr;
}

cOvalFigureDescriptor::~cOvalFigureDescriptor()
{
    delete[] propertyNames;
}

bool cOvalFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cOvalFigure *>(obj)!=nullptr;
}

const char **cOvalFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cOvalFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cOvalFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cOvalFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_bounds
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cOvalFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "bounds",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cOvalFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "bounds") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cOvalFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cFigure::Rectangle",    // FIELD_bounds
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cOvalFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_bounds: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cOvalFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_bounds:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        default: return nullptr;
    }
}

int cOvalFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cOvalFigure *pp = omnetpp::fromAnyPtr<cOvalFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cOvalFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cOvalFigure *pp = omnetpp::fromAnyPtr<cOvalFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cOvalFigure'", field);
    }
}

const char *cOvalFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cOvalFigure *pp = omnetpp::fromAnyPtr<cOvalFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cOvalFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cOvalFigure *pp = omnetpp::fromAnyPtr<cOvalFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: return pp->getBounds().str();
        default: return "";
    }
}

void cOvalFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cOvalFigure *pp = omnetpp::fromAnyPtr<cOvalFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: pp->setBounds(cFigure::parseRectangle(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cOvalFigure'", field);
    }
}

omnetpp::cValue cOvalFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cOvalFigure *pp = omnetpp::fromAnyPtr<cOvalFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: return pp->getBounds().str();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cOvalFigure' as cValue -- field index out of range?", field);
    }
}

void cOvalFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cOvalFigure *pp = omnetpp::fromAnyPtr<cOvalFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: pp->setBounds(cFigure::parseRectangle(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cOvalFigure'", field);
    }
}

const char *cOvalFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cOvalFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cOvalFigure *pp = omnetpp::fromAnyPtr<cOvalFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: return omnetpp::toAnyPtr(&pp->getBounds()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cOvalFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cOvalFigure *pp = omnetpp::fromAnyPtr<cOvalFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cOvalFigure'", field);
    }
}

class cRingFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_bounds,
        FIELD_innerRx,
        FIELD_innerRy,
    };
  public:
    cRingFigureDescriptor();
    virtual ~cRingFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cRingFigureDescriptor)

cRingFigureDescriptor::cRingFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cRingFigure)), "omnetpp::cAbstractShapeFigure")
{
    propertyNames = nullptr;
}

cRingFigureDescriptor::~cRingFigureDescriptor()
{
    delete[] propertyNames;
}

bool cRingFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cRingFigure *>(obj)!=nullptr;
}

const char **cRingFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cRingFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cRingFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 3+base->getFieldCount() : 3;
}

unsigned int cRingFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_bounds
        FD_ISEDITABLE,    // FIELD_innerRx
        FD_ISEDITABLE,    // FIELD_innerRy
    };
    return (field >= 0 && field < 3) ? fieldTypeFlags[field] : 0;
}

const char *cRingFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "bounds",
        "innerRx",
        "innerRy",
    };
    return (field >= 0 && field < 3) ? fieldNames[field] : nullptr;
}

int cRingFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "bounds") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "innerRx") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "innerRy") == 0) return baseIndex + 2;
    return base ? base->findField(fieldName) : -1;
}

const char *cRingFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cFigure::Rectangle",    // FIELD_bounds
        "double",    // FIELD_innerRx
        "double",    // FIELD_innerRy
    };
    return (field >= 0 && field < 3) ? fieldTypeStrings[field] : nullptr;
}

const char **cRingFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_bounds: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_innerRx: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_innerRy: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cRingFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_bounds:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_innerRx:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_innerRy:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        default: return nullptr;
    }
}

int cRingFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cRingFigure *pp = omnetpp::fromAnyPtr<cRingFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cRingFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cRingFigure *pp = omnetpp::fromAnyPtr<cRingFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cRingFigure'", field);
    }
}

const char *cRingFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cRingFigure *pp = omnetpp::fromAnyPtr<cRingFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cRingFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cRingFigure *pp = omnetpp::fromAnyPtr<cRingFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: return pp->getBounds().str();
        case FIELD_innerRx: return double2string(pp->getInnerRx());
        case FIELD_innerRy: return double2string(pp->getInnerRy());
        default: return "";
    }
}

void cRingFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cRingFigure *pp = omnetpp::fromAnyPtr<cRingFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: pp->setBounds(cFigure::parseRectangle(value)); break;
        case FIELD_innerRx: pp->setInnerRx(string2double(value)); break;
        case FIELD_innerRy: pp->setInnerRy(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRingFigure'", field);
    }
}

omnetpp::cValue cRingFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cRingFigure *pp = omnetpp::fromAnyPtr<cRingFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: return pp->getBounds().str();
        case FIELD_innerRx: return pp->getInnerRx();
        case FIELD_innerRy: return pp->getInnerRy();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cRingFigure' as cValue -- field index out of range?", field);
    }
}

void cRingFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cRingFigure *pp = omnetpp::fromAnyPtr<cRingFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: pp->setBounds(cFigure::parseRectangle(value)); break;
        case FIELD_innerRx: pp->setInnerRx(value.doubleValue()); break;
        case FIELD_innerRy: pp->setInnerRy(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRingFigure'", field);
    }
}

const char *cRingFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cRingFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cRingFigure *pp = omnetpp::fromAnyPtr<cRingFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: return omnetpp::toAnyPtr(&pp->getBounds()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cRingFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cRingFigure *pp = omnetpp::fromAnyPtr<cRingFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cRingFigure'", field);
    }
}

class cPieSliceFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_bounds,
        FIELD_startAngle,
        FIELD_endAngle,
    };
  public:
    cPieSliceFigureDescriptor();
    virtual ~cPieSliceFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cPieSliceFigureDescriptor)

cPieSliceFigureDescriptor::cPieSliceFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cPieSliceFigure)), "omnetpp::cAbstractShapeFigure")
{
    propertyNames = nullptr;
}

cPieSliceFigureDescriptor::~cPieSliceFigureDescriptor()
{
    delete[] propertyNames;
}

bool cPieSliceFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cPieSliceFigure *>(obj)!=nullptr;
}

const char **cPieSliceFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cPieSliceFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cPieSliceFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 3+base->getFieldCount() : 3;
}

unsigned int cPieSliceFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_bounds
        FD_ISEDITABLE,    // FIELD_startAngle
        FD_ISEDITABLE,    // FIELD_endAngle
    };
    return (field >= 0 && field < 3) ? fieldTypeFlags[field] : 0;
}

const char *cPieSliceFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "bounds",
        "startAngle",
        "endAngle",
    };
    return (field >= 0 && field < 3) ? fieldNames[field] : nullptr;
}

int cPieSliceFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "bounds") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "startAngle") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "endAngle") == 0) return baseIndex + 2;
    return base ? base->findField(fieldName) : -1;
}

const char *cPieSliceFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cFigure::Rectangle",    // FIELD_bounds
        "double",    // FIELD_startAngle
        "double",    // FIELD_endAngle
    };
    return (field >= 0 && field < 3) ? fieldTypeStrings[field] : nullptr;
}

const char **cPieSliceFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_bounds: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_startAngle: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_endAngle: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cPieSliceFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_bounds:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_startAngle:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_endAngle:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        default: return nullptr;
    }
}

int cPieSliceFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cPieSliceFigure *pp = omnetpp::fromAnyPtr<cPieSliceFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cPieSliceFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cPieSliceFigure *pp = omnetpp::fromAnyPtr<cPieSliceFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cPieSliceFigure'", field);
    }
}

const char *cPieSliceFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cPieSliceFigure *pp = omnetpp::fromAnyPtr<cPieSliceFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cPieSliceFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cPieSliceFigure *pp = omnetpp::fromAnyPtr<cPieSliceFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: return pp->getBounds().str();
        case FIELD_startAngle: return double2string(pp->getStartAngle());
        case FIELD_endAngle: return double2string(pp->getEndAngle());
        default: return "";
    }
}

void cPieSliceFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPieSliceFigure *pp = omnetpp::fromAnyPtr<cPieSliceFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: pp->setBounds(cFigure::parseRectangle(value)); break;
        case FIELD_startAngle: pp->setStartAngle(string2double(value)); break;
        case FIELD_endAngle: pp->setEndAngle(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPieSliceFigure'", field);
    }
}

omnetpp::cValue cPieSliceFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cPieSliceFigure *pp = omnetpp::fromAnyPtr<cPieSliceFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: return pp->getBounds().str();
        case FIELD_startAngle: return pp->getStartAngle();
        case FIELD_endAngle: return pp->getEndAngle();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cPieSliceFigure' as cValue -- field index out of range?", field);
    }
}

void cPieSliceFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPieSliceFigure *pp = omnetpp::fromAnyPtr<cPieSliceFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: pp->setBounds(cFigure::parseRectangle(value)); break;
        case FIELD_startAngle: pp->setStartAngle(value.doubleValue()); break;
        case FIELD_endAngle: pp->setEndAngle(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPieSliceFigure'", field);
    }
}

const char *cPieSliceFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cPieSliceFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cPieSliceFigure *pp = omnetpp::fromAnyPtr<cPieSliceFigure>(object); (void)pp;
    switch (field) {
        case FIELD_bounds: return omnetpp::toAnyPtr(&pp->getBounds()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cPieSliceFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cPieSliceFigure *pp = omnetpp::fromAnyPtr<cPieSliceFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPieSliceFigure'", field);
    }
}

class cPolygonFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_points,
        FIELD_smooth,
        FIELD_joinStyle,
        FIELD_fillRule,
    };
  public:
    cPolygonFigureDescriptor();
    virtual ~cPolygonFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cPolygonFigureDescriptor)

cPolygonFigureDescriptor::cPolygonFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cPolygonFigure)), "omnetpp::cAbstractShapeFigure")
{
    propertyNames = nullptr;
}

cPolygonFigureDescriptor::~cPolygonFigureDescriptor()
{
    delete[] propertyNames;
}

bool cPolygonFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cPolygonFigure *>(obj)!=nullptr;
}

const char **cPolygonFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cPolygonFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cPolygonFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 4+base->getFieldCount() : 4;
}

unsigned int cPolygonFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISARRAY | FD_ISEDITABLE,    // FIELD_points
        FD_ISEDITABLE,    // FIELD_smooth
        FD_ISEDITABLE,    // FIELD_joinStyle
        FD_ISEDITABLE,    // FIELD_fillRule
    };
    return (field >= 0 && field < 4) ? fieldTypeFlags[field] : 0;
}

const char *cPolygonFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "points",
        "smooth",
        "joinStyle",
        "fillRule",
    };
    return (field >= 0 && field < 4) ? fieldNames[field] : nullptr;
}

int cPolygonFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "points") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "smooth") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "joinStyle") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "fillRule") == 0) return baseIndex + 3;
    return base ? base->findField(fieldName) : -1;
}

const char *cPolygonFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cFigure::Point",    // FIELD_points
        "bool",    // FIELD_smooth
        "int",    // FIELD_joinStyle
        "int",    // FIELD_fillRule
    };
    return (field >= 0 && field < 4) ? fieldTypeStrings[field] : nullptr;
}

const char **cPolygonFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_points: {
            static const char *names[] = { "group", "editable", "getter", "setter", "sizeGetter", "sizeSetter",  nullptr };
            return names;
        }
        case FIELD_smooth: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_joinStyle: {
            static const char *names[] = { "group", "editable", "enum", "enum",  nullptr };
            return names;
        }
        case FIELD_fillRule: {
            static const char *names[] = { "group", "editable", "enum", "enum",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cPolygonFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_points:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "getter")) return "getPoint";
            if (!strcmp(propertyName, "setter")) return "setPoint";
            if (!strcmp(propertyName, "sizeGetter")) return "getNumPoints";
            if (!strcmp(propertyName, "sizeSetter")) return "setNumPoints";
            return nullptr;
        case FIELD_smooth:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_joinStyle:
            if (!strcmp(propertyName, "group")) return "outline";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "enum")) return "cFigure::JoinStyle";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cFigure::JoinStyle";
            return nullptr;
        case FIELD_fillRule:
            if (!strcmp(propertyName, "group")) return "fill";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "enum")) return "cFigure::FillRule";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cFigure::FillRule";
            return nullptr;
        default: return nullptr;
    }
}

int cPolygonFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cPolygonFigure *pp = omnetpp::fromAnyPtr<cPolygonFigure>(object); (void)pp;
    switch (field) {
        case FIELD_points: return pp->getNumPoints();
        default: return 0;
    }
}

void cPolygonFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cPolygonFigure *pp = omnetpp::fromAnyPtr<cPolygonFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cPolygonFigure'", field);
    }
}

const char *cPolygonFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cPolygonFigure *pp = omnetpp::fromAnyPtr<cPolygonFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cPolygonFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cPolygonFigure *pp = omnetpp::fromAnyPtr<cPolygonFigure>(object); (void)pp;
    switch (field) {
        case FIELD_points: return pp->getPoint(i).str();
        case FIELD_smooth: return bool2string(pp->getSmooth());
        case FIELD_joinStyle: return enum2string(pp->getJoinStyle(), "omnetpp::cFigure::JoinStyle");
        case FIELD_fillRule: return enum2string(pp->getFillRule(), "omnetpp::cFigure::FillRule");
        default: return "";
    }
}

void cPolygonFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPolygonFigure *pp = omnetpp::fromAnyPtr<cPolygonFigure>(object); (void)pp;
    switch (field) {
        case FIELD_points: pp->setPoint(i,cFigure::parsePoint(value)); break;
        case FIELD_smooth: pp->setSmooth(string2bool(value)); break;
        case FIELD_joinStyle: pp->setJoinStyle((omnetpp::cFigure::JoinStyle)string2enum(value, "omnetpp::cFigure::JoinStyle")); break;
        case FIELD_fillRule: pp->setFillRule((omnetpp::cFigure::FillRule)string2enum(value, "omnetpp::cFigure::FillRule")); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPolygonFigure'", field);
    }
}

omnetpp::cValue cPolygonFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cPolygonFigure *pp = omnetpp::fromAnyPtr<cPolygonFigure>(object); (void)pp;
    switch (field) {
        case FIELD_points: return pp->getPoint(i).str();
        case FIELD_smooth: return pp->getSmooth();
        case FIELD_joinStyle: return pp->getJoinStyle();
        case FIELD_fillRule: return pp->getFillRule();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cPolygonFigure' as cValue -- field index out of range?", field);
    }
}

void cPolygonFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPolygonFigure *pp = omnetpp::fromAnyPtr<cPolygonFigure>(object); (void)pp;
    switch (field) {
        case FIELD_points: pp->setPoint(i,cFigure::parsePoint(value)); break;
        case FIELD_smooth: pp->setSmooth(value.boolValue()); break;
        case FIELD_joinStyle: pp->setJoinStyle((omnetpp::cFigure::JoinStyle)value.intValue()); break;
        case FIELD_fillRule: pp->setFillRule((omnetpp::cFigure::FillRule)value.intValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPolygonFigure'", field);
    }
}

const char *cPolygonFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cPolygonFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cPolygonFigure *pp = omnetpp::fromAnyPtr<cPolygonFigure>(object); (void)pp;
    switch (field) {
        case FIELD_points: return omnetpp::toAnyPtr(&pp->getPoint(i)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cPolygonFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cPolygonFigure *pp = omnetpp::fromAnyPtr<cPolygonFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPolygonFigure'", field);
    }
}

class cPathFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_path,
        FIELD_offset,
        FIELD_joinStyle,
        FIELD_capStyle,
        FIELD_fillRule,
    };
  public:
    cPathFigureDescriptor();
    virtual ~cPathFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cPathFigureDescriptor)

cPathFigureDescriptor::cPathFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cPathFigure)), "omnetpp::cAbstractShapeFigure")
{
    propertyNames = nullptr;
}

cPathFigureDescriptor::~cPathFigureDescriptor()
{
    delete[] propertyNames;
}

bool cPathFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cPathFigure *>(obj)!=nullptr;
}

const char **cPathFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cPathFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cPathFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 5+base->getFieldCount() : 5;
}

unsigned int cPathFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_path
        FD_ISEDITABLE,    // FIELD_offset
        FD_ISEDITABLE,    // FIELD_joinStyle
        FD_ISEDITABLE,    // FIELD_capStyle
        FD_ISEDITABLE,    // FIELD_fillRule
    };
    return (field >= 0 && field < 5) ? fieldTypeFlags[field] : 0;
}

const char *cPathFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "path",
        "offset",
        "joinStyle",
        "capStyle",
        "fillRule",
    };
    return (field >= 0 && field < 5) ? fieldNames[field] : nullptr;
}

int cPathFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "path") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "offset") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "joinStyle") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "capStyle") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "fillRule") == 0) return baseIndex + 4;
    return base ? base->findField(fieldName) : -1;
}

const char *cPathFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "string",    // FIELD_path
        "omnetpp::cFigure::Point",    // FIELD_offset
        "int",    // FIELD_joinStyle
        "int",    // FIELD_capStyle
        "int",    // FIELD_fillRule
    };
    return (field >= 0 && field < 5) ? fieldTypeStrings[field] : nullptr;
}

const char **cPathFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_path: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_offset: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_joinStyle: {
            static const char *names[] = { "group", "editable", "enum", "enum",  nullptr };
            return names;
        }
        case FIELD_capStyle: {
            static const char *names[] = { "group", "editable", "enum", "enum",  nullptr };
            return names;
        }
        case FIELD_fillRule: {
            static const char *names[] = { "group", "editable", "enum", "enum",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cPathFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_path:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_offset:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_joinStyle:
            if (!strcmp(propertyName, "group")) return "outline";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "enum")) return "cFigure::JoinStyle";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cFigure::JoinStyle";
            return nullptr;
        case FIELD_capStyle:
            if (!strcmp(propertyName, "group")) return "outline";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "enum")) return "cFigure::CapStyle";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cFigure::CapStyle";
            return nullptr;
        case FIELD_fillRule:
            if (!strcmp(propertyName, "group")) return "fill";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "enum")) return "cFigure::FillRule";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cFigure::FillRule";
            return nullptr;
        default: return nullptr;
    }
}

int cPathFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cPathFigure *pp = omnetpp::fromAnyPtr<cPathFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cPathFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cPathFigure *pp = omnetpp::fromAnyPtr<cPathFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cPathFigure'", field);
    }
}

const char *cPathFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cPathFigure *pp = omnetpp::fromAnyPtr<cPathFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cPathFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cPathFigure *pp = omnetpp::fromAnyPtr<cPathFigure>(object); (void)pp;
    switch (field) {
        case FIELD_path: return oppstring2string(pp->getPath());
        case FIELD_offset: return pp->getOffset().str();
        case FIELD_joinStyle: return enum2string(pp->getJoinStyle(), "omnetpp::cFigure::JoinStyle");
        case FIELD_capStyle: return enum2string(pp->getCapStyle(), "omnetpp::cFigure::CapStyle");
        case FIELD_fillRule: return enum2string(pp->getFillRule(), "omnetpp::cFigure::FillRule");
        default: return "";
    }
}

void cPathFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPathFigure *pp = omnetpp::fromAnyPtr<cPathFigure>(object); (void)pp;
    switch (field) {
        case FIELD_path: pp->setPath((value)); break;
        case FIELD_offset: pp->setOffset(cFigure::parsePoint(value)); break;
        case FIELD_joinStyle: pp->setJoinStyle((omnetpp::cFigure::JoinStyle)string2enum(value, "omnetpp::cFigure::JoinStyle")); break;
        case FIELD_capStyle: pp->setCapStyle((omnetpp::cFigure::CapStyle)string2enum(value, "omnetpp::cFigure::CapStyle")); break;
        case FIELD_fillRule: pp->setFillRule((omnetpp::cFigure::FillRule)string2enum(value, "omnetpp::cFigure::FillRule")); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPathFigure'", field);
    }
}

omnetpp::cValue cPathFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cPathFigure *pp = omnetpp::fromAnyPtr<cPathFigure>(object); (void)pp;
    switch (field) {
        case FIELD_path: return pp->getPath();
        case FIELD_offset: return pp->getOffset().str();
        case FIELD_joinStyle: return pp->getJoinStyle();
        case FIELD_capStyle: return pp->getCapStyle();
        case FIELD_fillRule: return pp->getFillRule();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cPathFigure' as cValue -- field index out of range?", field);
    }
}

void cPathFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPathFigure *pp = omnetpp::fromAnyPtr<cPathFigure>(object); (void)pp;
    switch (field) {
        case FIELD_path: pp->setPath(value.stringValue()); break;
        case FIELD_offset: pp->setOffset(cFigure::parsePoint(value)); break;
        case FIELD_joinStyle: pp->setJoinStyle((omnetpp::cFigure::JoinStyle)value.intValue()); break;
        case FIELD_capStyle: pp->setCapStyle((omnetpp::cFigure::CapStyle)value.intValue()); break;
        case FIELD_fillRule: pp->setFillRule((omnetpp::cFigure::FillRule)value.intValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPathFigure'", field);
    }
}

const char *cPathFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cPathFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cPathFigure *pp = omnetpp::fromAnyPtr<cPathFigure>(object); (void)pp;
    switch (field) {
        case FIELD_offset: return omnetpp::toAnyPtr(&pp->getOffset()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cPathFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cPathFigure *pp = omnetpp::fromAnyPtr<cPathFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPathFigure'", field);
    }
}

class cAbstractTextFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_position,
        FIELD_anchor,
        FIELD_alignment,
        FIELD_text,
        FIELD_font,
        FIELD_color,
        FIELD_opacity,
        FIELD_halo,
    };
  public:
    cAbstractTextFigureDescriptor();
    virtual ~cAbstractTextFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cAbstractTextFigureDescriptor)

cAbstractTextFigureDescriptor::cAbstractTextFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cAbstractTextFigure)), "omnetpp::cFigure")
{
    propertyNames = nullptr;
}

cAbstractTextFigureDescriptor::~cAbstractTextFigureDescriptor()
{
    delete[] propertyNames;
}

bool cAbstractTextFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cAbstractTextFigure *>(obj)!=nullptr;
}

const char **cAbstractTextFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cAbstractTextFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cAbstractTextFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 8+base->getFieldCount() : 8;
}

unsigned int cAbstractTextFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_position
        FD_ISEDITABLE,    // FIELD_anchor
        FD_ISEDITABLE,    // FIELD_alignment
        FD_ISEDITABLE,    // FIELD_text
        FD_ISEDITABLE,    // FIELD_font
        FD_ISEDITABLE,    // FIELD_color
        FD_ISEDITABLE,    // FIELD_opacity
        FD_ISEDITABLE,    // FIELD_halo
    };
    return (field >= 0 && field < 8) ? fieldTypeFlags[field] : 0;
}

const char *cAbstractTextFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "position",
        "anchor",
        "alignment",
        "text",
        "font",
        "color",
        "opacity",
        "halo",
    };
    return (field >= 0 && field < 8) ? fieldNames[field] : nullptr;
}

int cAbstractTextFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "position") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "anchor") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "alignment") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "text") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "font") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "color") == 0) return baseIndex + 5;
    if (strcmp(fieldName, "opacity") == 0) return baseIndex + 6;
    if (strcmp(fieldName, "halo") == 0) return baseIndex + 7;
    return base ? base->findField(fieldName) : -1;
}

const char *cAbstractTextFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cFigure::Point",    // FIELD_position
        "int",    // FIELD_anchor
        "int",    // FIELD_alignment
        "string",    // FIELD_text
        "omnetpp::cFigure::Font",    // FIELD_font
        "omnetpp::cFigure::Color",    // FIELD_color
        "double",    // FIELD_opacity
        "bool",    // FIELD_halo
    };
    return (field >= 0 && field < 8) ? fieldTypeStrings[field] : nullptr;
}

const char **cAbstractTextFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_position: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_anchor: {
            static const char *names[] = { "group", "editable", "enum", "enum",  nullptr };
            return names;
        }
        case FIELD_alignment: {
            static const char *names[] = { "group", "editable", "enum", "enum",  nullptr };
            return names;
        }
        case FIELD_text: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_font: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_color: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_opacity: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_halo: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cAbstractTextFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_position:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_anchor:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "enum")) return "cFigure::Anchor";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cFigure::Anchor";
            return nullptr;
        case FIELD_alignment:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "enum")) return "cFigure::Alignment";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cFigure::Alignment";
            return nullptr;
        case FIELD_text:
            if (!strcmp(propertyName, "group")) return "text";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_font:
            if (!strcmp(propertyName, "group")) return "text";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_color:
            if (!strcmp(propertyName, "group")) return "text";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_opacity:
            if (!strcmp(propertyName, "group")) return "text";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_halo:
            if (!strcmp(propertyName, "group")) return "text";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        default: return nullptr;
    }
}

int cAbstractTextFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cAbstractTextFigure *pp = omnetpp::fromAnyPtr<cAbstractTextFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cAbstractTextFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractTextFigure *pp = omnetpp::fromAnyPtr<cAbstractTextFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cAbstractTextFigure'", field);
    }
}

const char *cAbstractTextFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cAbstractTextFigure *pp = omnetpp::fromAnyPtr<cAbstractTextFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cAbstractTextFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cAbstractTextFigure *pp = omnetpp::fromAnyPtr<cAbstractTextFigure>(object); (void)pp;
    switch (field) {
        case FIELD_position: return pp->getPosition().str();
        case FIELD_anchor: return enum2string(pp->getAnchor(), "omnetpp::cFigure::Anchor");
        case FIELD_alignment: return enum2string(pp->getAlignment(), "omnetpp::cFigure::Alignment");
        case FIELD_text: return oppstring2string(pp->getText());
        case FIELD_font: return pp->getFont().str();
        case FIELD_color: return pp->getColor().str();
        case FIELD_opacity: return double2string(pp->getOpacity());
        case FIELD_halo: return bool2string(pp->getHalo());
        default: return "";
    }
}

void cAbstractTextFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractTextFigure *pp = omnetpp::fromAnyPtr<cAbstractTextFigure>(object); (void)pp;
    switch (field) {
        case FIELD_position: pp->setPosition(cFigure::parsePoint(value)); break;
        case FIELD_anchor: pp->setAnchor((omnetpp::cFigure::Anchor)string2enum(value, "omnetpp::cFigure::Anchor")); break;
        case FIELD_alignment: pp->setAlignment((omnetpp::cFigure::Alignment)string2enum(value, "omnetpp::cFigure::Alignment")); break;
        case FIELD_text: pp->setText((value)); break;
        case FIELD_font: pp->setFont(cFigure::parseFont(value)); break;
        case FIELD_color: pp->setColor(cFigure::parseColor(value)); break;
        case FIELD_opacity: pp->setOpacity(string2double(value)); break;
        case FIELD_halo: pp->setHalo(string2bool(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAbstractTextFigure'", field);
    }
}

omnetpp::cValue cAbstractTextFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cAbstractTextFigure *pp = omnetpp::fromAnyPtr<cAbstractTextFigure>(object); (void)pp;
    switch (field) {
        case FIELD_position: return pp->getPosition().str();
        case FIELD_anchor: return pp->getAnchor();
        case FIELD_alignment: return pp->getAlignment();
        case FIELD_text: return pp->getText();
        case FIELD_font: return pp->getFont().str();
        case FIELD_color: return pp->getColor().str();
        case FIELD_opacity: return pp->getOpacity();
        case FIELD_halo: return pp->getHalo();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cAbstractTextFigure' as cValue -- field index out of range?", field);
    }
}

void cAbstractTextFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractTextFigure *pp = omnetpp::fromAnyPtr<cAbstractTextFigure>(object); (void)pp;
    switch (field) {
        case FIELD_position: pp->setPosition(cFigure::parsePoint(value)); break;
        case FIELD_anchor: pp->setAnchor((omnetpp::cFigure::Anchor)value.intValue()); break;
        case FIELD_alignment: pp->setAlignment((omnetpp::cFigure::Alignment)value.intValue()); break;
        case FIELD_text: pp->setText(value.stringValue()); break;
        case FIELD_font: pp->setFont(cFigure::parseFont(value)); break;
        case FIELD_color: pp->setColor(cFigure::parseColor(value)); break;
        case FIELD_opacity: pp->setOpacity(value.doubleValue()); break;
        case FIELD_halo: pp->setHalo(value.boolValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAbstractTextFigure'", field);
    }
}

const char *cAbstractTextFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cAbstractTextFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cAbstractTextFigure *pp = omnetpp::fromAnyPtr<cAbstractTextFigure>(object); (void)pp;
    switch (field) {
        case FIELD_position: return omnetpp::toAnyPtr(&pp->getPosition()); break;
        case FIELD_font: return omnetpp::toAnyPtr(&pp->getFont()); break;
        case FIELD_color: return omnetpp::toAnyPtr(&pp->getColor()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cAbstractTextFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractTextFigure *pp = omnetpp::fromAnyPtr<cAbstractTextFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAbstractTextFigure'", field);
    }
}

class cTextFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cTextFigureDescriptor();
    virtual ~cTextFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cTextFigureDescriptor)

cTextFigureDescriptor::cTextFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cTextFigure)), "omnetpp::cAbstractTextFigure")
{
    propertyNames = nullptr;
}

cTextFigureDescriptor::~cTextFigureDescriptor()
{
    delete[] propertyNames;
}

bool cTextFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cTextFigure *>(obj)!=nullptr;
}

const char **cTextFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cTextFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cTextFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cTextFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cTextFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cTextFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cTextFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cTextFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cTextFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cTextFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cTextFigure *pp = omnetpp::fromAnyPtr<cTextFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cTextFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cTextFigure *pp = omnetpp::fromAnyPtr<cTextFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cTextFigure'", field);
    }
}

const char *cTextFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cTextFigure *pp = omnetpp::fromAnyPtr<cTextFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cTextFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cTextFigure *pp = omnetpp::fromAnyPtr<cTextFigure>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cTextFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cTextFigure *pp = omnetpp::fromAnyPtr<cTextFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTextFigure'", field);
    }
}

omnetpp::cValue cTextFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cTextFigure *pp = omnetpp::fromAnyPtr<cTextFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cTextFigure' as cValue -- field index out of range?", field);
    }
}

void cTextFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cTextFigure *pp = omnetpp::fromAnyPtr<cTextFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTextFigure'", field);
    }
}

const char *cTextFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cTextFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cTextFigure *pp = omnetpp::fromAnyPtr<cTextFigure>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cTextFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cTextFigure *pp = omnetpp::fromAnyPtr<cTextFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cTextFigure'", field);
    }
}

class cLabelFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_angle,
    };
  public:
    cLabelFigureDescriptor();
    virtual ~cLabelFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cLabelFigureDescriptor)

cLabelFigureDescriptor::cLabelFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cLabelFigure)), "omnetpp::cAbstractTextFigure")
{
    propertyNames = nullptr;
}

cLabelFigureDescriptor::~cLabelFigureDescriptor()
{
    delete[] propertyNames;
}

bool cLabelFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cLabelFigure *>(obj)!=nullptr;
}

const char **cLabelFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cLabelFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cLabelFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cLabelFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_angle
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cLabelFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "angle",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cLabelFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "angle") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cLabelFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_angle
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cLabelFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_angle: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cLabelFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_angle:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        default: return nullptr;
    }
}

int cLabelFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cLabelFigure *pp = omnetpp::fromAnyPtr<cLabelFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cLabelFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cLabelFigure *pp = omnetpp::fromAnyPtr<cLabelFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cLabelFigure'", field);
    }
}

const char *cLabelFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cLabelFigure *pp = omnetpp::fromAnyPtr<cLabelFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cLabelFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cLabelFigure *pp = omnetpp::fromAnyPtr<cLabelFigure>(object); (void)pp;
    switch (field) {
        case FIELD_angle: return double2string(pp->getAngle());
        default: return "";
    }
}

void cLabelFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cLabelFigure *pp = omnetpp::fromAnyPtr<cLabelFigure>(object); (void)pp;
    switch (field) {
        case FIELD_angle: pp->setAngle(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cLabelFigure'", field);
    }
}

omnetpp::cValue cLabelFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cLabelFigure *pp = omnetpp::fromAnyPtr<cLabelFigure>(object); (void)pp;
    switch (field) {
        case FIELD_angle: return pp->getAngle();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cLabelFigure' as cValue -- field index out of range?", field);
    }
}

void cLabelFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cLabelFigure *pp = omnetpp::fromAnyPtr<cLabelFigure>(object); (void)pp;
    switch (field) {
        case FIELD_angle: pp->setAngle(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cLabelFigure'", field);
    }
}

const char *cLabelFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cLabelFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cLabelFigure *pp = omnetpp::fromAnyPtr<cLabelFigure>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cLabelFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cLabelFigure *pp = omnetpp::fromAnyPtr<cLabelFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cLabelFigure'", field);
    }
}

class cAbstractImageFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_position,
        FIELD_anchor,
        FIELD_width,
        FIELD_height,
        FIELD_interpolation,
        FIELD_opacity,
        FIELD_tintColor,
        FIELD_tintAmount,
    };
  public:
    cAbstractImageFigureDescriptor();
    virtual ~cAbstractImageFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cAbstractImageFigureDescriptor)

cAbstractImageFigureDescriptor::cAbstractImageFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cAbstractImageFigure)), "omnetpp::cFigure")
{
    propertyNames = nullptr;
}

cAbstractImageFigureDescriptor::~cAbstractImageFigureDescriptor()
{
    delete[] propertyNames;
}

bool cAbstractImageFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cAbstractImageFigure *>(obj)!=nullptr;
}

const char **cAbstractImageFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cAbstractImageFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cAbstractImageFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 8+base->getFieldCount() : 8;
}

unsigned int cAbstractImageFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_position
        FD_ISEDITABLE,    // FIELD_anchor
        FD_ISEDITABLE,    // FIELD_width
        FD_ISEDITABLE,    // FIELD_height
        FD_ISEDITABLE,    // FIELD_interpolation
        FD_ISEDITABLE,    // FIELD_opacity
        FD_ISEDITABLE,    // FIELD_tintColor
        FD_ISEDITABLE,    // FIELD_tintAmount
    };
    return (field >= 0 && field < 8) ? fieldTypeFlags[field] : 0;
}

const char *cAbstractImageFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "position",
        "anchor",
        "width",
        "height",
        "interpolation",
        "opacity",
        "tintColor",
        "tintAmount",
    };
    return (field >= 0 && field < 8) ? fieldNames[field] : nullptr;
}

int cAbstractImageFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "position") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "anchor") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "width") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "height") == 0) return baseIndex + 3;
    if (strcmp(fieldName, "interpolation") == 0) return baseIndex + 4;
    if (strcmp(fieldName, "opacity") == 0) return baseIndex + 5;
    if (strcmp(fieldName, "tintColor") == 0) return baseIndex + 6;
    if (strcmp(fieldName, "tintAmount") == 0) return baseIndex + 7;
    return base ? base->findField(fieldName) : -1;
}

const char *cAbstractImageFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cFigure::Point",    // FIELD_position
        "int",    // FIELD_anchor
        "double",    // FIELD_width
        "double",    // FIELD_height
        "int",    // FIELD_interpolation
        "double",    // FIELD_opacity
        "omnetpp::cFigure::Color",    // FIELD_tintColor
        "double",    // FIELD_tintAmount
    };
    return (field >= 0 && field < 8) ? fieldTypeStrings[field] : nullptr;
}

const char **cAbstractImageFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_position: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_anchor: {
            static const char *names[] = { "group", "editable", "enum", "enum",  nullptr };
            return names;
        }
        case FIELD_width: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_height: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_interpolation: {
            static const char *names[] = { "group", "editable", "enum", "enum",  nullptr };
            return names;
        }
        case FIELD_opacity: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_tintColor: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        case FIELD_tintAmount: {
            static const char *names[] = { "group", "editable",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cAbstractImageFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_position:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_anchor:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "enum")) return "cFigure::Anchor";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cFigure::Anchor";
            return nullptr;
        case FIELD_width:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_height:
            if (!strcmp(propertyName, "group")) return "geometry";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_interpolation:
            if (!strcmp(propertyName, "group")) return "image";
            if (!strcmp(propertyName, "editable")) return "";
            if (!strcmp(propertyName, "enum")) return "cFigure::Interpolation";
            if (!strcmp(propertyName, "enum")) return "omnetpp::cFigure::Interpolation";
            return nullptr;
        case FIELD_opacity:
            if (!strcmp(propertyName, "group")) return "image";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_tintColor:
            if (!strcmp(propertyName, "group")) return "image";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        case FIELD_tintAmount:
            if (!strcmp(propertyName, "group")) return "image";
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        default: return nullptr;
    }
}

int cAbstractImageFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cAbstractImageFigure *pp = omnetpp::fromAnyPtr<cAbstractImageFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cAbstractImageFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractImageFigure *pp = omnetpp::fromAnyPtr<cAbstractImageFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cAbstractImageFigure'", field);
    }
}

const char *cAbstractImageFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cAbstractImageFigure *pp = omnetpp::fromAnyPtr<cAbstractImageFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cAbstractImageFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cAbstractImageFigure *pp = omnetpp::fromAnyPtr<cAbstractImageFigure>(object); (void)pp;
    switch (field) {
        case FIELD_position: return pp->getPosition().str();
        case FIELD_anchor: return enum2string(pp->getAnchor(), "omnetpp::cFigure::Anchor");
        case FIELD_width: return double2string(pp->getWidth());
        case FIELD_height: return double2string(pp->getHeight());
        case FIELD_interpolation: return enum2string(pp->getInterpolation(), "omnetpp::cFigure::Interpolation");
        case FIELD_opacity: return double2string(pp->getOpacity());
        case FIELD_tintColor: return pp->getTintColor().str();
        case FIELD_tintAmount: return double2string(pp->getTintAmount());
        default: return "";
    }
}

void cAbstractImageFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractImageFigure *pp = omnetpp::fromAnyPtr<cAbstractImageFigure>(object); (void)pp;
    switch (field) {
        case FIELD_position: pp->setPosition(cFigure::parsePoint(value)); break;
        case FIELD_anchor: pp->setAnchor((omnetpp::cFigure::Anchor)string2enum(value, "omnetpp::cFigure::Anchor")); break;
        case FIELD_width: pp->setWidth(string2double(value)); break;
        case FIELD_height: pp->setHeight(string2double(value)); break;
        case FIELD_interpolation: pp->setInterpolation((omnetpp::cFigure::Interpolation)string2enum(value, "omnetpp::cFigure::Interpolation")); break;
        case FIELD_opacity: pp->setOpacity(string2double(value)); break;
        case FIELD_tintColor: pp->setTintColor(cFigure::parseColor(value)); break;
        case FIELD_tintAmount: pp->setTintAmount(string2double(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAbstractImageFigure'", field);
    }
}

omnetpp::cValue cAbstractImageFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cAbstractImageFigure *pp = omnetpp::fromAnyPtr<cAbstractImageFigure>(object); (void)pp;
    switch (field) {
        case FIELD_position: return pp->getPosition().str();
        case FIELD_anchor: return pp->getAnchor();
        case FIELD_width: return pp->getWidth();
        case FIELD_height: return pp->getHeight();
        case FIELD_interpolation: return pp->getInterpolation();
        case FIELD_opacity: return pp->getOpacity();
        case FIELD_tintColor: return pp->getTintColor().str();
        case FIELD_tintAmount: return pp->getTintAmount();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cAbstractImageFigure' as cValue -- field index out of range?", field);
    }
}

void cAbstractImageFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractImageFigure *pp = omnetpp::fromAnyPtr<cAbstractImageFigure>(object); (void)pp;
    switch (field) {
        case FIELD_position: pp->setPosition(cFigure::parsePoint(value)); break;
        case FIELD_anchor: pp->setAnchor((omnetpp::cFigure::Anchor)value.intValue()); break;
        case FIELD_width: pp->setWidth(value.doubleValue()); break;
        case FIELD_height: pp->setHeight(value.doubleValue()); break;
        case FIELD_interpolation: pp->setInterpolation((omnetpp::cFigure::Interpolation)value.intValue()); break;
        case FIELD_opacity: pp->setOpacity(value.doubleValue()); break;
        case FIELD_tintColor: pp->setTintColor(cFigure::parseColor(value)); break;
        case FIELD_tintAmount: pp->setTintAmount(value.doubleValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAbstractImageFigure'", field);
    }
}

const char *cAbstractImageFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cAbstractImageFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cAbstractImageFigure *pp = omnetpp::fromAnyPtr<cAbstractImageFigure>(object); (void)pp;
    switch (field) {
        case FIELD_position: return omnetpp::toAnyPtr(&pp->getPosition()); break;
        case FIELD_tintColor: return omnetpp::toAnyPtr(&pp->getTintColor()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cAbstractImageFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cAbstractImageFigure *pp = omnetpp::fromAnyPtr<cAbstractImageFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cAbstractImageFigure'", field);
    }
}

class cImageFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_imageName,
    };
  public:
    cImageFigureDescriptor();
    virtual ~cImageFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cImageFigureDescriptor)

cImageFigureDescriptor::cImageFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cImageFigure)), "omnetpp::cAbstractImageFigure")
{
    propertyNames = nullptr;
}

cImageFigureDescriptor::~cImageFigureDescriptor()
{
    delete[] propertyNames;
}

bool cImageFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cImageFigure *>(obj)!=nullptr;
}

const char **cImageFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cImageFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cImageFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cImageFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISEDITABLE,    // FIELD_imageName
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cImageFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "imageName",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cImageFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "imageName") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cImageFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "string",    // FIELD_imageName
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cImageFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_imageName: {
            static const char *names[] = { "editable",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cImageFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_imageName:
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        default: return nullptr;
    }
}

int cImageFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cImageFigure *pp = omnetpp::fromAnyPtr<cImageFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cImageFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cImageFigure *pp = omnetpp::fromAnyPtr<cImageFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cImageFigure'", field);
    }
}

const char *cImageFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cImageFigure *pp = omnetpp::fromAnyPtr<cImageFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cImageFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cImageFigure *pp = omnetpp::fromAnyPtr<cImageFigure>(object); (void)pp;
    switch (field) {
        case FIELD_imageName: return oppstring2string(pp->getImageName());
        default: return "";
    }
}

void cImageFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cImageFigure *pp = omnetpp::fromAnyPtr<cImageFigure>(object); (void)pp;
    switch (field) {
        case FIELD_imageName: pp->setImageName((value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cImageFigure'", field);
    }
}

omnetpp::cValue cImageFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cImageFigure *pp = omnetpp::fromAnyPtr<cImageFigure>(object); (void)pp;
    switch (field) {
        case FIELD_imageName: return pp->getImageName();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cImageFigure' as cValue -- field index out of range?", field);
    }
}

void cImageFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cImageFigure *pp = omnetpp::fromAnyPtr<cImageFigure>(object); (void)pp;
    switch (field) {
        case FIELD_imageName: pp->setImageName(value.stringValue()); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cImageFigure'", field);
    }
}

const char *cImageFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cImageFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cImageFigure *pp = omnetpp::fromAnyPtr<cImageFigure>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cImageFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cImageFigure *pp = omnetpp::fromAnyPtr<cImageFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cImageFigure'", field);
    }
}

class cIconFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cIconFigureDescriptor();
    virtual ~cIconFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cIconFigureDescriptor)

cIconFigureDescriptor::cIconFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cIconFigure)), "omnetpp::cImageFigure")
{
    propertyNames = nullptr;
}

cIconFigureDescriptor::~cIconFigureDescriptor()
{
    delete[] propertyNames;
}

bool cIconFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cIconFigure *>(obj)!=nullptr;
}

const char **cIconFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cIconFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cIconFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cIconFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cIconFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cIconFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cIconFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cIconFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cIconFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cIconFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cIconFigure *pp = omnetpp::fromAnyPtr<cIconFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cIconFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cIconFigure *pp = omnetpp::fromAnyPtr<cIconFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cIconFigure'", field);
    }
}

const char *cIconFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cIconFigure *pp = omnetpp::fromAnyPtr<cIconFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cIconFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cIconFigure *pp = omnetpp::fromAnyPtr<cIconFigure>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cIconFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cIconFigure *pp = omnetpp::fromAnyPtr<cIconFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cIconFigure'", field);
    }
}

omnetpp::cValue cIconFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cIconFigure *pp = omnetpp::fromAnyPtr<cIconFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cIconFigure' as cValue -- field index out of range?", field);
    }
}

void cIconFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cIconFigure *pp = omnetpp::fromAnyPtr<cIconFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cIconFigure'", field);
    }
}

const char *cIconFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cIconFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cIconFigure *pp = omnetpp::fromAnyPtr<cIconFigure>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cIconFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cIconFigure *pp = omnetpp::fromAnyPtr<cIconFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cIconFigure'", field);
    }
}

class cPixmapFigureDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_pixmap,
    };
  public:
    cPixmapFigureDescriptor();
    virtual ~cPixmapFigureDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cPixmapFigureDescriptor)

cPixmapFigureDescriptor::cPixmapFigureDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cPixmapFigure)), "omnetpp::cAbstractImageFigure")
{
    propertyNames = nullptr;
}

cPixmapFigureDescriptor::~cPixmapFigureDescriptor()
{
    delete[] propertyNames;
}

bool cPixmapFigureDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cPixmapFigure *>(obj)!=nullptr;
}

const char **cPixmapFigureDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cPixmapFigureDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cPixmapFigureDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cPixmapFigureDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_pixmap
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cPixmapFigureDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "pixmap",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cPixmapFigureDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "pixmap") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cPixmapFigureDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cFigure::Pixmap",    // FIELD_pixmap
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cPixmapFigureDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cPixmapFigureDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cPixmapFigureDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cPixmapFigure *pp = omnetpp::fromAnyPtr<cPixmapFigure>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cPixmapFigureDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cPixmapFigure *pp = omnetpp::fromAnyPtr<cPixmapFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cPixmapFigure'", field);
    }
}

const char *cPixmapFigureDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cPixmapFigure *pp = omnetpp::fromAnyPtr<cPixmapFigure>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cPixmapFigureDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cPixmapFigure *pp = omnetpp::fromAnyPtr<cPixmapFigure>(object); (void)pp;
    switch (field) {
        case FIELD_pixmap: return "";
        default: return "";
    }
}

void cPixmapFigureDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPixmapFigure *pp = omnetpp::fromAnyPtr<cPixmapFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPixmapFigure'", field);
    }
}

omnetpp::cValue cPixmapFigureDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cPixmapFigure *pp = omnetpp::fromAnyPtr<cPixmapFigure>(object); (void)pp;
    switch (field) {
        case FIELD_pixmap: return pp->getPixmap().str();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cPixmapFigure' as cValue -- field index out of range?", field);
    }
}

void cPixmapFigureDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cPixmapFigure *pp = omnetpp::fromAnyPtr<cPixmapFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPixmapFigure'", field);
    }
}

const char *cPixmapFigureDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr cPixmapFigureDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cPixmapFigure *pp = omnetpp::fromAnyPtr<cPixmapFigure>(object); (void)pp;
    switch (field) {
        case FIELD_pixmap: return omnetpp::toAnyPtr(&pp->getPixmap()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cPixmapFigureDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cPixmapFigure *pp = omnetpp::fromAnyPtr<cPixmapFigure>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cPixmapFigure'", field);
    }
}

class cCanvasDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_rootFigure,
        FIELD_allTags,
        FIELD_backgroundColor,
    };
  public:
    cCanvasDescriptor();
    virtual ~cCanvasDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cCanvasDescriptor)

cCanvasDescriptor::cCanvasDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cCanvas)), "omnetpp::cOwnedObject")
{
    propertyNames = nullptr;
}

cCanvasDescriptor::~cCanvasDescriptor()
{
    delete[] propertyNames;
}

bool cCanvasDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cCanvas *>(obj)!=nullptr;
}

const char **cCanvasDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cCanvasDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cCanvasDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 3+base->getFieldCount() : 3;
}

unsigned int cCanvasDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_rootFigure
        0,    // FIELD_allTags
        FD_ISEDITABLE,    // FIELD_backgroundColor
    };
    return (field >= 0 && field < 3) ? fieldTypeFlags[field] : 0;
}

const char *cCanvasDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "rootFigure",
        "allTags",
        "backgroundColor",
    };
    return (field >= 0 && field < 3) ? fieldNames[field] : nullptr;
}

int cCanvasDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "rootFigure") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "allTags") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "backgroundColor") == 0) return baseIndex + 2;
    return base ? base->findField(fieldName) : -1;
}

const char *cCanvasDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cFigure",    // FIELD_rootFigure
        "string",    // FIELD_allTags
        "omnetpp::cFigure::Color",    // FIELD_backgroundColor
    };
    return (field >= 0 && field < 3) ? fieldTypeStrings[field] : nullptr;
}

const char **cCanvasDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_backgroundColor: {
            static const char *names[] = { "editable",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cCanvasDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_backgroundColor:
            if (!strcmp(propertyName, "editable")) return "";
            return nullptr;
        default: return nullptr;
    }
}

int cCanvasDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cCanvas *pp = omnetpp::fromAnyPtr<cCanvas>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cCanvasDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cCanvas *pp = omnetpp::fromAnyPtr<cCanvas>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cCanvas'", field);
    }
}

const char *cCanvasDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cCanvas *pp = omnetpp::fromAnyPtr<cCanvas>(object); (void)pp;
    switch (field) {
        case FIELD_rootFigure: { const cFigure * value = pp->getRootFigure(); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cCanvasDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cCanvas *pp = omnetpp::fromAnyPtr<cCanvas>(object); (void)pp;
    switch (field) {
        case FIELD_rootFigure: { auto obj = pp->getRootFigure(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_allTags: return oppstring2string(pp->getAllTags());
        case FIELD_backgroundColor: return pp->getBackgroundColor().str();
        default: return "";
    }
}

void cCanvasDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cCanvas *pp = omnetpp::fromAnyPtr<cCanvas>(object); (void)pp;
    switch (field) {
        case FIELD_backgroundColor: pp->setBackgroundColor(cFigure::parseColor(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cCanvas'", field);
    }
}

omnetpp::cValue cCanvasDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cCanvas *pp = omnetpp::fromAnyPtr<cCanvas>(object); (void)pp;
    switch (field) {
        case FIELD_rootFigure: return omnetpp::toAnyPtr(pp->getRootFigure()); break;
        case FIELD_allTags: return pp->getAllTags();
        case FIELD_backgroundColor: return pp->getBackgroundColor().str();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cCanvas' as cValue -- field index out of range?", field);
    }
}

void cCanvasDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cCanvas *pp = omnetpp::fromAnyPtr<cCanvas>(object); (void)pp;
    switch (field) {
        case FIELD_backgroundColor: pp->setBackgroundColor(cFigure::parseColor(value)); break;
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cCanvas'", field);
    }
}

const char *cCanvasDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_rootFigure: return omnetpp::opp_typename(typeid(cFigure));
        default: return nullptr;
    };
}

omnetpp::any_ptr cCanvasDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cCanvas *pp = omnetpp::fromAnyPtr<cCanvas>(object); (void)pp;
    switch (field) {
        case FIELD_rootFigure: return omnetpp::toAnyPtr(pp->getRootFigure()); break;
        case FIELD_backgroundColor: return omnetpp::toAnyPtr(&pp->getBackgroundColor()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cCanvasDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cCanvas *pp = omnetpp::fromAnyPtr<cCanvas>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cCanvas'", field);
    }
}

class cResultListenerDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cResultListenerDescriptor();
    virtual ~cResultListenerDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cResultListenerDescriptor)

cResultListenerDescriptor::cResultListenerDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cResultListener)), "omnetpp::cObject")
{
    propertyNames = nullptr;
}

cResultListenerDescriptor::~cResultListenerDescriptor()
{
    delete[] propertyNames;
}

bool cResultListenerDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cResultListener *>(obj)!=nullptr;
}

const char **cResultListenerDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "implements",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cResultListenerDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "implements")) return "cIListener";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cResultListenerDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cResultListenerDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cResultListenerDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cResultListenerDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cResultListenerDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cResultListenerDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cResultListenerDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cResultListenerDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cResultListener *pp = omnetpp::fromAnyPtr<cResultListener>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cResultListenerDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cResultListener *pp = omnetpp::fromAnyPtr<cResultListener>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cResultListener'", field);
    }
}

const char *cResultListenerDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cResultListener *pp = omnetpp::fromAnyPtr<cResultListener>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cResultListenerDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cResultListener *pp = omnetpp::fromAnyPtr<cResultListener>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cResultListenerDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cResultListener *pp = omnetpp::fromAnyPtr<cResultListener>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cResultListener'", field);
    }
}

omnetpp::cValue cResultListenerDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cResultListener *pp = omnetpp::fromAnyPtr<cResultListener>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cResultListener' as cValue -- field index out of range?", field);
    }
}

void cResultListenerDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cResultListener *pp = omnetpp::fromAnyPtr<cResultListener>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cResultListener'", field);
    }
}

const char *cResultListenerDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cResultListenerDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cResultListener *pp = omnetpp::fromAnyPtr<cResultListener>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cResultListenerDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cResultListener *pp = omnetpp::fromAnyPtr<cResultListener>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cResultListener'", field);
    }
}

class cResultFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_delegates,
    };
  public:
    cResultFilterDescriptor();
    virtual ~cResultFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cResultFilterDescriptor)

cResultFilterDescriptor::cResultFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cResultFilter)), "omnetpp::cResultListener")
{
    propertyNames = nullptr;
}

cResultFilterDescriptor::~cResultFilterDescriptor()
{
    delete[] propertyNames;
}

bool cResultFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cResultFilter *>(obj)!=nullptr;
}

const char **cResultFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cResultFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cResultFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int cResultFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISARRAY | FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT,    // FIELD_delegates
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *cResultFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "delegates",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int cResultFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "delegates") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *cResultFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cResultListener",    // FIELD_delegates
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **cResultFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_delegates: {
            static const char *names[] = { "sizeGetter", "getter", "toString",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *cResultFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_delegates:
            if (!strcmp(propertyName, "sizeGetter")) return "getNumDelegates";
            if (!strcmp(propertyName, "getter")) return "getDelegate";
            if (!strcmp(propertyName, "toString")) return "->str()";
            return nullptr;
        default: return nullptr;
    }
}

int cResultFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cResultFilter *pp = omnetpp::fromAnyPtr<cResultFilter>(object); (void)pp;
    switch (field) {
        case FIELD_delegates: return pp->getNumDelegates();
        default: return 0;
    }
}

void cResultFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cResultFilter *pp = omnetpp::fromAnyPtr<cResultFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cResultFilter'", field);
    }
}

const char *cResultFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cResultFilter *pp = omnetpp::fromAnyPtr<cResultFilter>(object); (void)pp;
    switch (field) {
        case FIELD_delegates: { const cResultListener * value = pp->getDelegate(i); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cResultFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cResultFilter *pp = omnetpp::fromAnyPtr<cResultFilter>(object); (void)pp;
    switch (field) {
        case FIELD_delegates: { auto obj = pp->getDelegate(i); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void cResultFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cResultFilter *pp = omnetpp::fromAnyPtr<cResultFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cResultFilter'", field);
    }
}

omnetpp::cValue cResultFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cResultFilter *pp = omnetpp::fromAnyPtr<cResultFilter>(object); (void)pp;
    switch (field) {
        case FIELD_delegates: return omnetpp::toAnyPtr(pp->getDelegate(i)); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cResultFilter' as cValue -- field index out of range?", field);
    }
}

void cResultFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cResultFilter *pp = omnetpp::fromAnyPtr<cResultFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cResultFilter'", field);
    }
}

const char *cResultFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_delegates: return omnetpp::opp_typename(typeid(cResultListener));
        default: return nullptr;
    };
}

omnetpp::any_ptr cResultFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cResultFilter *pp = omnetpp::fromAnyPtr<cResultFilter>(object); (void)pp;
    switch (field) {
        case FIELD_delegates: return omnetpp::toAnyPtr(pp->getDelegate(i)); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cResultFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cResultFilter *pp = omnetpp::fromAnyPtr<cResultFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cResultFilter'", field);
    }
}

class WarmupPeriodFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_endWarmupPeriod,
    };
  public:
    WarmupPeriodFilterDescriptor();
    virtual ~WarmupPeriodFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(WarmupPeriodFilterDescriptor)

WarmupPeriodFilterDescriptor::WarmupPeriodFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::WarmupPeriodFilter)), "omnetpp::cResultFilter")
{
    propertyNames = nullptr;
}

WarmupPeriodFilterDescriptor::~WarmupPeriodFilterDescriptor()
{
    delete[] propertyNames;
}

bool WarmupPeriodFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<WarmupPeriodFilter *>(obj)!=nullptr;
}

const char **WarmupPeriodFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *WarmupPeriodFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int WarmupPeriodFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int WarmupPeriodFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_endWarmupPeriod
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *WarmupPeriodFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "endWarmupPeriod",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int WarmupPeriodFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "endWarmupPeriod") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *WarmupPeriodFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::simtime_t",    // FIELD_endWarmupPeriod
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **WarmupPeriodFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *WarmupPeriodFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int WarmupPeriodFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    WarmupPeriodFilter *pp = omnetpp::fromAnyPtr<WarmupPeriodFilter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void WarmupPeriodFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    WarmupPeriodFilter *pp = omnetpp::fromAnyPtr<WarmupPeriodFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'WarmupPeriodFilter'", field);
    }
}

const char *WarmupPeriodFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    WarmupPeriodFilter *pp = omnetpp::fromAnyPtr<WarmupPeriodFilter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string WarmupPeriodFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    WarmupPeriodFilter *pp = omnetpp::fromAnyPtr<WarmupPeriodFilter>(object); (void)pp;
    switch (field) {
        case FIELD_endWarmupPeriod: return simtime2string(pp->getEndWarmupPeriod());
        default: return "";
    }
}

void WarmupPeriodFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    WarmupPeriodFilter *pp = omnetpp::fromAnyPtr<WarmupPeriodFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'WarmupPeriodFilter'", field);
    }
}

omnetpp::cValue WarmupPeriodFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    WarmupPeriodFilter *pp = omnetpp::fromAnyPtr<WarmupPeriodFilter>(object); (void)pp;
    switch (field) {
        case FIELD_endWarmupPeriod: return pp->getEndWarmupPeriod().dbl();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'WarmupPeriodFilter' as cValue -- field index out of range?", field);
    }
}

void WarmupPeriodFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    WarmupPeriodFilter *pp = omnetpp::fromAnyPtr<WarmupPeriodFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'WarmupPeriodFilter'", field);
    }
}

const char *WarmupPeriodFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr WarmupPeriodFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    WarmupPeriodFilter *pp = omnetpp::fromAnyPtr<WarmupPeriodFilter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void WarmupPeriodFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    WarmupPeriodFilter *pp = omnetpp::fromAnyPtr<WarmupPeriodFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'WarmupPeriodFilter'", field);
    }
}

class CountFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_count,
    };
  public:
    CountFilterDescriptor();
    virtual ~CountFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(CountFilterDescriptor)

CountFilterDescriptor::CountFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::CountFilter)), "omnetpp::cResultFilter")
{
    propertyNames = nullptr;
}

CountFilterDescriptor::~CountFilterDescriptor()
{
    delete[] propertyNames;
}

bool CountFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<CountFilter *>(obj)!=nullptr;
}

const char **CountFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *CountFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int CountFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int CountFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_count
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *CountFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "count",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int CountFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "count") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *CountFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "long",    // FIELD_count
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **CountFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *CountFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int CountFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    CountFilter *pp = omnetpp::fromAnyPtr<CountFilter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void CountFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    CountFilter *pp = omnetpp::fromAnyPtr<CountFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'CountFilter'", field);
    }
}

const char *CountFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    CountFilter *pp = omnetpp::fromAnyPtr<CountFilter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string CountFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    CountFilter *pp = omnetpp::fromAnyPtr<CountFilter>(object); (void)pp;
    switch (field) {
        case FIELD_count: return long2string(pp->getCount());
        default: return "";
    }
}

void CountFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    CountFilter *pp = omnetpp::fromAnyPtr<CountFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'CountFilter'", field);
    }
}

omnetpp::cValue CountFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    CountFilter *pp = omnetpp::fromAnyPtr<CountFilter>(object); (void)pp;
    switch (field) {
        case FIELD_count: return (omnetpp::intval_t)(pp->getCount());
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'CountFilter' as cValue -- field index out of range?", field);
    }
}

void CountFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    CountFilter *pp = omnetpp::fromAnyPtr<CountFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'CountFilter'", field);
    }
}

const char *CountFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr CountFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    CountFilter *pp = omnetpp::fromAnyPtr<CountFilter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void CountFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    CountFilter *pp = omnetpp::fromAnyPtr<CountFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'CountFilter'", field);
    }
}

class ConstantFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_constant,
    };
  public:
    ConstantFilterDescriptor();
    virtual ~ConstantFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(ConstantFilterDescriptor)

ConstantFilterDescriptor::ConstantFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::ConstantFilter)), "omnetpp::cResultFilter")
{
    propertyNames = nullptr;
}

ConstantFilterDescriptor::~ConstantFilterDescriptor()
{
    delete[] propertyNames;
}

bool ConstantFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<ConstantFilter *>(obj)!=nullptr;
}

const char **ConstantFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *ConstantFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int ConstantFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int ConstantFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_constant
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *ConstantFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "constant",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int ConstantFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "constant") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *ConstantFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_constant
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **ConstantFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *ConstantFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int ConstantFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    ConstantFilter *pp = omnetpp::fromAnyPtr<ConstantFilter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void ConstantFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    ConstantFilter *pp = omnetpp::fromAnyPtr<ConstantFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'ConstantFilter'", field);
    }
}

const char *ConstantFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    ConstantFilter *pp = omnetpp::fromAnyPtr<ConstantFilter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string ConstantFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    ConstantFilter *pp = omnetpp::fromAnyPtr<ConstantFilter>(object); (void)pp;
    switch (field) {
        case FIELD_constant: return double2string(pp->getConstant());
        default: return "";
    }
}

void ConstantFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    ConstantFilter *pp = omnetpp::fromAnyPtr<ConstantFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'ConstantFilter'", field);
    }
}

omnetpp::cValue ConstantFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    ConstantFilter *pp = omnetpp::fromAnyPtr<ConstantFilter>(object); (void)pp;
    switch (field) {
        case FIELD_constant: return pp->getConstant();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'ConstantFilter' as cValue -- field index out of range?", field);
    }
}

void ConstantFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    ConstantFilter *pp = omnetpp::fromAnyPtr<ConstantFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'ConstantFilter'", field);
    }
}

const char *ConstantFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr ConstantFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    ConstantFilter *pp = omnetpp::fromAnyPtr<ConstantFilter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void ConstantFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    ConstantFilter *pp = omnetpp::fromAnyPtr<ConstantFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'ConstantFilter'", field);
    }
}

class Constant0FilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    Constant0FilterDescriptor();
    virtual ~Constant0FilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(Constant0FilterDescriptor)

Constant0FilterDescriptor::Constant0FilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::Constant0Filter)), "omnetpp::ConstantFilter")
{
    propertyNames = nullptr;
}

Constant0FilterDescriptor::~Constant0FilterDescriptor()
{
    delete[] propertyNames;
}

bool Constant0FilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<Constant0Filter *>(obj)!=nullptr;
}

const char **Constant0FilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *Constant0FilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int Constant0FilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int Constant0FilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *Constant0FilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int Constant0FilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *Constant0FilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **Constant0FilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *Constant0FilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int Constant0FilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    Constant0Filter *pp = omnetpp::fromAnyPtr<Constant0Filter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void Constant0FilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    Constant0Filter *pp = omnetpp::fromAnyPtr<Constant0Filter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'Constant0Filter'", field);
    }
}

const char *Constant0FilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    Constant0Filter *pp = omnetpp::fromAnyPtr<Constant0Filter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string Constant0FilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    Constant0Filter *pp = omnetpp::fromAnyPtr<Constant0Filter>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void Constant0FilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    Constant0Filter *pp = omnetpp::fromAnyPtr<Constant0Filter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'Constant0Filter'", field);
    }
}

omnetpp::cValue Constant0FilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    Constant0Filter *pp = omnetpp::fromAnyPtr<Constant0Filter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'Constant0Filter' as cValue -- field index out of range?", field);
    }
}

void Constant0FilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    Constant0Filter *pp = omnetpp::fromAnyPtr<Constant0Filter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'Constant0Filter'", field);
    }
}

const char *Constant0FilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr Constant0FilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    Constant0Filter *pp = omnetpp::fromAnyPtr<Constant0Filter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void Constant0FilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    Constant0Filter *pp = omnetpp::fromAnyPtr<Constant0Filter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'Constant0Filter'", field);
    }
}

class Constant1FilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    Constant1FilterDescriptor();
    virtual ~Constant1FilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(Constant1FilterDescriptor)

Constant1FilterDescriptor::Constant1FilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::Constant1Filter)), "omnetpp::ConstantFilter")
{
    propertyNames = nullptr;
}

Constant1FilterDescriptor::~Constant1FilterDescriptor()
{
    delete[] propertyNames;
}

bool Constant1FilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<Constant1Filter *>(obj)!=nullptr;
}

const char **Constant1FilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *Constant1FilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int Constant1FilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int Constant1FilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *Constant1FilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int Constant1FilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *Constant1FilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **Constant1FilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *Constant1FilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int Constant1FilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    Constant1Filter *pp = omnetpp::fromAnyPtr<Constant1Filter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void Constant1FilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    Constant1Filter *pp = omnetpp::fromAnyPtr<Constant1Filter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'Constant1Filter'", field);
    }
}

const char *Constant1FilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    Constant1Filter *pp = omnetpp::fromAnyPtr<Constant1Filter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string Constant1FilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    Constant1Filter *pp = omnetpp::fromAnyPtr<Constant1Filter>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void Constant1FilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    Constant1Filter *pp = omnetpp::fromAnyPtr<Constant1Filter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'Constant1Filter'", field);
    }
}

omnetpp::cValue Constant1FilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    Constant1Filter *pp = omnetpp::fromAnyPtr<Constant1Filter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'Constant1Filter' as cValue -- field index out of range?", field);
    }
}

void Constant1FilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    Constant1Filter *pp = omnetpp::fromAnyPtr<Constant1Filter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'Constant1Filter'", field);
    }
}

const char *Constant1FilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr Constant1FilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    Constant1Filter *pp = omnetpp::fromAnyPtr<Constant1Filter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void Constant1FilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    Constant1Filter *pp = omnetpp::fromAnyPtr<Constant1Filter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'Constant1Filter'", field);
    }
}

class cNumericResultFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cNumericResultFilterDescriptor();
    virtual ~cNumericResultFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cNumericResultFilterDescriptor)

cNumericResultFilterDescriptor::cNumericResultFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cNumericResultFilter)), "omnetpp::cResultFilter")
{
    propertyNames = nullptr;
}

cNumericResultFilterDescriptor::~cNumericResultFilterDescriptor()
{
    delete[] propertyNames;
}

bool cNumericResultFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cNumericResultFilter *>(obj)!=nullptr;
}

const char **cNumericResultFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cNumericResultFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cNumericResultFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cNumericResultFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cNumericResultFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cNumericResultFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cNumericResultFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cNumericResultFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cNumericResultFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cNumericResultFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cNumericResultFilter *pp = omnetpp::fromAnyPtr<cNumericResultFilter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cNumericResultFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cNumericResultFilter *pp = omnetpp::fromAnyPtr<cNumericResultFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cNumericResultFilter'", field);
    }
}

const char *cNumericResultFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cNumericResultFilter *pp = omnetpp::fromAnyPtr<cNumericResultFilter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cNumericResultFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cNumericResultFilter *pp = omnetpp::fromAnyPtr<cNumericResultFilter>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cNumericResultFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cNumericResultFilter *pp = omnetpp::fromAnyPtr<cNumericResultFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNumericResultFilter'", field);
    }
}

omnetpp::cValue cNumericResultFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cNumericResultFilter *pp = omnetpp::fromAnyPtr<cNumericResultFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cNumericResultFilter' as cValue -- field index out of range?", field);
    }
}

void cNumericResultFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cNumericResultFilter *pp = omnetpp::fromAnyPtr<cNumericResultFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNumericResultFilter'", field);
    }
}

const char *cNumericResultFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cNumericResultFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cNumericResultFilter *pp = omnetpp::fromAnyPtr<cNumericResultFilter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cNumericResultFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cNumericResultFilter *pp = omnetpp::fromAnyPtr<cNumericResultFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNumericResultFilter'", field);
    }
}

class IdentityFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    IdentityFilterDescriptor();
    virtual ~IdentityFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(IdentityFilterDescriptor)

IdentityFilterDescriptor::IdentityFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::IdentityFilter)), "omnetpp::cResultFilter")
{
    propertyNames = nullptr;
}

IdentityFilterDescriptor::~IdentityFilterDescriptor()
{
    delete[] propertyNames;
}

bool IdentityFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<IdentityFilter *>(obj)!=nullptr;
}

const char **IdentityFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *IdentityFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int IdentityFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int IdentityFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *IdentityFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int IdentityFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *IdentityFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **IdentityFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *IdentityFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int IdentityFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    IdentityFilter *pp = omnetpp::fromAnyPtr<IdentityFilter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void IdentityFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    IdentityFilter *pp = omnetpp::fromAnyPtr<IdentityFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'IdentityFilter'", field);
    }
}

const char *IdentityFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    IdentityFilter *pp = omnetpp::fromAnyPtr<IdentityFilter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string IdentityFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    IdentityFilter *pp = omnetpp::fromAnyPtr<IdentityFilter>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void IdentityFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    IdentityFilter *pp = omnetpp::fromAnyPtr<IdentityFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'IdentityFilter'", field);
    }
}

omnetpp::cValue IdentityFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    IdentityFilter *pp = omnetpp::fromAnyPtr<IdentityFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'IdentityFilter' as cValue -- field index out of range?", field);
    }
}

void IdentityFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    IdentityFilter *pp = omnetpp::fromAnyPtr<IdentityFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'IdentityFilter'", field);
    }
}

const char *IdentityFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr IdentityFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    IdentityFilter *pp = omnetpp::fromAnyPtr<IdentityFilter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void IdentityFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    IdentityFilter *pp = omnetpp::fromAnyPtr<IdentityFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'IdentityFilter'", field);
    }
}

class SumFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_sum,
    };
  public:
    SumFilterDescriptor();
    virtual ~SumFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(SumFilterDescriptor)

SumFilterDescriptor::SumFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::SumFilter)), "omnetpp::cNumericResultFilter")
{
    propertyNames = nullptr;
}

SumFilterDescriptor::~SumFilterDescriptor()
{
    delete[] propertyNames;
}

bool SumFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<SumFilter *>(obj)!=nullptr;
}

const char **SumFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *SumFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int SumFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int SumFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_sum
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *SumFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "sum",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int SumFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "sum") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *SumFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_sum
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **SumFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *SumFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int SumFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    SumFilter *pp = omnetpp::fromAnyPtr<SumFilter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void SumFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    SumFilter *pp = omnetpp::fromAnyPtr<SumFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'SumFilter'", field);
    }
}

const char *SumFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    SumFilter *pp = omnetpp::fromAnyPtr<SumFilter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string SumFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    SumFilter *pp = omnetpp::fromAnyPtr<SumFilter>(object); (void)pp;
    switch (field) {
        case FIELD_sum: return double2string(pp->getSum());
        default: return "";
    }
}

void SumFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    SumFilter *pp = omnetpp::fromAnyPtr<SumFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'SumFilter'", field);
    }
}

omnetpp::cValue SumFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    SumFilter *pp = omnetpp::fromAnyPtr<SumFilter>(object); (void)pp;
    switch (field) {
        case FIELD_sum: return pp->getSum();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'SumFilter' as cValue -- field index out of range?", field);
    }
}

void SumFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    SumFilter *pp = omnetpp::fromAnyPtr<SumFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'SumFilter'", field);
    }
}

const char *SumFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr SumFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    SumFilter *pp = omnetpp::fromAnyPtr<SumFilter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void SumFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    SumFilter *pp = omnetpp::fromAnyPtr<SumFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'SumFilter'", field);
    }
}

class MeanFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_mean,
    };
  public:
    MeanFilterDescriptor();
    virtual ~MeanFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(MeanFilterDescriptor)

MeanFilterDescriptor::MeanFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::MeanFilter)), "omnetpp::cNumericResultFilter")
{
    propertyNames = nullptr;
}

MeanFilterDescriptor::~MeanFilterDescriptor()
{
    delete[] propertyNames;
}

bool MeanFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<MeanFilter *>(obj)!=nullptr;
}

const char **MeanFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *MeanFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int MeanFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int MeanFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_mean
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *MeanFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "mean",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int MeanFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "mean") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *MeanFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_mean
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **MeanFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *MeanFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int MeanFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    MeanFilter *pp = omnetpp::fromAnyPtr<MeanFilter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void MeanFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    MeanFilter *pp = omnetpp::fromAnyPtr<MeanFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'MeanFilter'", field);
    }
}

const char *MeanFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    MeanFilter *pp = omnetpp::fromAnyPtr<MeanFilter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string MeanFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    MeanFilter *pp = omnetpp::fromAnyPtr<MeanFilter>(object); (void)pp;
    switch (field) {
        case FIELD_mean: return double2string(pp->getMean());
        default: return "";
    }
}

void MeanFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    MeanFilter *pp = omnetpp::fromAnyPtr<MeanFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MeanFilter'", field);
    }
}

omnetpp::cValue MeanFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    MeanFilter *pp = omnetpp::fromAnyPtr<MeanFilter>(object); (void)pp;
    switch (field) {
        case FIELD_mean: return pp->getMean();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'MeanFilter' as cValue -- field index out of range?", field);
    }
}

void MeanFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    MeanFilter *pp = omnetpp::fromAnyPtr<MeanFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MeanFilter'", field);
    }
}

const char *MeanFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr MeanFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    MeanFilter *pp = omnetpp::fromAnyPtr<MeanFilter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void MeanFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    MeanFilter *pp = omnetpp::fromAnyPtr<MeanFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MeanFilter'", field);
    }
}

class MinFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_min,
    };
  public:
    MinFilterDescriptor();
    virtual ~MinFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(MinFilterDescriptor)

MinFilterDescriptor::MinFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::MinFilter)), "omnetpp::cNumericResultFilter")
{
    propertyNames = nullptr;
}

MinFilterDescriptor::~MinFilterDescriptor()
{
    delete[] propertyNames;
}

bool MinFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<MinFilter *>(obj)!=nullptr;
}

const char **MinFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *MinFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int MinFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int MinFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_min
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *MinFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "min",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int MinFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "min") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *MinFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_min
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **MinFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *MinFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int MinFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    MinFilter *pp = omnetpp::fromAnyPtr<MinFilter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void MinFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    MinFilter *pp = omnetpp::fromAnyPtr<MinFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'MinFilter'", field);
    }
}

const char *MinFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    MinFilter *pp = omnetpp::fromAnyPtr<MinFilter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string MinFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    MinFilter *pp = omnetpp::fromAnyPtr<MinFilter>(object); (void)pp;
    switch (field) {
        case FIELD_min: return double2string(pp->getMin());
        default: return "";
    }
}

void MinFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    MinFilter *pp = omnetpp::fromAnyPtr<MinFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MinFilter'", field);
    }
}

omnetpp::cValue MinFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    MinFilter *pp = omnetpp::fromAnyPtr<MinFilter>(object); (void)pp;
    switch (field) {
        case FIELD_min: return pp->getMin();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'MinFilter' as cValue -- field index out of range?", field);
    }
}

void MinFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    MinFilter *pp = omnetpp::fromAnyPtr<MinFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MinFilter'", field);
    }
}

const char *MinFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr MinFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    MinFilter *pp = omnetpp::fromAnyPtr<MinFilter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void MinFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    MinFilter *pp = omnetpp::fromAnyPtr<MinFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MinFilter'", field);
    }
}

class MaxFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_max,
    };
  public:
    MaxFilterDescriptor();
    virtual ~MaxFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(MaxFilterDescriptor)

MaxFilterDescriptor::MaxFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::MaxFilter)), "omnetpp::cNumericResultFilter")
{
    propertyNames = nullptr;
}

MaxFilterDescriptor::~MaxFilterDescriptor()
{
    delete[] propertyNames;
}

bool MaxFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<MaxFilter *>(obj)!=nullptr;
}

const char **MaxFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *MaxFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int MaxFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int MaxFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_max
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *MaxFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "max",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int MaxFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "max") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *MaxFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_max
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **MaxFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *MaxFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int MaxFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    MaxFilter *pp = omnetpp::fromAnyPtr<MaxFilter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void MaxFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    MaxFilter *pp = omnetpp::fromAnyPtr<MaxFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'MaxFilter'", field);
    }
}

const char *MaxFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    MaxFilter *pp = omnetpp::fromAnyPtr<MaxFilter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string MaxFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    MaxFilter *pp = omnetpp::fromAnyPtr<MaxFilter>(object); (void)pp;
    switch (field) {
        case FIELD_max: return double2string(pp->getMax());
        default: return "";
    }
}

void MaxFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    MaxFilter *pp = omnetpp::fromAnyPtr<MaxFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MaxFilter'", field);
    }
}

omnetpp::cValue MaxFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    MaxFilter *pp = omnetpp::fromAnyPtr<MaxFilter>(object); (void)pp;
    switch (field) {
        case FIELD_max: return pp->getMax();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'MaxFilter' as cValue -- field index out of range?", field);
    }
}

void MaxFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    MaxFilter *pp = omnetpp::fromAnyPtr<MaxFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MaxFilter'", field);
    }
}

const char *MaxFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr MaxFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    MaxFilter *pp = omnetpp::fromAnyPtr<MaxFilter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void MaxFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    MaxFilter *pp = omnetpp::fromAnyPtr<MaxFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MaxFilter'", field);
    }
}

class TimeAverageFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_timeAverage,
    };
  public:
    TimeAverageFilterDescriptor();
    virtual ~TimeAverageFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(TimeAverageFilterDescriptor)

TimeAverageFilterDescriptor::TimeAverageFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::TimeAverageFilter)), "omnetpp::cNumericResultFilter")
{
    propertyNames = nullptr;
}

TimeAverageFilterDescriptor::~TimeAverageFilterDescriptor()
{
    delete[] propertyNames;
}

bool TimeAverageFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<TimeAverageFilter *>(obj)!=nullptr;
}

const char **TimeAverageFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *TimeAverageFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int TimeAverageFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int TimeAverageFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_timeAverage
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *TimeAverageFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "timeAverage",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int TimeAverageFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "timeAverage") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *TimeAverageFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_timeAverage
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **TimeAverageFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *TimeAverageFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int TimeAverageFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    TimeAverageFilter *pp = omnetpp::fromAnyPtr<TimeAverageFilter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void TimeAverageFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    TimeAverageFilter *pp = omnetpp::fromAnyPtr<TimeAverageFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'TimeAverageFilter'", field);
    }
}

const char *TimeAverageFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    TimeAverageFilter *pp = omnetpp::fromAnyPtr<TimeAverageFilter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string TimeAverageFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    TimeAverageFilter *pp = omnetpp::fromAnyPtr<TimeAverageFilter>(object); (void)pp;
    switch (field) {
        case FIELD_timeAverage: return double2string(pp->getTimeAverage());
        default: return "";
    }
}

void TimeAverageFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    TimeAverageFilter *pp = omnetpp::fromAnyPtr<TimeAverageFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'TimeAverageFilter'", field);
    }
}

omnetpp::cValue TimeAverageFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    TimeAverageFilter *pp = omnetpp::fromAnyPtr<TimeAverageFilter>(object); (void)pp;
    switch (field) {
        case FIELD_timeAverage: return pp->getTimeAverage();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'TimeAverageFilter' as cValue -- field index out of range?", field);
    }
}

void TimeAverageFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    TimeAverageFilter *pp = omnetpp::fromAnyPtr<TimeAverageFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'TimeAverageFilter'", field);
    }
}

const char *TimeAverageFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr TimeAverageFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    TimeAverageFilter *pp = omnetpp::fromAnyPtr<TimeAverageFilter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void TimeAverageFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    TimeAverageFilter *pp = omnetpp::fromAnyPtr<TimeAverageFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'TimeAverageFilter'", field);
    }
}

class RemoveRepeatsFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_lastValue,
    };
  public:
    RemoveRepeatsFilterDescriptor();
    virtual ~RemoveRepeatsFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(RemoveRepeatsFilterDescriptor)

RemoveRepeatsFilterDescriptor::RemoveRepeatsFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::RemoveRepeatsFilter)), "omnetpp::cNumericResultFilter")
{
    propertyNames = nullptr;
}

RemoveRepeatsFilterDescriptor::~RemoveRepeatsFilterDescriptor()
{
    delete[] propertyNames;
}

bool RemoveRepeatsFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<RemoveRepeatsFilter *>(obj)!=nullptr;
}

const char **RemoveRepeatsFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *RemoveRepeatsFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int RemoveRepeatsFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int RemoveRepeatsFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_lastValue
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *RemoveRepeatsFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "lastValue",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int RemoveRepeatsFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "lastValue") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *RemoveRepeatsFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_lastValue
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **RemoveRepeatsFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *RemoveRepeatsFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int RemoveRepeatsFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    RemoveRepeatsFilter *pp = omnetpp::fromAnyPtr<RemoveRepeatsFilter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void RemoveRepeatsFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    RemoveRepeatsFilter *pp = omnetpp::fromAnyPtr<RemoveRepeatsFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'RemoveRepeatsFilter'", field);
    }
}

const char *RemoveRepeatsFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    RemoveRepeatsFilter *pp = omnetpp::fromAnyPtr<RemoveRepeatsFilter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string RemoveRepeatsFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    RemoveRepeatsFilter *pp = omnetpp::fromAnyPtr<RemoveRepeatsFilter>(object); (void)pp;
    switch (field) {
        case FIELD_lastValue: return double2string(pp->getLastValue());
        default: return "";
    }
}

void RemoveRepeatsFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    RemoveRepeatsFilter *pp = omnetpp::fromAnyPtr<RemoveRepeatsFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'RemoveRepeatsFilter'", field);
    }
}

omnetpp::cValue RemoveRepeatsFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    RemoveRepeatsFilter *pp = omnetpp::fromAnyPtr<RemoveRepeatsFilter>(object); (void)pp;
    switch (field) {
        case FIELD_lastValue: return pp->getLastValue();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'RemoveRepeatsFilter' as cValue -- field index out of range?", field);
    }
}

void RemoveRepeatsFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    RemoveRepeatsFilter *pp = omnetpp::fromAnyPtr<RemoveRepeatsFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'RemoveRepeatsFilter'", field);
    }
}

const char *RemoveRepeatsFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr RemoveRepeatsFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    RemoveRepeatsFilter *pp = omnetpp::fromAnyPtr<RemoveRepeatsFilter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void RemoveRepeatsFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    RemoveRepeatsFilter *pp = omnetpp::fromAnyPtr<RemoveRepeatsFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'RemoveRepeatsFilter'", field);
    }
}

class ExpressionFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_expression,
        FIELD_lastValue,
        FIELD_lastTimestamp,
    };
  public:
    ExpressionFilterDescriptor();
    virtual ~ExpressionFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(ExpressionFilterDescriptor)

ExpressionFilterDescriptor::ExpressionFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::ExpressionFilter)), "omnetpp::cResultFilter")
{
    propertyNames = nullptr;
}

ExpressionFilterDescriptor::~ExpressionFilterDescriptor()
{
    delete[] propertyNames;
}

bool ExpressionFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<ExpressionFilter *>(obj)!=nullptr;
}

const char **ExpressionFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor", "castFunction",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *ExpressionFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    if (!strcmp(propertyName, "castFunction")) return "false";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int ExpressionFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 3+base->getFieldCount() : 3;
}

unsigned int ExpressionFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_expression
        0,    // FIELD_lastValue
        0,    // FIELD_lastTimestamp
    };
    return (field >= 0 && field < 3) ? fieldTypeFlags[field] : 0;
}

const char *ExpressionFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "expression",
        "lastValue",
        "lastTimestamp",
    };
    return (field >= 0 && field < 3) ? fieldNames[field] : nullptr;
}

int ExpressionFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "expression") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "lastValue") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "lastTimestamp") == 0) return baseIndex + 2;
    return base ? base->findField(fieldName) : -1;
}

const char *ExpressionFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "string",    // FIELD_expression
        "string",    // FIELD_lastValue
        "omnetpp::simtime_t",    // FIELD_lastTimestamp
    };
    return (field >= 0 && field < 3) ? fieldTypeStrings[field] : nullptr;
}

const char **ExpressionFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_expression: {
            static const char *names[] = { "toString", "toValue",  nullptr };
            return names;
        }
        case FIELD_lastValue: {
            static const char *names[] = { "toString", "toValue",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *ExpressionFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_expression:
            if (!strcmp(propertyName, "toString")) return ".str()";
            if (!strcmp(propertyName, "toValue")) return ".str()";
            return nullptr;
        case FIELD_lastValue:
            if (!strcmp(propertyName, "toString")) return ".str()";
            if (!strcmp(propertyName, "toValue")) return "nedsupport::makeNedValue($)";
            return nullptr;
        default: return nullptr;
    }
}

int ExpressionFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    ExpressionFilter *pp = omnetpp::fromAnyPtr<ExpressionFilter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void ExpressionFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    ExpressionFilter *pp = omnetpp::fromAnyPtr<ExpressionFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'ExpressionFilter'", field);
    }
}

const char *ExpressionFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    ExpressionFilter *pp = omnetpp::fromAnyPtr<ExpressionFilter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string ExpressionFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    ExpressionFilter *pp = omnetpp::fromAnyPtr<ExpressionFilter>(object); (void)pp;
    switch (field) {
        case FIELD_expression: return pp->getExpression().str();
        case FIELD_lastValue: return pp->getLastValue().str();
        case FIELD_lastTimestamp: return simtime2string(pp->getLastTimestamp());
        default: return "";
    }
}

void ExpressionFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    ExpressionFilter *pp = omnetpp::fromAnyPtr<ExpressionFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'ExpressionFilter'", field);
    }
}

omnetpp::cValue ExpressionFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    ExpressionFilter *pp = omnetpp::fromAnyPtr<ExpressionFilter>(object); (void)pp;
    switch (field) {
        case FIELD_expression: return pp->getExpression().str();
        case FIELD_lastValue: return nedsupport::makeNedValue(pp->getLastValue());
        case FIELD_lastTimestamp: return pp->getLastTimestamp().dbl();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'ExpressionFilter' as cValue -- field index out of range?", field);
    }
}

void ExpressionFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    ExpressionFilter *pp = omnetpp::fromAnyPtr<ExpressionFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'ExpressionFilter'", field);
    }
}

const char *ExpressionFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr ExpressionFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    ExpressionFilter *pp = omnetpp::fromAnyPtr<ExpressionFilter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void ExpressionFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    ExpressionFilter *pp = omnetpp::fromAnyPtr<ExpressionFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'ExpressionFilter'", field);
    }
}

class cObjectResultFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cObjectResultFilterDescriptor();
    virtual ~cObjectResultFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cObjectResultFilterDescriptor)

cObjectResultFilterDescriptor::cObjectResultFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cObjectResultFilter)), "omnetpp::cResultFilter")
{
    propertyNames = nullptr;
}

cObjectResultFilterDescriptor::~cObjectResultFilterDescriptor()
{
    delete[] propertyNames;
}

bool cObjectResultFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cObjectResultFilter *>(obj)!=nullptr;
}

const char **cObjectResultFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cObjectResultFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cObjectResultFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cObjectResultFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cObjectResultFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cObjectResultFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cObjectResultFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cObjectResultFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cObjectResultFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cObjectResultFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cObjectResultFilter *pp = omnetpp::fromAnyPtr<cObjectResultFilter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cObjectResultFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cObjectResultFilter *pp = omnetpp::fromAnyPtr<cObjectResultFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cObjectResultFilter'", field);
    }
}

const char *cObjectResultFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cObjectResultFilter *pp = omnetpp::fromAnyPtr<cObjectResultFilter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cObjectResultFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cObjectResultFilter *pp = omnetpp::fromAnyPtr<cObjectResultFilter>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cObjectResultFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cObjectResultFilter *pp = omnetpp::fromAnyPtr<cObjectResultFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cObjectResultFilter'", field);
    }
}

omnetpp::cValue cObjectResultFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cObjectResultFilter *pp = omnetpp::fromAnyPtr<cObjectResultFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cObjectResultFilter' as cValue -- field index out of range?", field);
    }
}

void cObjectResultFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cObjectResultFilter *pp = omnetpp::fromAnyPtr<cObjectResultFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cObjectResultFilter'", field);
    }
}

const char *cObjectResultFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cObjectResultFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cObjectResultFilter *pp = omnetpp::fromAnyPtr<cObjectResultFilter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cObjectResultFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cObjectResultFilter *pp = omnetpp::fromAnyPtr<cObjectResultFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cObjectResultFilter'", field);
    }
}

class PacketBytesFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    PacketBytesFilterDescriptor();
    virtual ~PacketBytesFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(PacketBytesFilterDescriptor)

PacketBytesFilterDescriptor::PacketBytesFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::PacketBytesFilter)), "omnetpp::cObjectResultFilter")
{
    propertyNames = nullptr;
}

PacketBytesFilterDescriptor::~PacketBytesFilterDescriptor()
{
    delete[] propertyNames;
}

bool PacketBytesFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<PacketBytesFilter *>(obj)!=nullptr;
}

const char **PacketBytesFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *PacketBytesFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int PacketBytesFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int PacketBytesFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *PacketBytesFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int PacketBytesFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *PacketBytesFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **PacketBytesFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *PacketBytesFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int PacketBytesFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    PacketBytesFilter *pp = omnetpp::fromAnyPtr<PacketBytesFilter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void PacketBytesFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    PacketBytesFilter *pp = omnetpp::fromAnyPtr<PacketBytesFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'PacketBytesFilter'", field);
    }
}

const char *PacketBytesFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    PacketBytesFilter *pp = omnetpp::fromAnyPtr<PacketBytesFilter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string PacketBytesFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    PacketBytesFilter *pp = omnetpp::fromAnyPtr<PacketBytesFilter>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void PacketBytesFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    PacketBytesFilter *pp = omnetpp::fromAnyPtr<PacketBytesFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'PacketBytesFilter'", field);
    }
}

omnetpp::cValue PacketBytesFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    PacketBytesFilter *pp = omnetpp::fromAnyPtr<PacketBytesFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'PacketBytesFilter' as cValue -- field index out of range?", field);
    }
}

void PacketBytesFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    PacketBytesFilter *pp = omnetpp::fromAnyPtr<PacketBytesFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'PacketBytesFilter'", field);
    }
}

const char *PacketBytesFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr PacketBytesFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    PacketBytesFilter *pp = omnetpp::fromAnyPtr<PacketBytesFilter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void PacketBytesFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    PacketBytesFilter *pp = omnetpp::fromAnyPtr<PacketBytesFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'PacketBytesFilter'", field);
    }
}

class PacketBitsFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    PacketBitsFilterDescriptor();
    virtual ~PacketBitsFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(PacketBitsFilterDescriptor)

PacketBitsFilterDescriptor::PacketBitsFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::PacketBitsFilter)), "omnetpp::cObjectResultFilter")
{
    propertyNames = nullptr;
}

PacketBitsFilterDescriptor::~PacketBitsFilterDescriptor()
{
    delete[] propertyNames;
}

bool PacketBitsFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<PacketBitsFilter *>(obj)!=nullptr;
}

const char **PacketBitsFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *PacketBitsFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int PacketBitsFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int PacketBitsFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *PacketBitsFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int PacketBitsFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *PacketBitsFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **PacketBitsFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *PacketBitsFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int PacketBitsFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    PacketBitsFilter *pp = omnetpp::fromAnyPtr<PacketBitsFilter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void PacketBitsFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    PacketBitsFilter *pp = omnetpp::fromAnyPtr<PacketBitsFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'PacketBitsFilter'", field);
    }
}

const char *PacketBitsFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    PacketBitsFilter *pp = omnetpp::fromAnyPtr<PacketBitsFilter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string PacketBitsFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    PacketBitsFilter *pp = omnetpp::fromAnyPtr<PacketBitsFilter>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void PacketBitsFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    PacketBitsFilter *pp = omnetpp::fromAnyPtr<PacketBitsFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'PacketBitsFilter'", field);
    }
}

omnetpp::cValue PacketBitsFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    PacketBitsFilter *pp = omnetpp::fromAnyPtr<PacketBitsFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'PacketBitsFilter' as cValue -- field index out of range?", field);
    }
}

void PacketBitsFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    PacketBitsFilter *pp = omnetpp::fromAnyPtr<PacketBitsFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'PacketBitsFilter'", field);
    }
}

const char *PacketBitsFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr PacketBitsFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    PacketBitsFilter *pp = omnetpp::fromAnyPtr<PacketBitsFilter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void PacketBitsFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    PacketBitsFilter *pp = omnetpp::fromAnyPtr<PacketBitsFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'PacketBitsFilter'", field);
    }
}

class SumPerDurationFilterDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_sumPerDuration,
    };
  public:
    SumPerDurationFilterDescriptor();
    virtual ~SumPerDurationFilterDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(SumPerDurationFilterDescriptor)

SumPerDurationFilterDescriptor::SumPerDurationFilterDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::SumPerDurationFilter)), "omnetpp::cNumericResultFilter")
{
    propertyNames = nullptr;
}

SumPerDurationFilterDescriptor::~SumPerDurationFilterDescriptor()
{
    delete[] propertyNames;
}

bool SumPerDurationFilterDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<SumPerDurationFilter *>(obj)!=nullptr;
}

const char **SumPerDurationFilterDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *SumPerDurationFilterDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int SumPerDurationFilterDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int SumPerDurationFilterDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_sumPerDuration
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *SumPerDurationFilterDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "sumPerDuration",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int SumPerDurationFilterDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "sumPerDuration") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *SumPerDurationFilterDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_sumPerDuration
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **SumPerDurationFilterDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *SumPerDurationFilterDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int SumPerDurationFilterDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    SumPerDurationFilter *pp = omnetpp::fromAnyPtr<SumPerDurationFilter>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void SumPerDurationFilterDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    SumPerDurationFilter *pp = omnetpp::fromAnyPtr<SumPerDurationFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'SumPerDurationFilter'", field);
    }
}

const char *SumPerDurationFilterDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    SumPerDurationFilter *pp = omnetpp::fromAnyPtr<SumPerDurationFilter>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string SumPerDurationFilterDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    SumPerDurationFilter *pp = omnetpp::fromAnyPtr<SumPerDurationFilter>(object); (void)pp;
    switch (field) {
        case FIELD_sumPerDuration: return double2string(pp->getSumPerDuration());
        default: return "";
    }
}

void SumPerDurationFilterDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    SumPerDurationFilter *pp = omnetpp::fromAnyPtr<SumPerDurationFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'SumPerDurationFilter'", field);
    }
}

omnetpp::cValue SumPerDurationFilterDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    SumPerDurationFilter *pp = omnetpp::fromAnyPtr<SumPerDurationFilter>(object); (void)pp;
    switch (field) {
        case FIELD_sumPerDuration: return pp->getSumPerDuration();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'SumPerDurationFilter' as cValue -- field index out of range?", field);
    }
}

void SumPerDurationFilterDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    SumPerDurationFilter *pp = omnetpp::fromAnyPtr<SumPerDurationFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'SumPerDurationFilter'", field);
    }
}

const char *SumPerDurationFilterDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr SumPerDurationFilterDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    SumPerDurationFilter *pp = omnetpp::fromAnyPtr<SumPerDurationFilter>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void SumPerDurationFilterDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    SumPerDurationFilter *pp = omnetpp::fromAnyPtr<SumPerDurationFilter>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'SumPerDurationFilter'", field);
    }
}

class cResultRecorderDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_component,
        FIELD_resultName,
        FIELD_statisticName,
        FIELD_recordingMode,
    };
  public:
    cResultRecorderDescriptor();
    virtual ~cResultRecorderDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cResultRecorderDescriptor)

cResultRecorderDescriptor::cResultRecorderDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cResultRecorder)), "omnetpp::cResultListener")
{
    propertyNames = nullptr;
}

cResultRecorderDescriptor::~cResultRecorderDescriptor()
{
    delete[] propertyNames;
}

bool cResultRecorderDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cResultRecorder *>(obj)!=nullptr;
}

const char **cResultRecorderDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cResultRecorderDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cResultRecorderDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 4+base->getFieldCount() : 4;
}

unsigned int cResultRecorderDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_component
        0,    // FIELD_resultName
        0,    // FIELD_statisticName
        0,    // FIELD_recordingMode
    };
    return (field >= 0 && field < 4) ? fieldTypeFlags[field] : 0;
}

const char *cResultRecorderDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "component",
        "resultName",
        "statisticName",
        "recordingMode",
    };
    return (field >= 0 && field < 4) ? fieldNames[field] : nullptr;
}

int cResultRecorderDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "component") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "resultName") == 0) return baseIndex + 1;
    if (strcmp(fieldName, "statisticName") == 0) return baseIndex + 2;
    if (strcmp(fieldName, "recordingMode") == 0) return baseIndex + 3;
    return base ? base->findField(fieldName) : -1;
}

const char *cResultRecorderDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cComponent",    // FIELD_component
        "string",    // FIELD_resultName
        "string",    // FIELD_statisticName
        "string",    // FIELD_recordingMode
    };
    return (field >= 0 && field < 4) ? fieldTypeStrings[field] : nullptr;
}

const char **cResultRecorderDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cResultRecorderDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cResultRecorderDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cResultRecorder *pp = omnetpp::fromAnyPtr<cResultRecorder>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cResultRecorderDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cResultRecorder *pp = omnetpp::fromAnyPtr<cResultRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cResultRecorder'", field);
    }
}

const char *cResultRecorderDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cResultRecorder *pp = omnetpp::fromAnyPtr<cResultRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_component: { const cComponent * value = pp->getComponent(); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string cResultRecorderDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cResultRecorder *pp = omnetpp::fromAnyPtr<cResultRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_component: { auto obj = pp->getComponent(); return obj == nullptr ? "" : obj->str(); }
        case FIELD_resultName: return oppstring2string(pp->getResultName());
        case FIELD_statisticName: return oppstring2string(pp->getStatisticName());
        case FIELD_recordingMode: return oppstring2string(pp->getRecordingMode());
        default: return "";
    }
}

void cResultRecorderDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cResultRecorder *pp = omnetpp::fromAnyPtr<cResultRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cResultRecorder'", field);
    }
}

omnetpp::cValue cResultRecorderDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cResultRecorder *pp = omnetpp::fromAnyPtr<cResultRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_component: return omnetpp::toAnyPtr(pp->getComponent()); break;
        case FIELD_resultName: return pp->getResultName();
        case FIELD_statisticName: return pp->getStatisticName();
        case FIELD_recordingMode: return pp->getRecordingMode();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cResultRecorder' as cValue -- field index out of range?", field);
    }
}

void cResultRecorderDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cResultRecorder *pp = omnetpp::fromAnyPtr<cResultRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cResultRecorder'", field);
    }
}

const char *cResultRecorderDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_component: return omnetpp::opp_typename(typeid(cComponent));
        default: return nullptr;
    };
}

omnetpp::any_ptr cResultRecorderDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cResultRecorder *pp = omnetpp::fromAnyPtr<cResultRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_component: return omnetpp::toAnyPtr(pp->getComponent()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cResultRecorderDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cResultRecorder *pp = omnetpp::fromAnyPtr<cResultRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cResultRecorder'", field);
    }
}

class cNumericResultRecorderDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    cNumericResultRecorderDescriptor();
    virtual ~cNumericResultRecorderDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(cNumericResultRecorderDescriptor)

cNumericResultRecorderDescriptor::cNumericResultRecorderDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::cNumericResultRecorder)), "omnetpp::cResultRecorder")
{
    propertyNames = nullptr;
}

cNumericResultRecorderDescriptor::~cNumericResultRecorderDescriptor()
{
    delete[] propertyNames;
}

bool cNumericResultRecorderDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<cNumericResultRecorder *>(obj)!=nullptr;
}

const char **cNumericResultRecorderDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *cNumericResultRecorderDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int cNumericResultRecorderDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int cNumericResultRecorderDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *cNumericResultRecorderDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int cNumericResultRecorderDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *cNumericResultRecorderDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **cNumericResultRecorderDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *cNumericResultRecorderDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int cNumericResultRecorderDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    cNumericResultRecorder *pp = omnetpp::fromAnyPtr<cNumericResultRecorder>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void cNumericResultRecorderDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    cNumericResultRecorder *pp = omnetpp::fromAnyPtr<cNumericResultRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'cNumericResultRecorder'", field);
    }
}

const char *cNumericResultRecorderDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    cNumericResultRecorder *pp = omnetpp::fromAnyPtr<cNumericResultRecorder>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string cNumericResultRecorderDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    cNumericResultRecorder *pp = omnetpp::fromAnyPtr<cNumericResultRecorder>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void cNumericResultRecorderDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cNumericResultRecorder *pp = omnetpp::fromAnyPtr<cNumericResultRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNumericResultRecorder'", field);
    }
}

omnetpp::cValue cNumericResultRecorderDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    cNumericResultRecorder *pp = omnetpp::fromAnyPtr<cNumericResultRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'cNumericResultRecorder' as cValue -- field index out of range?", field);
    }
}

void cNumericResultRecorderDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    cNumericResultRecorder *pp = omnetpp::fromAnyPtr<cNumericResultRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNumericResultRecorder'", field);
    }
}

const char *cNumericResultRecorderDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr cNumericResultRecorderDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    cNumericResultRecorder *pp = omnetpp::fromAnyPtr<cNumericResultRecorder>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void cNumericResultRecorderDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    cNumericResultRecorder *pp = omnetpp::fromAnyPtr<cNumericResultRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'cNumericResultRecorder'", field);
    }
}

class VectorRecorderDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_lastWriteTime,
        FIELD_lastValue,
    };
  public:
    VectorRecorderDescriptor();
    virtual ~VectorRecorderDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(VectorRecorderDescriptor)

VectorRecorderDescriptor::VectorRecorderDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::VectorRecorder)), "omnetpp::cNumericResultRecorder")
{
    propertyNames = nullptr;
}

VectorRecorderDescriptor::~VectorRecorderDescriptor()
{
    delete[] propertyNames;
}

bool VectorRecorderDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<VectorRecorder *>(obj)!=nullptr;
}

const char **VectorRecorderDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *VectorRecorderDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int VectorRecorderDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 2+base->getFieldCount() : 2;
}

unsigned int VectorRecorderDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_lastWriteTime
        0,    // FIELD_lastValue
    };
    return (field >= 0 && field < 2) ? fieldTypeFlags[field] : 0;
}

const char *VectorRecorderDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "lastWriteTime",
        "lastValue",
    };
    return (field >= 0 && field < 2) ? fieldNames[field] : nullptr;
}

int VectorRecorderDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "lastWriteTime") == 0) return baseIndex + 0;
    if (strcmp(fieldName, "lastValue") == 0) return baseIndex + 1;
    return base ? base->findField(fieldName) : -1;
}

const char *VectorRecorderDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::simtime_t",    // FIELD_lastWriteTime
        "double",    // FIELD_lastValue
    };
    return (field >= 0 && field < 2) ? fieldTypeStrings[field] : nullptr;
}

const char **VectorRecorderDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *VectorRecorderDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int VectorRecorderDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    VectorRecorder *pp = omnetpp::fromAnyPtr<VectorRecorder>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void VectorRecorderDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    VectorRecorder *pp = omnetpp::fromAnyPtr<VectorRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'VectorRecorder'", field);
    }
}

const char *VectorRecorderDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    VectorRecorder *pp = omnetpp::fromAnyPtr<VectorRecorder>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string VectorRecorderDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    VectorRecorder *pp = omnetpp::fromAnyPtr<VectorRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_lastWriteTime: return simtime2string(pp->getLastWriteTime());
        case FIELD_lastValue: return double2string(pp->getLastValue());
        default: return "";
    }
}

void VectorRecorderDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    VectorRecorder *pp = omnetpp::fromAnyPtr<VectorRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'VectorRecorder'", field);
    }
}

omnetpp::cValue VectorRecorderDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    VectorRecorder *pp = omnetpp::fromAnyPtr<VectorRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_lastWriteTime: return pp->getLastWriteTime().dbl();
        case FIELD_lastValue: return pp->getLastValue();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'VectorRecorder' as cValue -- field index out of range?", field);
    }
}

void VectorRecorderDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    VectorRecorder *pp = omnetpp::fromAnyPtr<VectorRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'VectorRecorder'", field);
    }
}

const char *VectorRecorderDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr VectorRecorderDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    VectorRecorder *pp = omnetpp::fromAnyPtr<VectorRecorder>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void VectorRecorderDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    VectorRecorder *pp = omnetpp::fromAnyPtr<VectorRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'VectorRecorder'", field);
    }
}

class CountRecorderDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_count,
    };
  public:
    CountRecorderDescriptor();
    virtual ~CountRecorderDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(CountRecorderDescriptor)

CountRecorderDescriptor::CountRecorderDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::CountRecorder)), "omnetpp::cResultRecorder")
{
    propertyNames = nullptr;
}

CountRecorderDescriptor::~CountRecorderDescriptor()
{
    delete[] propertyNames;
}

bool CountRecorderDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<CountRecorder *>(obj)!=nullptr;
}

const char **CountRecorderDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *CountRecorderDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int CountRecorderDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int CountRecorderDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_count
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *CountRecorderDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "count",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int CountRecorderDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "count") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *CountRecorderDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "long",    // FIELD_count
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **CountRecorderDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *CountRecorderDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int CountRecorderDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    CountRecorder *pp = omnetpp::fromAnyPtr<CountRecorder>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void CountRecorderDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    CountRecorder *pp = omnetpp::fromAnyPtr<CountRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'CountRecorder'", field);
    }
}

const char *CountRecorderDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    CountRecorder *pp = omnetpp::fromAnyPtr<CountRecorder>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string CountRecorderDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    CountRecorder *pp = omnetpp::fromAnyPtr<CountRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_count: return long2string(pp->getCount());
        default: return "";
    }
}

void CountRecorderDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    CountRecorder *pp = omnetpp::fromAnyPtr<CountRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'CountRecorder'", field);
    }
}

omnetpp::cValue CountRecorderDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    CountRecorder *pp = omnetpp::fromAnyPtr<CountRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_count: return (omnetpp::intval_t)(pp->getCount());
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'CountRecorder' as cValue -- field index out of range?", field);
    }
}

void CountRecorderDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    CountRecorder *pp = omnetpp::fromAnyPtr<CountRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'CountRecorder'", field);
    }
}

const char *CountRecorderDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr CountRecorderDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    CountRecorder *pp = omnetpp::fromAnyPtr<CountRecorder>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void CountRecorderDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    CountRecorder *pp = omnetpp::fromAnyPtr<CountRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'CountRecorder'", field);
    }
}

class LastValueRecorderDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_lastValue,
    };
  public:
    LastValueRecorderDescriptor();
    virtual ~LastValueRecorderDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(LastValueRecorderDescriptor)

LastValueRecorderDescriptor::LastValueRecorderDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::LastValueRecorder)), "omnetpp::cNumericResultRecorder")
{
    propertyNames = nullptr;
}

LastValueRecorderDescriptor::~LastValueRecorderDescriptor()
{
    delete[] propertyNames;
}

bool LastValueRecorderDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<LastValueRecorder *>(obj)!=nullptr;
}

const char **LastValueRecorderDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *LastValueRecorderDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int LastValueRecorderDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int LastValueRecorderDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_lastValue
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *LastValueRecorderDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "lastValue",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int LastValueRecorderDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "lastValue") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *LastValueRecorderDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_lastValue
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **LastValueRecorderDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *LastValueRecorderDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int LastValueRecorderDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    LastValueRecorder *pp = omnetpp::fromAnyPtr<LastValueRecorder>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void LastValueRecorderDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    LastValueRecorder *pp = omnetpp::fromAnyPtr<LastValueRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'LastValueRecorder'", field);
    }
}

const char *LastValueRecorderDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    LastValueRecorder *pp = omnetpp::fromAnyPtr<LastValueRecorder>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string LastValueRecorderDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    LastValueRecorder *pp = omnetpp::fromAnyPtr<LastValueRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_lastValue: return double2string(pp->getLastValue());
        default: return "";
    }
}

void LastValueRecorderDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    LastValueRecorder *pp = omnetpp::fromAnyPtr<LastValueRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'LastValueRecorder'", field);
    }
}

omnetpp::cValue LastValueRecorderDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    LastValueRecorder *pp = omnetpp::fromAnyPtr<LastValueRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_lastValue: return pp->getLastValue();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'LastValueRecorder' as cValue -- field index out of range?", field);
    }
}

void LastValueRecorderDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    LastValueRecorder *pp = omnetpp::fromAnyPtr<LastValueRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'LastValueRecorder'", field);
    }
}

const char *LastValueRecorderDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr LastValueRecorderDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    LastValueRecorder *pp = omnetpp::fromAnyPtr<LastValueRecorder>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void LastValueRecorderDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    LastValueRecorder *pp = omnetpp::fromAnyPtr<LastValueRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'LastValueRecorder'", field);
    }
}

class SumRecorderDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_sum,
    };
  public:
    SumRecorderDescriptor();
    virtual ~SumRecorderDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(SumRecorderDescriptor)

SumRecorderDescriptor::SumRecorderDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::SumRecorder)), "omnetpp::cNumericResultRecorder")
{
    propertyNames = nullptr;
}

SumRecorderDescriptor::~SumRecorderDescriptor()
{
    delete[] propertyNames;
}

bool SumRecorderDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<SumRecorder *>(obj)!=nullptr;
}

const char **SumRecorderDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *SumRecorderDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int SumRecorderDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int SumRecorderDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_sum
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *SumRecorderDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "sum",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int SumRecorderDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "sum") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *SumRecorderDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_sum
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **SumRecorderDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *SumRecorderDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int SumRecorderDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    SumRecorder *pp = omnetpp::fromAnyPtr<SumRecorder>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void SumRecorderDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    SumRecorder *pp = omnetpp::fromAnyPtr<SumRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'SumRecorder'", field);
    }
}

const char *SumRecorderDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    SumRecorder *pp = omnetpp::fromAnyPtr<SumRecorder>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string SumRecorderDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    SumRecorder *pp = omnetpp::fromAnyPtr<SumRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_sum: return double2string(pp->getSum());
        default: return "";
    }
}

void SumRecorderDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    SumRecorder *pp = omnetpp::fromAnyPtr<SumRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'SumRecorder'", field);
    }
}

omnetpp::cValue SumRecorderDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    SumRecorder *pp = omnetpp::fromAnyPtr<SumRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_sum: return pp->getSum();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'SumRecorder' as cValue -- field index out of range?", field);
    }
}

void SumRecorderDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    SumRecorder *pp = omnetpp::fromAnyPtr<SumRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'SumRecorder'", field);
    }
}

const char *SumRecorderDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr SumRecorderDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    SumRecorder *pp = omnetpp::fromAnyPtr<SumRecorder>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void SumRecorderDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    SumRecorder *pp = omnetpp::fromAnyPtr<SumRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'SumRecorder'", field);
    }
}

class MeanRecorderDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_mean,
    };
  public:
    MeanRecorderDescriptor();
    virtual ~MeanRecorderDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(MeanRecorderDescriptor)

MeanRecorderDescriptor::MeanRecorderDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::MeanRecorder)), "omnetpp::cNumericResultRecorder")
{
    propertyNames = nullptr;
}

MeanRecorderDescriptor::~MeanRecorderDescriptor()
{
    delete[] propertyNames;
}

bool MeanRecorderDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<MeanRecorder *>(obj)!=nullptr;
}

const char **MeanRecorderDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *MeanRecorderDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int MeanRecorderDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int MeanRecorderDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_mean
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *MeanRecorderDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "mean",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int MeanRecorderDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "mean") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *MeanRecorderDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_mean
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **MeanRecorderDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *MeanRecorderDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int MeanRecorderDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    MeanRecorder *pp = omnetpp::fromAnyPtr<MeanRecorder>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void MeanRecorderDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    MeanRecorder *pp = omnetpp::fromAnyPtr<MeanRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'MeanRecorder'", field);
    }
}

const char *MeanRecorderDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    MeanRecorder *pp = omnetpp::fromAnyPtr<MeanRecorder>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string MeanRecorderDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    MeanRecorder *pp = omnetpp::fromAnyPtr<MeanRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_mean: return double2string(pp->getMean());
        default: return "";
    }
}

void MeanRecorderDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    MeanRecorder *pp = omnetpp::fromAnyPtr<MeanRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MeanRecorder'", field);
    }
}

omnetpp::cValue MeanRecorderDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    MeanRecorder *pp = omnetpp::fromAnyPtr<MeanRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_mean: return pp->getMean();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'MeanRecorder' as cValue -- field index out of range?", field);
    }
}

void MeanRecorderDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    MeanRecorder *pp = omnetpp::fromAnyPtr<MeanRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MeanRecorder'", field);
    }
}

const char *MeanRecorderDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr MeanRecorderDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    MeanRecorder *pp = omnetpp::fromAnyPtr<MeanRecorder>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void MeanRecorderDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    MeanRecorder *pp = omnetpp::fromAnyPtr<MeanRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MeanRecorder'", field);
    }
}

class MinRecorderDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_min,
    };
  public:
    MinRecorderDescriptor();
    virtual ~MinRecorderDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(MinRecorderDescriptor)

MinRecorderDescriptor::MinRecorderDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::MinRecorder)), "omnetpp::cNumericResultRecorder")
{
    propertyNames = nullptr;
}

MinRecorderDescriptor::~MinRecorderDescriptor()
{
    delete[] propertyNames;
}

bool MinRecorderDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<MinRecorder *>(obj)!=nullptr;
}

const char **MinRecorderDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *MinRecorderDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int MinRecorderDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int MinRecorderDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_min
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *MinRecorderDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "min",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int MinRecorderDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "min") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *MinRecorderDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_min
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **MinRecorderDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *MinRecorderDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int MinRecorderDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    MinRecorder *pp = omnetpp::fromAnyPtr<MinRecorder>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void MinRecorderDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    MinRecorder *pp = omnetpp::fromAnyPtr<MinRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'MinRecorder'", field);
    }
}

const char *MinRecorderDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    MinRecorder *pp = omnetpp::fromAnyPtr<MinRecorder>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string MinRecorderDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    MinRecorder *pp = omnetpp::fromAnyPtr<MinRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_min: return double2string(pp->getMin());
        default: return "";
    }
}

void MinRecorderDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    MinRecorder *pp = omnetpp::fromAnyPtr<MinRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MinRecorder'", field);
    }
}

omnetpp::cValue MinRecorderDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    MinRecorder *pp = omnetpp::fromAnyPtr<MinRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_min: return pp->getMin();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'MinRecorder' as cValue -- field index out of range?", field);
    }
}

void MinRecorderDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    MinRecorder *pp = omnetpp::fromAnyPtr<MinRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MinRecorder'", field);
    }
}

const char *MinRecorderDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr MinRecorderDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    MinRecorder *pp = omnetpp::fromAnyPtr<MinRecorder>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void MinRecorderDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    MinRecorder *pp = omnetpp::fromAnyPtr<MinRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MinRecorder'", field);
    }
}

class MaxRecorderDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_max,
    };
  public:
    MaxRecorderDescriptor();
    virtual ~MaxRecorderDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(MaxRecorderDescriptor)

MaxRecorderDescriptor::MaxRecorderDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::MaxRecorder)), "omnetpp::cNumericResultRecorder")
{
    propertyNames = nullptr;
}

MaxRecorderDescriptor::~MaxRecorderDescriptor()
{
    delete[] propertyNames;
}

bool MaxRecorderDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<MaxRecorder *>(obj)!=nullptr;
}

const char **MaxRecorderDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *MaxRecorderDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int MaxRecorderDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int MaxRecorderDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_max
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *MaxRecorderDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "max",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int MaxRecorderDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "max") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *MaxRecorderDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_max
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **MaxRecorderDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *MaxRecorderDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int MaxRecorderDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    MaxRecorder *pp = omnetpp::fromAnyPtr<MaxRecorder>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void MaxRecorderDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    MaxRecorder *pp = omnetpp::fromAnyPtr<MaxRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'MaxRecorder'", field);
    }
}

const char *MaxRecorderDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    MaxRecorder *pp = omnetpp::fromAnyPtr<MaxRecorder>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string MaxRecorderDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    MaxRecorder *pp = omnetpp::fromAnyPtr<MaxRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_max: return double2string(pp->getMax());
        default: return "";
    }
}

void MaxRecorderDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    MaxRecorder *pp = omnetpp::fromAnyPtr<MaxRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MaxRecorder'", field);
    }
}

omnetpp::cValue MaxRecorderDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    MaxRecorder *pp = omnetpp::fromAnyPtr<MaxRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_max: return pp->getMax();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'MaxRecorder' as cValue -- field index out of range?", field);
    }
}

void MaxRecorderDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    MaxRecorder *pp = omnetpp::fromAnyPtr<MaxRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MaxRecorder'", field);
    }
}

const char *MaxRecorderDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr MaxRecorderDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    MaxRecorder *pp = omnetpp::fromAnyPtr<MaxRecorder>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void MaxRecorderDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    MaxRecorder *pp = omnetpp::fromAnyPtr<MaxRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'MaxRecorder'", field);
    }
}

class TimeAverageRecorderDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_timeAverage,
    };
  public:
    TimeAverageRecorderDescriptor();
    virtual ~TimeAverageRecorderDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(TimeAverageRecorderDescriptor)

TimeAverageRecorderDescriptor::TimeAverageRecorderDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::TimeAverageRecorder)), "omnetpp::cNumericResultRecorder")
{
    propertyNames = nullptr;
}

TimeAverageRecorderDescriptor::~TimeAverageRecorderDescriptor()
{
    delete[] propertyNames;
}

bool TimeAverageRecorderDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<TimeAverageRecorder *>(obj)!=nullptr;
}

const char **TimeAverageRecorderDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *TimeAverageRecorderDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int TimeAverageRecorderDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int TimeAverageRecorderDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        0,    // FIELD_timeAverage
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *TimeAverageRecorderDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "timeAverage",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int TimeAverageRecorderDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "timeAverage") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *TimeAverageRecorderDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "double",    // FIELD_timeAverage
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **TimeAverageRecorderDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_timeAverage: {
            static const char *names[] = { "hint",  nullptr };
            return names;
        }
        default: return nullptr;
    }
}

const char *TimeAverageRecorderDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_timeAverage:
            if (!strcmp(propertyName, "hint")) return "Computed with the CURRENT simulation time";
            return nullptr;
        default: return nullptr;
    }
}

int TimeAverageRecorderDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    TimeAverageRecorder *pp = omnetpp::fromAnyPtr<TimeAverageRecorder>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void TimeAverageRecorderDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    TimeAverageRecorder *pp = omnetpp::fromAnyPtr<TimeAverageRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'TimeAverageRecorder'", field);
    }
}

const char *TimeAverageRecorderDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    TimeAverageRecorder *pp = omnetpp::fromAnyPtr<TimeAverageRecorder>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string TimeAverageRecorderDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    TimeAverageRecorder *pp = omnetpp::fromAnyPtr<TimeAverageRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_timeAverage: return double2string(pp->getTimeAverage());
        default: return "";
    }
}

void TimeAverageRecorderDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    TimeAverageRecorder *pp = omnetpp::fromAnyPtr<TimeAverageRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'TimeAverageRecorder'", field);
    }
}

omnetpp::cValue TimeAverageRecorderDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    TimeAverageRecorder *pp = omnetpp::fromAnyPtr<TimeAverageRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_timeAverage: return pp->getTimeAverage();
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'TimeAverageRecorder' as cValue -- field index out of range?", field);
    }
}

void TimeAverageRecorderDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    TimeAverageRecorder *pp = omnetpp::fromAnyPtr<TimeAverageRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'TimeAverageRecorder'", field);
    }
}

const char *TimeAverageRecorderDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    };
}

omnetpp::any_ptr TimeAverageRecorderDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    TimeAverageRecorder *pp = omnetpp::fromAnyPtr<TimeAverageRecorder>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void TimeAverageRecorderDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    TimeAverageRecorder *pp = omnetpp::fromAnyPtr<TimeAverageRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'TimeAverageRecorder'", field);
    }
}

class StatisticsRecorderDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
        FIELD_statistic,
    };
  public:
    StatisticsRecorderDescriptor();
    virtual ~StatisticsRecorderDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(StatisticsRecorderDescriptor)

StatisticsRecorderDescriptor::StatisticsRecorderDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::StatisticsRecorder)), "omnetpp::cNumericResultRecorder")
{
    propertyNames = nullptr;
}

StatisticsRecorderDescriptor::~StatisticsRecorderDescriptor()
{
    delete[] propertyNames;
}

bool StatisticsRecorderDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<StatisticsRecorder *>(obj)!=nullptr;
}

const char **StatisticsRecorderDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *StatisticsRecorderDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int StatisticsRecorderDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 1+base->getFieldCount() : 1;
}

unsigned int StatisticsRecorderDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    static unsigned int fieldTypeFlags[] = {
        FD_ISCOMPOUND | FD_ISPOINTER | FD_ISCOBJECT | FD_ISCOWNEDOBJECT,    // FIELD_statistic
    };
    return (field >= 0 && field < 1) ? fieldTypeFlags[field] : 0;
}

const char *StatisticsRecorderDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    static const char *fieldNames[] = {
        "statistic",
    };
    return (field >= 0 && field < 1) ? fieldNames[field] : nullptr;
}

int StatisticsRecorderDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    int baseIndex = base ? base->getFieldCount() : 0;
    if (strcmp(fieldName, "statistic") == 0) return baseIndex + 0;
    return base ? base->findField(fieldName) : -1;
}

const char *StatisticsRecorderDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    static const char *fieldTypeStrings[] = {
        "omnetpp::cStatistic",    // FIELD_statistic
    };
    return (field >= 0 && field < 1) ? fieldTypeStrings[field] : nullptr;
}

const char **StatisticsRecorderDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *StatisticsRecorderDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int StatisticsRecorderDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    StatisticsRecorder *pp = omnetpp::fromAnyPtr<StatisticsRecorder>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void StatisticsRecorderDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    StatisticsRecorder *pp = omnetpp::fromAnyPtr<StatisticsRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'StatisticsRecorder'", field);
    }
}

const char *StatisticsRecorderDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    StatisticsRecorder *pp = omnetpp::fromAnyPtr<StatisticsRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_statistic: { const cStatistic * value = pp->getStatistic(); return omnetpp::opp_typename(typeid(*value)); }
        default: return nullptr;
    }
}

std::string StatisticsRecorderDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    StatisticsRecorder *pp = omnetpp::fromAnyPtr<StatisticsRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_statistic: { auto obj = pp->getStatistic(); return obj == nullptr ? "" : obj->str(); }
        default: return "";
    }
}

void StatisticsRecorderDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    StatisticsRecorder *pp = omnetpp::fromAnyPtr<StatisticsRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'StatisticsRecorder'", field);
    }
}

omnetpp::cValue StatisticsRecorderDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    StatisticsRecorder *pp = omnetpp::fromAnyPtr<StatisticsRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_statistic: return omnetpp::toAnyPtr(pp->getStatistic()); break;
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'StatisticsRecorder' as cValue -- field index out of range?", field);
    }
}

void StatisticsRecorderDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    StatisticsRecorder *pp = omnetpp::fromAnyPtr<StatisticsRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'StatisticsRecorder'", field);
    }
}

const char *StatisticsRecorderDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        case FIELD_statistic: return omnetpp::opp_typename(typeid(cStatistic));
        default: return nullptr;
    };
}

omnetpp::any_ptr StatisticsRecorderDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    StatisticsRecorder *pp = omnetpp::fromAnyPtr<StatisticsRecorder>(object); (void)pp;
    switch (field) {
        case FIELD_statistic: return omnetpp::toAnyPtr(pp->getStatistic()); break;
        default: return omnetpp::any_ptr(nullptr);
    }
}

void StatisticsRecorderDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    StatisticsRecorder *pp = omnetpp::fromAnyPtr<StatisticsRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'StatisticsRecorder'", field);
    }
}

class StatsRecorderDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    StatsRecorderDescriptor();
    virtual ~StatsRecorderDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(StatsRecorderDescriptor)

StatsRecorderDescriptor::StatsRecorderDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::StatsRecorder)), "omnetpp::StatisticsRecorder")
{
    propertyNames = nullptr;
}

StatsRecorderDescriptor::~StatsRecorderDescriptor()
{
    delete[] propertyNames;
}

bool StatsRecorderDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<StatsRecorder *>(obj)!=nullptr;
}

const char **StatsRecorderDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *StatsRecorderDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int StatsRecorderDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int StatsRecorderDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *StatsRecorderDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int StatsRecorderDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *StatsRecorderDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **StatsRecorderDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *StatsRecorderDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int StatsRecorderDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    StatsRecorder *pp = omnetpp::fromAnyPtr<StatsRecorder>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void StatsRecorderDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    StatsRecorder *pp = omnetpp::fromAnyPtr<StatsRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'StatsRecorder'", field);
    }
}

const char *StatsRecorderDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    StatsRecorder *pp = omnetpp::fromAnyPtr<StatsRecorder>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string StatsRecorderDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    StatsRecorder *pp = omnetpp::fromAnyPtr<StatsRecorder>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void StatsRecorderDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    StatsRecorder *pp = omnetpp::fromAnyPtr<StatsRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'StatsRecorder'", field);
    }
}

omnetpp::cValue StatsRecorderDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    StatsRecorder *pp = omnetpp::fromAnyPtr<StatsRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'StatsRecorder' as cValue -- field index out of range?", field);
    }
}

void StatsRecorderDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    StatsRecorder *pp = omnetpp::fromAnyPtr<StatsRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'StatsRecorder'", field);
    }
}

const char *StatsRecorderDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr StatsRecorderDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    StatsRecorder *pp = omnetpp::fromAnyPtr<StatsRecorder>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void StatsRecorderDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    StatsRecorder *pp = omnetpp::fromAnyPtr<StatsRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'StatsRecorder'", field);
    }
}

class HistogramRecorderDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    HistogramRecorderDescriptor();
    virtual ~HistogramRecorderDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(HistogramRecorderDescriptor)

HistogramRecorderDescriptor::HistogramRecorderDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::HistogramRecorder)), "omnetpp::StatisticsRecorder")
{
    propertyNames = nullptr;
}

HistogramRecorderDescriptor::~HistogramRecorderDescriptor()
{
    delete[] propertyNames;
}

bool HistogramRecorderDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<HistogramRecorder *>(obj)!=nullptr;
}

const char **HistogramRecorderDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *HistogramRecorderDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int HistogramRecorderDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int HistogramRecorderDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *HistogramRecorderDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int HistogramRecorderDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *HistogramRecorderDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **HistogramRecorderDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *HistogramRecorderDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int HistogramRecorderDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    HistogramRecorder *pp = omnetpp::fromAnyPtr<HistogramRecorder>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void HistogramRecorderDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    HistogramRecorder *pp = omnetpp::fromAnyPtr<HistogramRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'HistogramRecorder'", field);
    }
}

const char *HistogramRecorderDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    HistogramRecorder *pp = omnetpp::fromAnyPtr<HistogramRecorder>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string HistogramRecorderDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    HistogramRecorder *pp = omnetpp::fromAnyPtr<HistogramRecorder>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void HistogramRecorderDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    HistogramRecorder *pp = omnetpp::fromAnyPtr<HistogramRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'HistogramRecorder'", field);
    }
}

omnetpp::cValue HistogramRecorderDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    HistogramRecorder *pp = omnetpp::fromAnyPtr<HistogramRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'HistogramRecorder' as cValue -- field index out of range?", field);
    }
}

void HistogramRecorderDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    HistogramRecorder *pp = omnetpp::fromAnyPtr<HistogramRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'HistogramRecorder'", field);
    }
}

const char *HistogramRecorderDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr HistogramRecorderDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    HistogramRecorder *pp = omnetpp::fromAnyPtr<HistogramRecorder>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void HistogramRecorderDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    HistogramRecorder *pp = omnetpp::fromAnyPtr<HistogramRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'HistogramRecorder'", field);
    }
}

class KSplitRecorderDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    KSplitRecorderDescriptor();
    virtual ~KSplitRecorderDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(KSplitRecorderDescriptor)

KSplitRecorderDescriptor::KSplitRecorderDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::KSplitRecorder)), "omnetpp::StatisticsRecorder")
{
    propertyNames = nullptr;
}

KSplitRecorderDescriptor::~KSplitRecorderDescriptor()
{
    delete[] propertyNames;
}

bool KSplitRecorderDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<KSplitRecorder *>(obj)!=nullptr;
}

const char **KSplitRecorderDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *KSplitRecorderDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int KSplitRecorderDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int KSplitRecorderDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *KSplitRecorderDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int KSplitRecorderDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *KSplitRecorderDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **KSplitRecorderDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *KSplitRecorderDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int KSplitRecorderDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    KSplitRecorder *pp = omnetpp::fromAnyPtr<KSplitRecorder>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void KSplitRecorderDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    KSplitRecorder *pp = omnetpp::fromAnyPtr<KSplitRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'KSplitRecorder'", field);
    }
}

const char *KSplitRecorderDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    KSplitRecorder *pp = omnetpp::fromAnyPtr<KSplitRecorder>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string KSplitRecorderDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    KSplitRecorder *pp = omnetpp::fromAnyPtr<KSplitRecorder>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void KSplitRecorderDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    KSplitRecorder *pp = omnetpp::fromAnyPtr<KSplitRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'KSplitRecorder'", field);
    }
}

omnetpp::cValue KSplitRecorderDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    KSplitRecorder *pp = omnetpp::fromAnyPtr<KSplitRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'KSplitRecorder' as cValue -- field index out of range?", field);
    }
}

void KSplitRecorderDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    KSplitRecorder *pp = omnetpp::fromAnyPtr<KSplitRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'KSplitRecorder'", field);
    }
}

const char *KSplitRecorderDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr KSplitRecorderDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    KSplitRecorder *pp = omnetpp::fromAnyPtr<KSplitRecorder>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void KSplitRecorderDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    KSplitRecorder *pp = omnetpp::fromAnyPtr<KSplitRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'KSplitRecorder'", field);
    }
}

class PSquareRecorderDescriptor : public omnetpp::cClassDescriptor
{
  private:
    mutable const char **propertyNames;
    enum FieldConstants {
    };
  public:
    PSquareRecorderDescriptor();
    virtual ~PSquareRecorderDescriptor();

    virtual bool doesSupport(omnetpp::cObject *obj) const override;
    virtual const char **getPropertyNames() const override;
    virtual const char *getProperty(const char *propertyName) const override;
    virtual int getFieldCount() const override;
    virtual const char *getFieldName(int field) const override;
    virtual int findField(const char *fieldName) const override;
    virtual unsigned int getFieldTypeFlags(int field) const override;
    virtual const char *getFieldTypeString(int field) const override;
    virtual const char **getFieldPropertyNames(int field) const override;
    virtual const char *getFieldProperty(int field, const char *propertyName) const override;
    virtual int getFieldArraySize(omnetpp::any_ptr object, int field) const override;
    virtual void setFieldArraySize(omnetpp::any_ptr object, int field, int size) const override;

    virtual const char *getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const override;
    virtual std::string getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const override;
    virtual omnetpp::cValue getFieldValue(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const override;

    virtual const char *getFieldStructName(int field) const override;
    virtual omnetpp::any_ptr getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const override;
    virtual void setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const override;
};

Register_ClassDescriptor(PSquareRecorderDescriptor)

PSquareRecorderDescriptor::PSquareRecorderDescriptor() : omnetpp::cClassDescriptor(omnetpp::opp_typename(typeid(omnetpp::PSquareRecorder)), "omnetpp::StatisticsRecorder")
{
    propertyNames = nullptr;
}

PSquareRecorderDescriptor::~PSquareRecorderDescriptor()
{
    delete[] propertyNames;
}

bool PSquareRecorderDescriptor::doesSupport(omnetpp::cObject *obj) const
{
    return dynamic_cast<PSquareRecorder *>(obj)!=nullptr;
}

const char **PSquareRecorderDescriptor::getPropertyNames() const
{
    if (!propertyNames) {
        static const char *names[] = { "existingClass", "overwritePreviousDefinition", "descriptor",  nullptr };
        omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
        const char **baseNames = base ? base->getPropertyNames() : nullptr;
        propertyNames = mergeLists(baseNames, names);
    }
    return propertyNames;
}

const char *PSquareRecorderDescriptor::getProperty(const char *propertyName) const
{
    if (!strcmp(propertyName, "existingClass")) return "";
    if (!strcmp(propertyName, "overwritePreviousDefinition")) return "";
    if (!strcmp(propertyName, "descriptor")) return "readonly";
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->getProperty(propertyName) : nullptr;
}

int PSquareRecorderDescriptor::getFieldCount() const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? 0+base->getFieldCount() : 0;
}

unsigned int PSquareRecorderDescriptor::getFieldTypeFlags(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeFlags(field);
        field -= base->getFieldCount();
    }
    return 0;
}

const char *PSquareRecorderDescriptor::getFieldName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

int PSquareRecorderDescriptor::findField(const char *fieldName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    return base ? base->findField(fieldName) : -1;
}

const char *PSquareRecorderDescriptor::getFieldTypeString(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldTypeString(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

const char **PSquareRecorderDescriptor::getFieldPropertyNames(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldPropertyNames(field);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

const char *PSquareRecorderDescriptor::getFieldProperty(int field, const char *propertyName) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldProperty(field, propertyName);
        field -= base->getFieldCount();
    }
    switch (field) {
        default: return nullptr;
    }
}

int PSquareRecorderDescriptor::getFieldArraySize(omnetpp::any_ptr object, int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldArraySize(object, field);
        field -= base->getFieldCount();
    }
    PSquareRecorder *pp = omnetpp::fromAnyPtr<PSquareRecorder>(object); (void)pp;
    switch (field) {
        default: return 0;
    }
}

void PSquareRecorderDescriptor::setFieldArraySize(omnetpp::any_ptr object, int field, int size) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldArraySize(object, field, size);
            return;
        }
        field -= base->getFieldCount();
    }
    PSquareRecorder *pp = omnetpp::fromAnyPtr<PSquareRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set array size of field %d of class 'PSquareRecorder'", field);
    }
}

const char *PSquareRecorderDescriptor::getFieldDynamicTypeString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldDynamicTypeString(object,field,i);
        field -= base->getFieldCount();
    }
    PSquareRecorder *pp = omnetpp::fromAnyPtr<PSquareRecorder>(object); (void)pp;
    switch (field) {
        default: return nullptr;
    }
}

std::string PSquareRecorderDescriptor::getFieldValueAsString(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValueAsString(object,field,i);
        field -= base->getFieldCount();
    }
    PSquareRecorder *pp = omnetpp::fromAnyPtr<PSquareRecorder>(object); (void)pp;
    switch (field) {
        default: return "";
    }
}

void PSquareRecorderDescriptor::setFieldValueAsString(omnetpp::any_ptr object, int field, int i, const char *value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValueAsString(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    PSquareRecorder *pp = omnetpp::fromAnyPtr<PSquareRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'PSquareRecorder'", field);
    }
}

omnetpp::cValue PSquareRecorderDescriptor::getFieldValue(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldValue(object,field,i);
        field -= base->getFieldCount();
    }
    PSquareRecorder *pp = omnetpp::fromAnyPtr<PSquareRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot return field %d of class 'PSquareRecorder' as cValue -- field index out of range?", field);
    }
}

void PSquareRecorderDescriptor::setFieldValue(omnetpp::any_ptr object, int field, int i, const omnetpp::cValue& value) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldValue(object, field, i, value);
            return;
        }
        field -= base->getFieldCount();
    }
    PSquareRecorder *pp = omnetpp::fromAnyPtr<PSquareRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'PSquareRecorder'", field);
    }
}

const char *PSquareRecorderDescriptor::getFieldStructName(int field) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructName(field);
        field -= base->getFieldCount();
    }
    return nullptr;
}

omnetpp::any_ptr PSquareRecorderDescriptor::getFieldStructValuePointer(omnetpp::any_ptr object, int field, int i) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount())
            return base->getFieldStructValuePointer(object, field, i);
        field -= base->getFieldCount();
    }
    PSquareRecorder *pp = omnetpp::fromAnyPtr<PSquareRecorder>(object); (void)pp;
    switch (field) {
        default: return omnetpp::any_ptr(nullptr);
    }
}

void PSquareRecorderDescriptor::setFieldStructValuePointer(omnetpp::any_ptr object, int field, int i, omnetpp::any_ptr ptr) const
{
    omnetpp::cClassDescriptor *base = getBaseClassDescriptor();
    if (base) {
        if (field < base->getFieldCount()){
            base->setFieldStructValuePointer(object, field, i, ptr);
            return;
        }
        field -= base->getFieldCount();
    }
    PSquareRecorder *pp = omnetpp::fromAnyPtr<PSquareRecorder>(object); (void)pp;
    switch (field) {
        default: throw omnetpp::cRuntimeError("Cannot set field %d of class 'PSquareRecorder'", field);
    }
}

}  // namespace omnetpp

namespace omnetpp {

}  // namespace omnetpp

